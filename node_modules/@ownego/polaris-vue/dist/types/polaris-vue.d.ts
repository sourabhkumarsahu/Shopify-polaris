import { AllowedComponentProps } from 'vue';
import { App } from 'vue';
import { BorderRadiusAliasOrScale } from '@shopify/polaris-tokens';
import { BorderWidthScale } from '@shopify/polaris-tokens';
import { BreakpointsAlias } from '@shopify/polaris-tokens';
import { BreakpointsAliasDirection } from '@shopify/polaris-tokens';
import { ColorBackgroundAlias } from '@shopify/polaris-tokens';
import { ColorBorderAlias } from '@shopify/polaris-tokens';
import { ColorTextAlias } from '@shopify/polaris-tokens';
import { Component } from 'vue';
import { ComponentCustomProps } from 'vue';
import { ComponentOptionsMixin } from 'vue';
import { ComputedRef } from 'vue';
import { CreateComponentPublicInstance } from 'vue';
import { DefineComponent } from 'vue';
import { ExtractPropTypes } from 'vue';
import { HSBAColor } from '../../../polaris/polaris-react/src/utilities/color-types';
import { HSBColor } from '../../../polaris/polaris-react/src/utilities/color-types';
import { I18n } from '../../../polaris/polaris-react/src/utilities/i18n/I18n';
import { MotionDurationScale } from '@shopify/polaris-tokens';
import { PropType } from 'vue';
import { PublicProps } from 'vue';
import { Range as Range_3 } from '../../../polaris/polaris-react/src/utilities/dates';
import { Ref } from 'vue';
import { ShadowAliasOrScale } from '@shopify/polaris-tokens';
import { SpaceScale } from '@shopify/polaris-tokens';
import { ThemeName } from '@shopify/polaris-tokens';
import { VNode } from 'vue';
import { VNodeProps } from 'vue';

declare const __VLS_component: DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<AccountConnectionProps>, {
    connected: boolean;
    accountName: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<AccountConnectionProps>, {
    connected: boolean;
    accountName: string;
}>>>, {
    accountName: string;
    connected: boolean;
}, {}>;

declare const __VLS_component_10: DefineComponent<__VLS_TypePropsToRuntimeProps_13<BannerLayoutProps & {
    bannerIcon?: VueNode;
    actionButtons?: VueNode;
    dismissButton?: VueNode;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_13<BannerLayoutProps & {
    bannerIcon?: VueNode;
    actionButtons?: VueNode;
    dismissButton?: VueNode;
}>>>, {}, {}>;

declare const __VLS_component_11: DefineComponent<__VLS_TypePropsToRuntimeProps_14<BannerLayoutProps & {
    bannerTitle?: VueNode;
    bannerIcon?: VueNode;
    actionButtons?: VueNode;
    dismissButton?: VueNode;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_14<BannerLayoutProps & {
    bannerTitle?: VueNode;
    bannerIcon?: VueNode;
    actionButtons?: VueNode;
    dismissButton?: VueNode;
}>>>, {}, {}>;

declare const __VLS_component_12: DefineComponent<__VLS_TypePropsToRuntimeProps_15<BleedProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_15<BleedProps>>>, {}, {}>;

declare const __VLS_component_13: DefineComponent<__VLS_WithDefaults_7<__VLS_TypePropsToRuntimeProps_16<BlockStackProps>, {
    as: string;
    reverseOrder: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_7<__VLS_TypePropsToRuntimeProps_16<BlockStackProps>, {
    as: string;
    reverseOrder: boolean;
}>>>, {
    as: "div" | "fieldset" | "li" | "ol" | "span" | "ul";
    reverseOrder: boolean;
}, {}>;

declare const __VLS_component_14: DefineComponent<__VLS_WithDefaults_8<__VLS_TypePropsToRuntimeProps_17<BoxProps>, {
    as: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_8<__VLS_TypePropsToRuntimeProps_17<BoxProps>, {
    as: string;
}>>>, {
    as: "div" | "legend" | "li" | "section" | "span" | "ul";
}, {}>;

declare const __VLS_component_15: DefineComponent<__VLS_WithDefaults_9<__VLS_TypePropsToRuntimeProps_20<ButtonProps>, {
    size: string;
    textAlign: string;
    variant: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_9<__VLS_TypePropsToRuntimeProps_20<ButtonProps>, {
    size: string;
    textAlign: string;
    variant: string;
}>>>, {
    size: "micro" | "slim" | "medium" | "large";
    textAlign: "left" | "right" | "center" | "start" | "end";
    variant: "plain" | "primary" | "secondary" | "tertiary" | "monochromePlain";
}, {}>;

declare const __VLS_component_16: DefineComponent<__VLS_TypePropsToRuntimeProps_22<ButtonGroupProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_22<ButtonGroupProps>>>, {}, {}>;

declare const __VLS_component_17: DefineComponent<__VLS_TypePropsToRuntimeProps_24<CalloutCardProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    dismiss: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_24<CalloutCardProps>>> & {
    onDismiss?: (() => any) | undefined;
}, {}, {}>;

declare const __VLS_component_18: DefineComponent<__VLS_WithDefaults_10<__VLS_TypePropsToRuntimeProps_25<CardProps>, {
    background: string;
    padding: string;
    roundedAbove: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_10<__VLS_TypePropsToRuntimeProps_25<CardProps>, {
    background: string;
    padding: string;
    roundedAbove: string;
}>>>, {
    background: ColorBackgroundAlias;
    padding: SpaceScale | {
        xs?: SpaceScale | undefined;
        sm?: SpaceScale | undefined;
        md?: SpaceScale | undefined;
        lg?: SpaceScale | undefined;
        xl?: SpaceScale | undefined;
    };
    roundedAbove: BreakpointsAlias;
}, {}>;

declare const __VLS_component_19: DefineComponent<    {
    modelValue: PropType<boolean | string>;
    ariaControls: {
        type: PropType<string>;
    };
    ariaDescribedBy: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    checked: {
        type: PropType<boolean | "indeterminate">;
    };
    disabled: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    name: {
        type: PropType<string>;
    };
    value: {
        type: PropType<string>;
    };
    labelClassName: {
        type: PropType<string>;
    };
    fill: {
        type: PropType<ResponsiveProp<boolean>>;
    };
    helpText: {
        type: PropType<string>;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    tone: {
        type: PropType<"magic">;
    };
    bleed: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    bleedBlockStart: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    bleedBlockEnd: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    bleedInlineStart: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    bleedInlineEnd: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
}, {
    focus: () => void;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    change: (checked: boolean, id: string) => void;
    blur: () => void;
    focus: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<    {
    modelValue: PropType<boolean | string>;
    ariaControls: {
        type: PropType<string>;
    };
    ariaDescribedBy: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    checked: {
        type: PropType<boolean | "indeterminate">;
    };
    disabled: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    name: {
        type: PropType<string>;
    };
    value: {
        type: PropType<string>;
    };
    labelClassName: {
        type: PropType<string>;
    };
    fill: {
        type: PropType<ResponsiveProp<boolean>>;
    };
    helpText: {
        type: PropType<string>;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    tone: {
        type: PropType<"magic">;
    };
    bleed: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    bleedBlockStart: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    bleedBlockEnd: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    bleedInlineStart: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    bleedInlineEnd: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
}>> & {
    onChange?: ((checked: boolean, id: string) => any) | undefined;
    onBlur?: (() => any) | undefined;
    onFocus?: (() => any) | undefined;
}, {}, {}>;

declare const __VLS_component_2: DefineComponent<__VLS_WithDefaults_2<__VLS_TypePropsToRuntimeProps_3<ActionListItemDescriptor>, {
    variant: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    action: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_2<__VLS_TypePropsToRuntimeProps_3<ActionListItemDescriptor>, {
    variant: string;
}>>> & {
    onAction?: (() => any) | undefined;
}, {
    variant: "default" | "menu" | "indented";
}, {}>;

declare const __VLS_component_20: DefineComponent<__VLS_TypePropsToRuntimeProps_27<ChoiceProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    click: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_27<ChoiceProps>>> & {
    onClick?: (() => any) | undefined;
}, {}, {}>;

declare const __VLS_component_21: DefineComponent<    {
    modelValue: PropType<string[]>;
    title: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
        default: boolean;
    };
    error: {
        type: PropType<Error_2>;
    };
    allowMultiple: {
        type: PropType<boolean>;
    };
    name: {
        type: PropType<string>;
    };
    tone: {
        type: PropType<"magic">;
    };
    choices: {
        type: PropType<Choice_2[]>;
        required: true;
    };
    titleHidden: {
        type: PropType<boolean>;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    change: (value: string[], name: string) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<    {
    modelValue: PropType<string[]>;
    title: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
        default: boolean;
    };
    error: {
        type: PropType<Error_2>;
    };
    allowMultiple: {
        type: PropType<boolean>;
    };
    name: {
        type: PropType<string>;
    };
    tone: {
        type: PropType<"magic">;
    };
    choices: {
        type: PropType<Choice_2[]>;
        required: true;
    };
    titleHidden: {
        type: PropType<boolean>;
    };
}>> & {
    onChange?: ((value: string[], name: string) => any) | undefined;
}, {
    disabled: boolean;
}, {}>;

declare const __VLS_component_22: DefineComponent<__VLS_WithDefaults_12<__VLS_TypePropsToRuntimeProps_28<CollapsibleProps>, {
    transition: boolean;
    variant: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "animation-end": () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_12<__VLS_TypePropsToRuntimeProps_28<CollapsibleProps>, {
    transition: boolean;
    variant: string;
}>>> & {
    "onAnimation-end"?: (() => any) | undefined;
}, {
    transition: boolean | Transition;
    variant: "block" | "inline";
}, {}>;

declare const __VLS_component_23: DefineComponent<__VLS_WithDefaults_13<__VLS_TypePropsToRuntimeProps_29<ComboboxProps>, {
    preferredPosition: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    close: () => void;
    "scrolled-to-bottom": () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_13<__VLS_TypePropsToRuntimeProps_29<ComboboxProps>, {
    preferredPosition: string;
}>>> & {
    onClose?: (() => any) | undefined;
    "onScrolled-to-bottom"?: (() => any) | undefined;
}, {
    preferredPosition: PreferredPosition;
}, {}>;

declare const __VLS_component_24: DefineComponent<__VLS_WithDefaults_17<__VLS_TypePropsToRuntimeProps_33<DropZoneProps>, {
    disabled: boolean;
    outline: boolean;
    overlay: boolean;
    allowMultiple: boolean;
    type: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    click: (event: MouseEvent) => void;
    drop: (files: File[], acceptedFiles: File[], rejectedFiles: File[]) => void;
    "drop-accepted": (acceptedFiles: File[]) => void;
    "drop-rejected": (rejectedFiles: File[]) => void;
    "drag-over": () => void;
    "drag-enter": () => void;
    "drag-leave": () => void;
    "file-dialog-close": () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_17<__VLS_TypePropsToRuntimeProps_33<DropZoneProps>, {
    disabled: boolean;
    outline: boolean;
    overlay: boolean;
    allowMultiple: boolean;
    type: string;
}>>> & {
    onClick?: ((event: MouseEvent) => any) | undefined;
    onDrop?: ((files: File[], acceptedFiles: File[], rejectedFiles: File[]) => any) | undefined;
    "onDrop-accepted"?: ((acceptedFiles: File[]) => any) | undefined;
    "onDrop-rejected"?: ((rejectedFiles: File[]) => any) | undefined;
    "onDrag-over"?: (() => any) | undefined;
    "onDrag-enter"?: (() => any) | undefined;
    "onDrag-leave"?: (() => any) | undefined;
    "onFile-dialog-close"?: (() => any) | undefined;
}, {
    overlay: boolean;
    outline: boolean;
    disabled: boolean;
    type: DropZoneFileType;
    allowMultiple: boolean;
}, {}>;

declare const __VLS_component_25: DefineComponent<__VLS_WithDefaults_18<__VLS_TypePropsToRuntimeProps_36<EmptyStateProps>, {
    fullWidth: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_18<__VLS_TypePropsToRuntimeProps_36<EmptyStateProps>, {
    fullWidth: boolean;
}>>>, {
    fullWidth: boolean;
}, {}>;

declare const __VLS_component_26: DefineComponent<__VLS_TypePropsToRuntimeProps_38<ExceptionListProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_38<ExceptionListProps>>>, {}, {}>;

declare const __VLS_component_27: DefineComponent<__VLS_TypePropsToRuntimeProps_39<FiltersProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "clear-all": () => void;
    "add-filter-click": () => void;
    "query-change": (query: string) => void;
    "query-clear": () => void;
    "query-blur": () => void;
    "query-focus": () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_39<FiltersProps>>> & {
    "onClear-all"?: (() => any) | undefined;
    "onAdd-filter-click"?: (() => any) | undefined;
    "onQuery-change"?: ((query: string) => any) | undefined;
    "onQuery-clear"?: (() => any) | undefined;
    "onQuery-blur"?: (() => any) | undefined;
    "onQuery-focus"?: (() => any) | undefined;
}, {}, {}>;

declare const __VLS_component_28: DefineComponent<__VLS_WithDefaults_20<__VLS_TypePropsToRuntimeProps_43<FooterHelpProps>, {
    align: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_20<__VLS_TypePropsToRuntimeProps_43<FooterHelpProps>, {
    align: string;
}>>>, {
    align: "start" | "center" | "end";
}, {}>;

declare const __VLS_component_29: DefineComponent<__VLS_WithDefaults_21<__VLS_TypePropsToRuntimeProps_44<FormProps>, {
    method: string;
    implicitSubmit: boolean;
    preventDefault: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    submit: (e: Event) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_21<__VLS_TypePropsToRuntimeProps_44<FormProps>, {
    method: string;
    implicitSubmit: boolean;
    preventDefault: boolean;
}>>> & {
    onSubmit?: ((e: Event) => any) | undefined;
}, {
    implicitSubmit: boolean;
    method: Method;
    preventDefault: boolean;
}, {}>;

declare const __VLS_component_3: DefineComponent<__VLS_TypePropsToRuntimeProps_5<AppProviderProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_5<AppProviderProps>>>, {}, {}>;

declare const __VLS_component_30: DefineComponent<__VLS_TypePropsToRuntimeProps_45<FormLayoutProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_45<FormLayoutProps>>>, {}, {}>;

declare const __VLS_component_31: DefineComponent<    {}, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    action: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<    {}>> & {
    onAction?: (() => any) | undefined;
}, {}, {}>;

declare const __VLS_component_32: DefineComponent<__VLS_TypePropsToRuntimeProps_48<GridProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_48<GridProps>>>, {}, {}>;

declare const __VLS_component_33: DefineComponent<__VLS_WithDefaults_24<__VLS_TypePropsToRuntimeProps_54<IndexTableProps>, {
    selectable: boolean;
    selectedItemsCount: number;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    sort: (headingIndex: number, direction: IndexTableSortDirection) => void;
    "selection-change": (selectionType: SelectionType, toggleType: boolean, selection?: string | Range_2 | undefined, position?: number | undefined) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_24<__VLS_TypePropsToRuntimeProps_54<IndexTableProps>, {
    selectable: boolean;
    selectedItemsCount: number;
}>>> & {
    onSort?: ((headingIndex: number, direction: IndexTableSortDirection) => any) | undefined;
    "onSelection-change"?: ((selectionType: SelectionType, toggleType: boolean, selection?: string | Range_2 | undefined, position?: number | undefined) => any) | undefined;
}, {
    selectedItemsCount: "All" | number;
    selectable: boolean;
}, {}>;

declare const __VLS_component_34: DefineComponent<__VLS_WithDefaults_25<__VLS_TypePropsToRuntimeProps_55<RowProps>, {
    rowType: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    click: () => void;
    navigation: (id: string) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_25<__VLS_TypePropsToRuntimeProps_55<RowProps>, {
    rowType: string;
}>>> & {
    onClick?: (() => any) | undefined;
    onNavigation?: ((id: string) => any) | undefined;
}, {
    rowType: RowType;
}, {}>;

declare const __VLS_component_35: DefineComponent<__VLS_WithDefaults_26<__VLS_TypePropsToRuntimeProps_56<CellProps_2>, {
    as: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_26<__VLS_TypePropsToRuntimeProps_56<CellProps_2>, {
    as: string;
}>>>, {
    as: "th" | "td";
}, {}>;

declare const __VLS_component_36: DefineComponent<__VLS_TypePropsToRuntimeProps_59<InlineGridProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_59<InlineGridProps>>>, {}, {}>;

declare const __VLS_component_37: DefineComponent<__VLS_WithDefaults_28<__VLS_TypePropsToRuntimeProps_60<InlineStackProps>, {
    as: string;
    wrap: boolean;
    direction: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_28<__VLS_TypePropsToRuntimeProps_60<InlineStackProps>, {
    as: string;
    wrap: boolean;
    direction: string;
}>>>, {
    direction: "row" | "row-reverse" | {
        xs?: "row" | "row-reverse" | undefined;
        sm?: "row" | "row-reverse" | undefined;
        md?: "row" | "row-reverse" | undefined;
        lg?: "row" | "row-reverse" | undefined;
        xl?: "row" | "row-reverse" | undefined;
    };
    as: Element_4;
    wrap: boolean;
}, {}>;

declare const __VLS_component_38: DefineComponent<__VLS_TypePropsToRuntimeProps_61<KeyboardKeyProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_61<KeyboardKeyProps>>>, {}, {}>;

declare const __VLS_component_39: DefineComponent<__VLS_TypePropsToRuntimeProps_63<LabelProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_63<LabelProps>>>, {}, {}>;

declare const __VLS_component_4: DefineComponent<__VLS_TypePropsToRuntimeProps_6<AutocompleteProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    select: (selected: string[]) => void;
    "load-more-results": () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_6<AutocompleteProps>>> & {
    onSelect?: ((selected: string[]) => any) | undefined;
    "onLoad-more-results"?: (() => any) | undefined;
}, {}, {}>;

declare const __VLS_component_40: DefineComponent<__VLS_TypePropsToRuntimeProps_64<LabelledProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_64<LabelledProps>>>, {}, {}>;

declare const __VLS_component_41: DefineComponent<__VLS_TypePropsToRuntimeProps_65<LayoutProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_65<LayoutProps>>>, {}, {}>;

declare const __VLS_component_42: DefineComponent<__VLS_TypePropsToRuntimeProps_67<AnnotatedSectionProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_67<AnnotatedSectionProps>>>, {}, {}>;

declare const __VLS_component_43: DefineComponent<    {}, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<    {}>>, {}, {}>;

declare const __VLS_component_44: DefineComponent<__VLS_WithDefaults_31<__VLS_TypePropsToRuntimeProps_71<LegacyStackProps>, {
    wrap: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_31<__VLS_TypePropsToRuntimeProps_71<LegacyStackProps>, {
    wrap: boolean;
}>>>, {
    wrap: boolean;
}, {}>;

declare const __VLS_component_45: DefineComponent<__VLS_WithDefaults_32<__VLS_TypePropsToRuntimeProps_72<LegacyItemProps>, {
    fill: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_32<__VLS_TypePropsToRuntimeProps_72<LegacyItemProps>, {
    fill: boolean;
}>>>, {
    fill: boolean;
}, {}>;

declare const __VLS_component_46: DefineComponent<__VLS_TypePropsToRuntimeProps_73<LinkProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    click: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_73<LinkProps>>> & {
    onClick?: (() => any) | undefined;
}, {}, {}>;

declare const __VLS_component_47: DefineComponent<__VLS_WithDefaults_33<__VLS_TypePropsToRuntimeProps_74<ListProps>, {
    gap: string;
    type: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_33<__VLS_TypePropsToRuntimeProps_74<ListProps>, {
    gap: string;
    type: string;
}>>>, {
    gap: Spacing_6;
    type: Type;
}, {}>;

declare const __VLS_component_48: DefineComponent<__VLS_WithDefaults_34<__VLS_TypePropsToRuntimeProps_75<ListBoxProps>, {
    autoSelection: AutoSelection;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    select: (value: string) => void;
    "active-option-change": (value: string) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_34<__VLS_TypePropsToRuntimeProps_75<ListBoxProps>, {
    autoSelection: AutoSelection;
}>>> & {
    onSelect?: ((value: string) => any) | undefined;
    "onActive-option-change"?: ((value: string) => any) | undefined;
}, {
    autoSelection: AutoSelection;
}, {}>;

declare const __VLS_component_49: DefineComponent<    {
    modelValue: PropType<boolean>;
    value: {
        type: PropType<string>;
        required: true;
    };
    accessibilityLabel: {
        type: PropType<string>;
    };
    selected: {
        type: PropType<boolean>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    divider: {
        type: PropType<boolean>;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<    {
    modelValue: PropType<boolean>;
    value: {
        type: PropType<string>;
        required: true;
    };
    accessibilityLabel: {
        type: PropType<string>;
    };
    selected: {
        type: PropType<boolean>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    divider: {
        type: PropType<boolean>;
    };
}>>, {}, {}>;

declare const __VLS_component_5: DefineComponent<    {
    modelValue: PropType<string>;
    size: {
        type: PropType<"slim" | "medium">;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    value: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    pattern: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    variant: {
        type: PropType<"inherit" | "borderless">;
    };
    role: {
        type: PropType<string>;
    };
    type: {
        type: PropType<"number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency">;
        default: string;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    verticalContent: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    clearButton: {
        type: PropType<boolean>;
    };
    selectTextOnFocus: {
        type: PropType<boolean>;
    };
    suggestion: {
        type: PropType<string>;
    };
    readOnly: {
        type: PropType<boolean>;
    };
    autoFocus: {
        type: PropType<boolean>;
    };
    focused: {
        type: PropType<boolean>;
    };
    multiline: {
        type: PropType<number | boolean>;
    };
    name: {
        type: PropType<string>;
    };
    step: {
        type: PropType<number>;
    };
    largeStep: {
        type: PropType<number>;
    };
    autoComplete: {
        type: PropType<string>;
        required: true;
    };
    max: {
        type: PropType<string | number>;
    };
    maxLength: {
        type: PropType<number>;
    };
    min: {
        type: PropType<string | number>;
    };
    minLength: {
        type: PropType<number>;
    };
    inputMode: {
        type: PropType<"search" | "text" | "url" | "none" | "email" | "tel" | "decimal" | "numeric">;
    };
    spellCheck: {
        type: PropType<boolean>;
    };
    ariaOwns: {
        type: PropType<string>;
    };
    ariaExpanded: {
        type: PropType<boolean>;
    };
    ariaControls: {
        type: PropType<string>;
    };
    ariaActiveDescendant: {
        type: PropType<string>;
    };
    ariaAutocomplete: {
        type: PropType<string>;
        default: string;
    };
    showCharacterCount: {
        type: PropType<boolean>;
    };
    align: {
        type: PropType<"left" | "right" | "center">;
    };
    monospaced: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
    autoSize: {
        type: PropType<boolean>;
    };
    readonly: {
        type: PropType<boolean>;
    };
} | {
    modelValue: PropType<string>;
    size: {
        type: PropType<"slim" | "medium">;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    value: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    pattern: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    variant: {
        type: PropType<"inherit" | "borderless">;
    };
    role: {
        type: PropType<string>;
    };
    type: {
        type: PropType<"number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency">;
        default: string;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    verticalContent: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    clearButton: {
        type: PropType<boolean>;
    };
    selectTextOnFocus: {
        type: PropType<boolean>;
    };
    suggestion: {
        type: PropType<string>;
    };
    readOnly: {
        type: PropType<boolean>;
    };
    autoFocus: {
        type: PropType<boolean>;
    };
    focused: {
        type: PropType<boolean>;
    };
    multiline: {
        type: PropType<number | boolean>;
    };
    name: {
        type: PropType<string>;
    };
    step: {
        type: PropType<number>;
    };
    largeStep: {
        type: PropType<number>;
    };
    autoComplete: {
        type: PropType<string>;
        required: true;
    };
    max: {
        type: PropType<string | number>;
    };
    maxLength: {
        type: PropType<number>;
    };
    min: {
        type: PropType<string | number>;
    };
    minLength: {
        type: PropType<number>;
    };
    inputMode: {
        type: PropType<"search" | "text" | "url" | "none" | "email" | "tel" | "decimal" | "numeric">;
    };
    spellCheck: {
        type: PropType<boolean>;
    };
    ariaOwns: {
        type: PropType<string>;
    };
    ariaExpanded: {
        type: PropType<boolean>;
    };
    ariaControls: {
        type: PropType<string>;
    };
    ariaActiveDescendant: {
        type: PropType<string>;
    };
    ariaAutocomplete: {
        type: PropType<string>;
        default: string;
    };
    showCharacterCount: {
        type: PropType<boolean>;
    };
    align: {
        type: PropType<"left" | "right" | "center">;
    };
    monospaced: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
    autoSize: {
        type: PropType<boolean>;
    };
    readonly: {
        type: PropType<boolean>;
    };
} | {
    modelValue: PropType<string>;
    size: {
        type: PropType<"slim" | "medium">;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    value: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    pattern: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    variant: {
        type: PropType<"inherit" | "borderless">;
    };
    role: {
        type: PropType<string>;
    };
    type: {
        type: PropType<"number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency">;
        default: string;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    verticalContent: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    clearButton: {
        type: PropType<boolean>;
    };
    selectTextOnFocus: {
        type: PropType<boolean>;
    };
    suggestion: {
        type: PropType<string>;
    };
    readOnly: {
        type: PropType<boolean>;
    };
    autoFocus: {
        type: PropType<boolean>;
    };
    focused: {
        type: PropType<boolean>;
    };
    multiline: {
        type: PropType<number | boolean>;
    };
    name: {
        type: PropType<string>;
    };
    step: {
        type: PropType<number>;
    };
    largeStep: {
        type: PropType<number>;
    };
    autoComplete: {
        type: PropType<string>;
        required: true;
    };
    max: {
        type: PropType<string | number>;
    };
    maxLength: {
        type: PropType<number>;
    };
    min: {
        type: PropType<string | number>;
    };
    minLength: {
        type: PropType<number>;
    };
    inputMode: {
        type: PropType<"search" | "text" | "url" | "none" | "email" | "tel" | "decimal" | "numeric">;
    };
    spellCheck: {
        type: PropType<boolean>;
    };
    ariaOwns: {
        type: PropType<string>;
    };
    ariaExpanded: {
        type: PropType<boolean>;
    };
    ariaControls: {
        type: PropType<string>;
    };
    ariaActiveDescendant: {
        type: PropType<string>;
    };
    ariaAutocomplete: {
        type: PropType<string>;
        default: string;
    };
    showCharacterCount: {
        type: PropType<boolean>;
    };
    align: {
        type: PropType<"left" | "right" | "center">;
    };
    monospaced: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
    autoSize: {
        type: PropType<boolean>;
    };
} | {
    modelValue: PropType<string>;
    size: {
        type: PropType<"slim" | "medium">;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    value: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    pattern: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    variant: {
        type: PropType<"inherit" | "borderless">;
    };
    role: {
        type: PropType<string>;
    };
    type: {
        type: PropType<"number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency">;
        default: string;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    verticalContent: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    clearButton: {
        type: PropType<boolean>;
    };
    selectTextOnFocus: {
        type: PropType<boolean>;
    };
    suggestion: {
        type: PropType<string>;
    };
    readOnly: {
        type: PropType<boolean>;
    };
    autoFocus: {
        type: PropType<boolean>;
    };
    focused: {
        type: PropType<boolean>;
    };
    multiline: {
        type: PropType<number | boolean>;
    };
    name: {
        type: PropType<string>;
    };
    step: {
        type: PropType<number>;
    };
    largeStep: {
        type: PropType<number>;
    };
    autoComplete: {
        type: PropType<string>;
        required: true;
    };
    max: {
        type: PropType<string | number>;
    };
    maxLength: {
        type: PropType<number>;
    };
    min: {
        type: PropType<string | number>;
    };
    minLength: {
        type: PropType<number>;
    };
    inputMode: {
        type: PropType<"search" | "text" | "url" | "none" | "email" | "tel" | "decimal" | "numeric">;
    };
    spellCheck: {
        type: PropType<boolean>;
    };
    ariaOwns: {
        type: PropType<string>;
    };
    ariaExpanded: {
        type: PropType<boolean>;
    };
    ariaControls: {
        type: PropType<string>;
    };
    ariaActiveDescendant: {
        type: PropType<string>;
    };
    ariaAutocomplete: {
        type: PropType<string>;
        default: string;
    };
    showCharacterCount: {
        type: PropType<boolean>;
    };
    align: {
        type: PropType<"left" | "right" | "center">;
    };
    monospaced: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
    autoSize: {
        type: PropType<boolean>;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    change: (value: string, id: string) => void;
    input: (e: InputEvent, value: string) => void;
    blur: (event: FocusEvent) => void;
    focus: (event: FocusEvent) => void;
    "clear-button-click": (id: string) => void;
    "spinner-change": (value: string, id: string) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<    {
    modelValue: PropType<string>;
    size: {
        type: PropType<"slim" | "medium">;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    value: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    pattern: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    variant: {
        type: PropType<"inherit" | "borderless">;
    };
    role: {
        type: PropType<string>;
    };
    type: {
        type: PropType<"number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency">;
        default: string;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    verticalContent: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    clearButton: {
        type: PropType<boolean>;
    };
    selectTextOnFocus: {
        type: PropType<boolean>;
    };
    suggestion: {
        type: PropType<string>;
    };
    readOnly: {
        type: PropType<boolean>;
    };
    autoFocus: {
        type: PropType<boolean>;
    };
    focused: {
        type: PropType<boolean>;
    };
    multiline: {
        type: PropType<number | boolean>;
    };
    name: {
        type: PropType<string>;
    };
    step: {
        type: PropType<number>;
    };
    largeStep: {
        type: PropType<number>;
    };
    autoComplete: {
        type: PropType<string>;
        required: true;
    };
    max: {
        type: PropType<string | number>;
    };
    maxLength: {
        type: PropType<number>;
    };
    min: {
        type: PropType<string | number>;
    };
    minLength: {
        type: PropType<number>;
    };
    inputMode: {
        type: PropType<"search" | "text" | "url" | "none" | "email" | "tel" | "decimal" | "numeric">;
    };
    spellCheck: {
        type: PropType<boolean>;
    };
    ariaOwns: {
        type: PropType<string>;
    };
    ariaExpanded: {
        type: PropType<boolean>;
    };
    ariaControls: {
        type: PropType<string>;
    };
    ariaActiveDescendant: {
        type: PropType<string>;
    };
    ariaAutocomplete: {
        type: PropType<string>;
        default: string;
    };
    showCharacterCount: {
        type: PropType<boolean>;
    };
    align: {
        type: PropType<"left" | "right" | "center">;
    };
    monospaced: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
    autoSize: {
        type: PropType<boolean>;
    };
    readonly: {
        type: PropType<boolean>;
    };
}> | ExtractPropTypes<    {
    modelValue: PropType<string>;
    size: {
        type: PropType<"slim" | "medium">;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    value: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    pattern: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    variant: {
        type: PropType<"inherit" | "borderless">;
    };
    role: {
        type: PropType<string>;
    };
    type: {
        type: PropType<"number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency">;
        default: string;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    verticalContent: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    clearButton: {
        type: PropType<boolean>;
    };
    selectTextOnFocus: {
        type: PropType<boolean>;
    };
    suggestion: {
        type: PropType<string>;
    };
    readOnly: {
        type: PropType<boolean>;
    };
    autoFocus: {
        type: PropType<boolean>;
    };
    focused: {
        type: PropType<boolean>;
    };
    multiline: {
        type: PropType<number | boolean>;
    };
    name: {
        type: PropType<string>;
    };
    step: {
        type: PropType<number>;
    };
    largeStep: {
        type: PropType<number>;
    };
    autoComplete: {
        type: PropType<string>;
        required: true;
    };
    max: {
        type: PropType<string | number>;
    };
    maxLength: {
        type: PropType<number>;
    };
    min: {
        type: PropType<string | number>;
    };
    minLength: {
        type: PropType<number>;
    };
    inputMode: {
        type: PropType<"search" | "text" | "url" | "none" | "email" | "tel" | "decimal" | "numeric">;
    };
    spellCheck: {
        type: PropType<boolean>;
    };
    ariaOwns: {
        type: PropType<string>;
    };
    ariaExpanded: {
        type: PropType<boolean>;
    };
    ariaControls: {
        type: PropType<string>;
    };
    ariaActiveDescendant: {
        type: PropType<string>;
    };
    ariaAutocomplete: {
        type: PropType<string>;
        default: string;
    };
    showCharacterCount: {
        type: PropType<boolean>;
    };
    align: {
        type: PropType<"left" | "right" | "center">;
    };
    monospaced: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
    autoSize: {
        type: PropType<boolean>;
    };
    readonly: {
        type: PropType<boolean>;
    };
}> | ExtractPropTypes<    {
    modelValue: PropType<string>;
    size: {
        type: PropType<"slim" | "medium">;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    value: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    pattern: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    variant: {
        type: PropType<"inherit" | "borderless">;
    };
    role: {
        type: PropType<string>;
    };
    type: {
        type: PropType<"number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency">;
        default: string;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    verticalContent: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    clearButton: {
        type: PropType<boolean>;
    };
    selectTextOnFocus: {
        type: PropType<boolean>;
    };
    suggestion: {
        type: PropType<string>;
    };
    readOnly: {
        type: PropType<boolean>;
    };
    autoFocus: {
        type: PropType<boolean>;
    };
    focused: {
        type: PropType<boolean>;
    };
    multiline: {
        type: PropType<number | boolean>;
    };
    name: {
        type: PropType<string>;
    };
    step: {
        type: PropType<number>;
    };
    largeStep: {
        type: PropType<number>;
    };
    autoComplete: {
        type: PropType<string>;
        required: true;
    };
    max: {
        type: PropType<string | number>;
    };
    maxLength: {
        type: PropType<number>;
    };
    min: {
        type: PropType<string | number>;
    };
    minLength: {
        type: PropType<number>;
    };
    inputMode: {
        type: PropType<"search" | "text" | "url" | "none" | "email" | "tel" | "decimal" | "numeric">;
    };
    spellCheck: {
        type: PropType<boolean>;
    };
    ariaOwns: {
        type: PropType<string>;
    };
    ariaExpanded: {
        type: PropType<boolean>;
    };
    ariaControls: {
        type: PropType<string>;
    };
    ariaActiveDescendant: {
        type: PropType<string>;
    };
    ariaAutocomplete: {
        type: PropType<string>;
        default: string;
    };
    showCharacterCount: {
        type: PropType<boolean>;
    };
    align: {
        type: PropType<"left" | "right" | "center">;
    };
    monospaced: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
    autoSize: {
        type: PropType<boolean>;
    };
}> | ExtractPropTypes<    {
    modelValue: PropType<string>;
    size: {
        type: PropType<"slim" | "medium">;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    value: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    pattern: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    variant: {
        type: PropType<"inherit" | "borderless">;
    };
    role: {
        type: PropType<string>;
    };
    type: {
        type: PropType<"number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency">;
        default: string;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    verticalContent: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    clearButton: {
        type: PropType<boolean>;
    };
    selectTextOnFocus: {
        type: PropType<boolean>;
    };
    suggestion: {
        type: PropType<string>;
    };
    readOnly: {
        type: PropType<boolean>;
    };
    autoFocus: {
        type: PropType<boolean>;
    };
    focused: {
        type: PropType<boolean>;
    };
    multiline: {
        type: PropType<number | boolean>;
    };
    name: {
        type: PropType<string>;
    };
    step: {
        type: PropType<number>;
    };
    largeStep: {
        type: PropType<number>;
    };
    autoComplete: {
        type: PropType<string>;
        required: true;
    };
    max: {
        type: PropType<string | number>;
    };
    maxLength: {
        type: PropType<number>;
    };
    min: {
        type: PropType<string | number>;
    };
    minLength: {
        type: PropType<number>;
    };
    inputMode: {
        type: PropType<"search" | "text" | "url" | "none" | "email" | "tel" | "decimal" | "numeric">;
    };
    spellCheck: {
        type: PropType<boolean>;
    };
    ariaOwns: {
        type: PropType<string>;
    };
    ariaExpanded: {
        type: PropType<boolean>;
    };
    ariaControls: {
        type: PropType<string>;
    };
    ariaActiveDescendant: {
        type: PropType<string>;
    };
    ariaAutocomplete: {
        type: PropType<string>;
        default: string;
    };
    showCharacterCount: {
        type: PropType<boolean>;
    };
    align: {
        type: PropType<"left" | "right" | "center">;
    };
    monospaced: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
    autoSize: {
        type: PropType<boolean>;
    };
}>> & {
    onChange?: ((value: string, id: string) => any) | undefined;
    onInput?: ((e: InputEvent, value: string) => any) | undefined;
    onBlur?: ((event: FocusEvent) => any) | undefined;
    onFocus?: ((event: FocusEvent) => any) | undefined;
    "onClear-button-click"?: ((id: string) => any) | undefined;
    "onSpinner-change"?: ((value: string, id: string) => any) | undefined;
}, {
    type: "number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency";
    ariaAutocomplete: string;
} | {
    type: "number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency";
    ariaAutocomplete: string;
} | {
    type: "number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency";
    ariaAutocomplete: string;
} | {
    type: "number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency";
    ariaAutocomplete: string;
}, {}>;

declare const __VLS_component_50: DefineComponent<__VLS_WithDefaults_35<__VLS_TypePropsToRuntimeProps_78<SectionProps_3>, {
    divider: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_35<__VLS_TypePropsToRuntimeProps_78<SectionProps_3>, {
    divider: boolean;
}>>>, {
    divider: boolean;
}, {}>;

declare const __VLS_component_51: DefineComponent<__VLS_WithDefaults_36<__VLS_TypePropsToRuntimeProps_79<MediaCardProps>, {
    popoverActions: () => never[];
    portrait: boolean;
    size: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    dismiss: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_36<__VLS_TypePropsToRuntimeProps_79<MediaCardProps>, {
    popoverActions: () => never[];
    portrait: boolean;
    size: string;
}>>> & {
    onDismiss?: (() => any) | undefined;
}, {
    size: Size_4;
    popoverActions: ActionListItemDescriptor[];
    portrait: boolean;
}, {}>;

declare const __VLS_component_52: DefineComponent<__VLS_WithDefaults_37<__VLS_TypePropsToRuntimeProps_80<ModalProps>, {
    titleHidden: boolean;
    clickOutsideToClose: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    close: () => void;
    "scrolled-to-bottom": () => void;
    "iframe-load": (source: Event) => void;
    "transition-end": () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_37<__VLS_TypePropsToRuntimeProps_80<ModalProps>, {
    titleHidden: boolean;
    clickOutsideToClose: boolean;
}>>> & {
    onClose?: (() => any) | undefined;
    "onScrolled-to-bottom"?: (() => any) | undefined;
    "onIframe-load"?: ((source: Event) => any) | undefined;
    "onTransition-end"?: (() => any) | undefined;
}, {
    titleHidden: boolean;
    clickOutsideToClose: boolean;
}, {}>;

declare const __VLS_component_53: DefineComponent<__VLS_TypePropsToRuntimeProps_82<OptionListProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    change: (selected: string[]) => void;
    "pointer-enter-option": (selected: string) => void;
    "focus-option": (selected: string) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_82<OptionListProps>>> & {
    onChange?: ((selected: string[]) => any) | undefined;
    "onPointer-enter-option"?: ((selected: string) => any) | undefined;
    "onFocus-option"?: ((selected: string) => any) | undefined;
}, {}, {}>;

declare const __VLS_component_54: DefineComponent<__VLS_TypePropsToRuntimeProps_83<PageProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_83<PageProps>>>, {}, {}>;

declare const __VLS_component_55: DefineComponent<__VLS_TypePropsToRuntimeProps_84<PageActionsProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_84<PageActionsProps>>>, {}, {}>;

declare const __VLS_component_56: DefineComponent<__VLS_WithDefaults_39<__VLS_TypePropsToRuntimeProps_85<PaginationProps>, {
    type: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    next: () => void;
    previous: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_39<__VLS_TypePropsToRuntimeProps_85<PaginationProps>, {
    type: string;
}>>> & {
    onPrevious?: (() => any) | undefined;
    onNext?: (() => any) | undefined;
}, {
    type: "page" | "table";
}, {}>;

declare const __VLS_component_57: DefineComponent<__VLS_WithDefaults_40<__VLS_TypePropsToRuntimeProps_86<PopoverProps>, {
    activatorWrapper: string;
    preferInputActivator: boolean;
}>, {
    forceUpdatePosition: () => void;
    close: (target?: string) => void;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    close: (event: PopoverCloseSource) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_40<__VLS_TypePropsToRuntimeProps_86<PopoverProps>, {
    activatorWrapper: string;
    preferInputActivator: boolean;
}>>> & {
    onClose?: ((event: PopoverCloseSource) => any) | undefined;
}, {
    preferInputActivator: boolean;
    activatorWrapper: string;
}, {}>;

declare const __VLS_component_58: DefineComponent<__VLS_WithDefaults_42<__VLS_TypePropsToRuntimeProps_88<PaneProps>, {
    captureOverscroll: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "scrolled-to-bottom": () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_42<__VLS_TypePropsToRuntimeProps_88<PaneProps>, {
    captureOverscroll: boolean;
}>>> & {
    "onScrolled-to-bottom"?: (() => any) | undefined;
}, {
    captureOverscroll: boolean;
}, {}>;

declare const __VLS_component_59: DefineComponent<__VLS_TypePropsToRuntimeProps_90<PositionedOverlayProps>, {
    forceUpdatePosition: () => void;
    overlayDetails: ComputedRef<OverlayDetails>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "scroll-out": () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_90<PositionedOverlayProps>>> & {
    "onScroll-out"?: (() => any) | undefined;
}, {}, {}>;

declare const __VLS_component_6: DefineComponent<__VLS_WithDefaults_4<__VLS_TypePropsToRuntimeProps_9<BadgeProps>, {
    size: "medium";
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_4<__VLS_TypePropsToRuntimeProps_9<NonMutuallyExclusiveProps & {
    progress?: Progress;
    icon?: undefined;
}>, {
    size: "medium";
}>>> | Readonly<ExtractPropTypes<__VLS_WithDefaults_4<__VLS_TypePropsToRuntimeProps_9<NonMutuallyExclusiveProps & {
    icon?: IconSource;
    progress?: undefined;
}>, {
    size: "medium";
}>>>, {
    size: Size_2;
} | {
    size: Size_2;
}, {}>;

declare const __VLS_component_60: DefineComponent<    {
    modelValue: PropType<string>;
    bleed: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    bleedBlockStart: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    bleedBlockEnd: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    bleedInlineStart: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    bleedInlineEnd: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    ariaDescribedBy: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    checked: {
        type: PropType<boolean>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    name: {
        type: PropType<string>;
    };
    value: {
        type: PropType<string>;
    };
    fill: {
        type: PropType<ResponsiveProp<boolean>>;
    };
    helpText: {
        type: PropType<string>;
    };
    tone: {
        type: PropType<"magic">;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    change: (checked: boolean, value: string) => void;
    blur: () => void;
    focus: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<    {
    modelValue: PropType<string>;
    bleed: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    bleedBlockStart: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    bleedBlockEnd: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    bleedInlineStart: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    bleedInlineEnd: {
        type: PropType<SpaceScale | {
            xs?: SpaceScale | undefined;
            sm?: SpaceScale | undefined;
            md?: SpaceScale | undefined;
            lg?: SpaceScale | undefined;
            xl?: SpaceScale | undefined;
        }>;
    };
    ariaDescribedBy: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    checked: {
        type: PropType<boolean>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    name: {
        type: PropType<string>;
    };
    value: {
        type: PropType<string>;
    };
    fill: {
        type: PropType<ResponsiveProp<boolean>>;
    };
    helpText: {
        type: PropType<string>;
    };
    tone: {
        type: PropType<"magic">;
    };
}>> & {
    onChange?: ((checked: boolean, value: string) => any) | undefined;
    onBlur?: (() => any) | undefined;
    onFocus?: (() => any) | undefined;
}, {}, {}>;

declare const __VLS_component_61: DefineComponent<    {
    modelValue: {
        required: true;
        type: PropType<RangeSliderValue>;
    };
    label: {
        type: PropType<string>;
    };
    output: {
        type: PropType<boolean>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    error: {
        type: PropType<Error_2>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    step: {
        type: PropType<number>;
        default: number;
    };
    max: {
        type: PropType<number>;
        default: number;
    };
    min: {
        type: PropType<number>;
        default: number;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    change: (value: RangeSliderValue, id: string) => void;
    blur: () => void;
    focus: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<    {
    modelValue: {
        required: true;
        type: PropType<RangeSliderValue>;
    };
    label: {
        type: PropType<string>;
    };
    output: {
        type: PropType<boolean>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    error: {
        type: PropType<Error_2>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    step: {
        type: PropType<number>;
        default: number;
    };
    max: {
        type: PropType<number>;
        default: number;
    };
    min: {
        type: PropType<number>;
        default: number;
    };
}>> & {
    onChange?: ((value: RangeSliderValue, id: string) => any) | undefined;
    onBlur?: (() => any) | undefined;
    onFocus?: (() => any) | undefined;
}, {
    step: number;
    max: number;
    min: number;
}, {}>;

declare const __VLS_component_62: DefineComponent<__VLS_WithDefaults_45<__VLS_TypePropsToRuntimeProps_93<ResourceListProps<ResourceListItemData>>, {
    selectedItems: any;
    showHeader: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "selection-change": (selectedItems: ResourceListSelectedItems) => void;
    "sort-change": (selected: string, id?: string | undefined) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_45<__VLS_TypePropsToRuntimeProps_93<ResourceListProps<ResourceListItemData>>, {
    selectedItems: any;
    showHeader: boolean;
}>>> & {
    "onSelection-change"?: ((selectedItems: ResourceListSelectedItems) => any) | undefined;
    "onSort-change"?: ((selected: string, id?: string | undefined) => any) | undefined;
}, {
    selectedItems: ResourceListSelectedItems;
    showHeader: boolean;
}, {}>;

declare const __VLS_component_63: DefineComponent<__VLS_WithDefaults_46<__VLS_TypePropsToRuntimeProps_94<ScrollableProps>, {
    vertical: boolean;
    horizontal: boolean;
    scrollbarWidth: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    scrolledToBottom: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_46<__VLS_TypePropsToRuntimeProps_94<ScrollableProps>, {
    vertical: boolean;
    horizontal: boolean;
    scrollbarWidth: string;
}>>> & {
    onScrolledToBottom?: (() => any) | undefined;
}, {
    scrollbarWidth: "thin" | "none" | "auto";
    horizontal: boolean;
    vertical: boolean;
}, {}>;

declare const __VLS_component_64: DefineComponent<    {
    modelValue: PropType<string>;
    options: {
        type: PropType<(string | StrictOption | SelectGroup)[]>;
    };
    label: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    labelInline: {
        type: PropType<boolean>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    helpText: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    id: {
        type: PropType<string>;
    };
    name: {
        type: PropType<string>;
    };
    value: {
        type: PropType<string>;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    change: (selected: string, id?: string | undefined) => void;
    blur: (event: FocusEvent) => void;
    focus: (event: FocusEvent) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<    {
    modelValue: PropType<string>;
    options: {
        type: PropType<(string | StrictOption | SelectGroup)[]>;
    };
    label: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    labelInline: {
        type: PropType<boolean>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    helpText: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    id: {
        type: PropType<string>;
    };
    name: {
        type: PropType<string>;
    };
    value: {
        type: PropType<string>;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
}>> & {
    onChange?: ((selected: string, id?: string | undefined) => any) | undefined;
    onBlur?: ((event: FocusEvent) => any) | undefined;
    onFocus?: ((event: FocusEvent) => any) | undefined;
}, {}, {}>;

declare const __VLS_component_65: DefineComponent<__VLS_WithDefaults_50<__VLS_TypePropsToRuntimeProps_98<SkeletonPageProps>, {
    title: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_50<__VLS_TypePropsToRuntimeProps_98<SkeletonPageProps>, {
    title: string;
}>>>, {
    title: string;
}, {}>;

declare const __VLS_component_66: DefineComponent<__VLS_TypePropsToRuntimeProps_102<StickyProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "sticky-change": (isSticky: boolean) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_102<StickyProps>>> & {
    "onSticky-change"?: ((isSticky: boolean) => any) | undefined;
}, {}, {}>;

declare const __VLS_component_67: DefineComponent<__VLS_TypePropsToRuntimeProps_103<TabsProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    select: (selectedTabIndex: number) => void;
    "create-new-view": (value: string) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_103<TabsProps>>> & {
    onSelect?: ((selectedTabIndex: number) => any) | undefined;
    "onCreate-new-view"?: ((value: string) => any) | undefined;
}, {}, {}>;

declare const __VLS_component_68: DefineComponent<__VLS_WithDefaults_54<__VLS_TypePropsToRuntimeProps_104<TagProps>, {
    disabled: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    click: () => void;
    remove: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_54<__VLS_TypePropsToRuntimeProps_104<TagProps>, {
    disabled: boolean;
}>>> & {
    onClick?: (() => any) | undefined;
    onRemove?: (() => any) | undefined;
}, {
    disabled: boolean;
}, {}>;

declare const __VLS_component_69: DefineComponent<__VLS_WithDefaults_55<__VLS_TypePropsToRuntimeProps_105<TextProps>, {
    numeric: boolean;
    truncate: boolean;
    visuallyHidden: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_55<__VLS_TypePropsToRuntimeProps_105<TextProps>, {
    numeric: boolean;
    truncate: boolean;
    visuallyHidden: boolean;
}>>>, {
    truncate: boolean;
    numeric: boolean;
    visuallyHidden: boolean;
}, {}>;

declare const __VLS_component_7: DefineComponent<__VLS_WithDefaults_5<__VLS_TypePropsToRuntimeProps_10<BannerProps>, {
    tone: string;
}>, {
    focus: () => void;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_5<__VLS_TypePropsToRuntimeProps_10<BannerProps>, {
    tone: string;
}>>>, {
    tone: BannerTone;
}, {}>;

declare const __VLS_component_70: DefineComponent<__VLS_TypePropsToRuntimeProps_106<TextContainerProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_106<TextContainerProps>>>, {}, {}>;

declare const __VLS_component_71: DefineComponent<    {
    modelValue: PropType<string>;
    size: {
        type: PropType<"slim" | "medium">;
        default: string;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    value: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    pattern: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    variant: {
        type: PropType<"inherit" | "borderless">;
        default: string;
    };
    role: {
        type: PropType<string>;
    };
    type: {
        type: PropType<"number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency">;
        default: string;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    verticalContent: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    clearButton: {
        type: PropType<boolean>;
    };
    selectTextOnFocus: {
        type: PropType<boolean>;
    };
    suggestion: {
        type: PropType<string>;
    };
    readOnly: {
        type: PropType<boolean>;
    };
    autoFocus: {
        type: PropType<boolean>;
    };
    focused: {
        type: PropType<boolean>;
    };
    multiline: {
        type: PropType<number | boolean>;
    };
    name: {
        type: PropType<string>;
    };
    step: {
        type: PropType<number>;
    };
    largeStep: {
        type: PropType<number>;
    };
    autoComplete: {
        type: PropType<string>;
        required: true;
    };
    max: {
        type: PropType<string | number>;
    };
    maxLength: {
        type: PropType<number>;
    };
    min: {
        type: PropType<string | number>;
    };
    minLength: {
        type: PropType<number>;
    };
    inputMode: {
        type: PropType<"search" | "text" | "url" | "none" | "email" | "tel" | "decimal" | "numeric">;
    };
    spellCheck: {
        type: PropType<boolean>;
    };
    ariaOwns: {
        type: PropType<string>;
    };
    ariaExpanded: {
        type: PropType<boolean>;
    };
    ariaControls: {
        type: PropType<string>;
    };
    ariaActiveDescendant: {
        type: PropType<string>;
    };
    ariaAutocomplete: {
        type: PropType<string>;
    };
    showCharacterCount: {
        type: PropType<boolean>;
    };
    align: {
        type: PropType<"left" | "right" | "center">;
    };
    monospaced: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
    autoSize: {
        type: PropType<boolean>;
    };
    readonly: {
        type: PropType<boolean>;
    };
} | {
    modelValue: PropType<string>;
    size: {
        type: PropType<"slim" | "medium">;
        default: string;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    value: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    pattern: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    variant: {
        type: PropType<"inherit" | "borderless">;
        default: string;
    };
    role: {
        type: PropType<string>;
    };
    type: {
        type: PropType<"number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency">;
        default: string;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    verticalContent: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    clearButton: {
        type: PropType<boolean>;
    };
    selectTextOnFocus: {
        type: PropType<boolean>;
    };
    suggestion: {
        type: PropType<string>;
    };
    readOnly: {
        type: PropType<boolean>;
    };
    autoFocus: {
        type: PropType<boolean>;
    };
    focused: {
        type: PropType<boolean>;
    };
    multiline: {
        type: PropType<number | boolean>;
    };
    name: {
        type: PropType<string>;
    };
    step: {
        type: PropType<number>;
    };
    largeStep: {
        type: PropType<number>;
    };
    autoComplete: {
        type: PropType<string>;
        required: true;
    };
    max: {
        type: PropType<string | number>;
    };
    maxLength: {
        type: PropType<number>;
    };
    min: {
        type: PropType<string | number>;
    };
    minLength: {
        type: PropType<number>;
    };
    inputMode: {
        type: PropType<"search" | "text" | "url" | "none" | "email" | "tel" | "decimal" | "numeric">;
    };
    spellCheck: {
        type: PropType<boolean>;
    };
    ariaOwns: {
        type: PropType<string>;
    };
    ariaExpanded: {
        type: PropType<boolean>;
    };
    ariaControls: {
        type: PropType<string>;
    };
    ariaActiveDescendant: {
        type: PropType<string>;
    };
    ariaAutocomplete: {
        type: PropType<string>;
    };
    showCharacterCount: {
        type: PropType<boolean>;
    };
    align: {
        type: PropType<"left" | "right" | "center">;
    };
    monospaced: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
    autoSize: {
        type: PropType<boolean>;
    };
    readonly: {
        type: PropType<boolean>;
    };
} | {
    modelValue: PropType<string>;
    size: {
        type: PropType<"slim" | "medium">;
        default: string;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    value: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    pattern: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    variant: {
        type: PropType<"inherit" | "borderless">;
        default: string;
    };
    role: {
        type: PropType<string>;
    };
    type: {
        type: PropType<"number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency">;
        default: string;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    verticalContent: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    clearButton: {
        type: PropType<boolean>;
    };
    selectTextOnFocus: {
        type: PropType<boolean>;
    };
    suggestion: {
        type: PropType<string>;
    };
    readOnly: {
        type: PropType<boolean>;
    };
    autoFocus: {
        type: PropType<boolean>;
    };
    focused: {
        type: PropType<boolean>;
    };
    multiline: {
        type: PropType<number | boolean>;
    };
    name: {
        type: PropType<string>;
    };
    step: {
        type: PropType<number>;
    };
    largeStep: {
        type: PropType<number>;
    };
    autoComplete: {
        type: PropType<string>;
        required: true;
    };
    max: {
        type: PropType<string | number>;
    };
    maxLength: {
        type: PropType<number>;
    };
    min: {
        type: PropType<string | number>;
    };
    minLength: {
        type: PropType<number>;
    };
    inputMode: {
        type: PropType<"search" | "text" | "url" | "none" | "email" | "tel" | "decimal" | "numeric">;
    };
    spellCheck: {
        type: PropType<boolean>;
    };
    ariaOwns: {
        type: PropType<string>;
    };
    ariaExpanded: {
        type: PropType<boolean>;
    };
    ariaControls: {
        type: PropType<string>;
    };
    ariaActiveDescendant: {
        type: PropType<string>;
    };
    ariaAutocomplete: {
        type: PropType<string>;
    };
    showCharacterCount: {
        type: PropType<boolean>;
    };
    align: {
        type: PropType<"left" | "right" | "center">;
    };
    monospaced: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
    autoSize: {
        type: PropType<boolean>;
    };
} | {
    modelValue: PropType<string>;
    size: {
        type: PropType<"slim" | "medium">;
        default: string;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    value: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    pattern: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    variant: {
        type: PropType<"inherit" | "borderless">;
        default: string;
    };
    role: {
        type: PropType<string>;
    };
    type: {
        type: PropType<"number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency">;
        default: string;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    verticalContent: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    clearButton: {
        type: PropType<boolean>;
    };
    selectTextOnFocus: {
        type: PropType<boolean>;
    };
    suggestion: {
        type: PropType<string>;
    };
    readOnly: {
        type: PropType<boolean>;
    };
    autoFocus: {
        type: PropType<boolean>;
    };
    focused: {
        type: PropType<boolean>;
    };
    multiline: {
        type: PropType<number | boolean>;
    };
    name: {
        type: PropType<string>;
    };
    step: {
        type: PropType<number>;
    };
    largeStep: {
        type: PropType<number>;
    };
    autoComplete: {
        type: PropType<string>;
        required: true;
    };
    max: {
        type: PropType<string | number>;
    };
    maxLength: {
        type: PropType<number>;
    };
    min: {
        type: PropType<string | number>;
    };
    minLength: {
        type: PropType<number>;
    };
    inputMode: {
        type: PropType<"search" | "text" | "url" | "none" | "email" | "tel" | "decimal" | "numeric">;
    };
    spellCheck: {
        type: PropType<boolean>;
    };
    ariaOwns: {
        type: PropType<string>;
    };
    ariaExpanded: {
        type: PropType<boolean>;
    };
    ariaControls: {
        type: PropType<string>;
    };
    ariaActiveDescendant: {
        type: PropType<string>;
    };
    ariaAutocomplete: {
        type: PropType<string>;
    };
    showCharacterCount: {
        type: PropType<boolean>;
    };
    align: {
        type: PropType<"left" | "right" | "center">;
    };
    monospaced: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
    autoSize: {
        type: PropType<boolean>;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    change: (value: string, id: string) => void;
    input: (e: InputEvent, value: string) => void;
    blur: (event: FocusEvent) => void;
    focus: (event: FocusEvent) => void;
    "clear-button-click": (id: string) => void;
    "spinner-change": (value: string, id: string) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<    {
    modelValue: PropType<string>;
    size: {
        type: PropType<"slim" | "medium">;
        default: string;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    value: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    pattern: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    variant: {
        type: PropType<"inherit" | "borderless">;
        default: string;
    };
    role: {
        type: PropType<string>;
    };
    type: {
        type: PropType<"number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency">;
        default: string;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    verticalContent: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    clearButton: {
        type: PropType<boolean>;
    };
    selectTextOnFocus: {
        type: PropType<boolean>;
    };
    suggestion: {
        type: PropType<string>;
    };
    readOnly: {
        type: PropType<boolean>;
    };
    autoFocus: {
        type: PropType<boolean>;
    };
    focused: {
        type: PropType<boolean>;
    };
    multiline: {
        type: PropType<number | boolean>;
    };
    name: {
        type: PropType<string>;
    };
    step: {
        type: PropType<number>;
    };
    largeStep: {
        type: PropType<number>;
    };
    autoComplete: {
        type: PropType<string>;
        required: true;
    };
    max: {
        type: PropType<string | number>;
    };
    maxLength: {
        type: PropType<number>;
    };
    min: {
        type: PropType<string | number>;
    };
    minLength: {
        type: PropType<number>;
    };
    inputMode: {
        type: PropType<"search" | "text" | "url" | "none" | "email" | "tel" | "decimal" | "numeric">;
    };
    spellCheck: {
        type: PropType<boolean>;
    };
    ariaOwns: {
        type: PropType<string>;
    };
    ariaExpanded: {
        type: PropType<boolean>;
    };
    ariaControls: {
        type: PropType<string>;
    };
    ariaActiveDescendant: {
        type: PropType<string>;
    };
    ariaAutocomplete: {
        type: PropType<string>;
    };
    showCharacterCount: {
        type: PropType<boolean>;
    };
    align: {
        type: PropType<"left" | "right" | "center">;
    };
    monospaced: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
    autoSize: {
        type: PropType<boolean>;
    };
    readonly: {
        type: PropType<boolean>;
    };
}> | ExtractPropTypes<    {
    modelValue: PropType<string>;
    size: {
        type: PropType<"slim" | "medium">;
        default: string;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    value: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    pattern: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    variant: {
        type: PropType<"inherit" | "borderless">;
        default: string;
    };
    role: {
        type: PropType<string>;
    };
    type: {
        type: PropType<"number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency">;
        default: string;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    verticalContent: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    clearButton: {
        type: PropType<boolean>;
    };
    selectTextOnFocus: {
        type: PropType<boolean>;
    };
    suggestion: {
        type: PropType<string>;
    };
    readOnly: {
        type: PropType<boolean>;
    };
    autoFocus: {
        type: PropType<boolean>;
    };
    focused: {
        type: PropType<boolean>;
    };
    multiline: {
        type: PropType<number | boolean>;
    };
    name: {
        type: PropType<string>;
    };
    step: {
        type: PropType<number>;
    };
    largeStep: {
        type: PropType<number>;
    };
    autoComplete: {
        type: PropType<string>;
        required: true;
    };
    max: {
        type: PropType<string | number>;
    };
    maxLength: {
        type: PropType<number>;
    };
    min: {
        type: PropType<string | number>;
    };
    minLength: {
        type: PropType<number>;
    };
    inputMode: {
        type: PropType<"search" | "text" | "url" | "none" | "email" | "tel" | "decimal" | "numeric">;
    };
    spellCheck: {
        type: PropType<boolean>;
    };
    ariaOwns: {
        type: PropType<string>;
    };
    ariaExpanded: {
        type: PropType<boolean>;
    };
    ariaControls: {
        type: PropType<string>;
    };
    ariaActiveDescendant: {
        type: PropType<string>;
    };
    ariaAutocomplete: {
        type: PropType<string>;
    };
    showCharacterCount: {
        type: PropType<boolean>;
    };
    align: {
        type: PropType<"left" | "right" | "center">;
    };
    monospaced: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
    autoSize: {
        type: PropType<boolean>;
    };
    readonly: {
        type: PropType<boolean>;
    };
}> | ExtractPropTypes<    {
    modelValue: PropType<string>;
    size: {
        type: PropType<"slim" | "medium">;
        default: string;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    value: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    pattern: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    variant: {
        type: PropType<"inherit" | "borderless">;
        default: string;
    };
    role: {
        type: PropType<string>;
    };
    type: {
        type: PropType<"number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency">;
        default: string;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    verticalContent: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    clearButton: {
        type: PropType<boolean>;
    };
    selectTextOnFocus: {
        type: PropType<boolean>;
    };
    suggestion: {
        type: PropType<string>;
    };
    readOnly: {
        type: PropType<boolean>;
    };
    autoFocus: {
        type: PropType<boolean>;
    };
    focused: {
        type: PropType<boolean>;
    };
    multiline: {
        type: PropType<number | boolean>;
    };
    name: {
        type: PropType<string>;
    };
    step: {
        type: PropType<number>;
    };
    largeStep: {
        type: PropType<number>;
    };
    autoComplete: {
        type: PropType<string>;
        required: true;
    };
    max: {
        type: PropType<string | number>;
    };
    maxLength: {
        type: PropType<number>;
    };
    min: {
        type: PropType<string | number>;
    };
    minLength: {
        type: PropType<number>;
    };
    inputMode: {
        type: PropType<"search" | "text" | "url" | "none" | "email" | "tel" | "decimal" | "numeric">;
    };
    spellCheck: {
        type: PropType<boolean>;
    };
    ariaOwns: {
        type: PropType<string>;
    };
    ariaExpanded: {
        type: PropType<boolean>;
    };
    ariaControls: {
        type: PropType<string>;
    };
    ariaActiveDescendant: {
        type: PropType<string>;
    };
    ariaAutocomplete: {
        type: PropType<string>;
    };
    showCharacterCount: {
        type: PropType<boolean>;
    };
    align: {
        type: PropType<"left" | "right" | "center">;
    };
    monospaced: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
    autoSize: {
        type: PropType<boolean>;
    };
}> | ExtractPropTypes<    {
    modelValue: PropType<string>;
    size: {
        type: PropType<"slim" | "medium">;
        default: string;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    value: {
        type: PropType<string>;
    };
    label: {
        type: PropType<string>;
    };
    pattern: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    id: {
        type: PropType<string>;
    };
    prefix: {
        type: PropType<string>;
    };
    suffix: {
        type: PropType<string>;
    };
    helpText: {
        type: PropType<string>;
    };
    variant: {
        type: PropType<"inherit" | "borderless">;
        default: string;
    };
    role: {
        type: PropType<string>;
    };
    type: {
        type: PropType<"number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency">;
        default: string;
    };
    error: {
        type: PropType<boolean | Error_2>;
    };
    requiredIndicator: {
        type: PropType<boolean>;
    };
    verticalContent: {
        type: PropType<string>;
    };
    placeholder: {
        type: PropType<string>;
    };
    labelAction: {
        type: PropType<Action>;
    };
    labelHidden: {
        type: PropType<boolean>;
    };
    clearButton: {
        type: PropType<boolean>;
    };
    selectTextOnFocus: {
        type: PropType<boolean>;
    };
    suggestion: {
        type: PropType<string>;
    };
    readOnly: {
        type: PropType<boolean>;
    };
    autoFocus: {
        type: PropType<boolean>;
    };
    focused: {
        type: PropType<boolean>;
    };
    multiline: {
        type: PropType<number | boolean>;
    };
    name: {
        type: PropType<string>;
    };
    step: {
        type: PropType<number>;
    };
    largeStep: {
        type: PropType<number>;
    };
    autoComplete: {
        type: PropType<string>;
        required: true;
    };
    max: {
        type: PropType<string | number>;
    };
    maxLength: {
        type: PropType<number>;
    };
    min: {
        type: PropType<string | number>;
    };
    minLength: {
        type: PropType<number>;
    };
    inputMode: {
        type: PropType<"search" | "text" | "url" | "none" | "email" | "tel" | "decimal" | "numeric">;
    };
    spellCheck: {
        type: PropType<boolean>;
    };
    ariaOwns: {
        type: PropType<string>;
    };
    ariaExpanded: {
        type: PropType<boolean>;
    };
    ariaControls: {
        type: PropType<string>;
    };
    ariaActiveDescendant: {
        type: PropType<string>;
    };
    ariaAutocomplete: {
        type: PropType<string>;
    };
    showCharacterCount: {
        type: PropType<boolean>;
    };
    align: {
        type: PropType<"left" | "right" | "center">;
    };
    monospaced: {
        type: PropType<boolean>;
    };
    tone: {
        type: PropType<"magic">;
    };
    autoSize: {
        type: PropType<boolean>;
    };
}>> & {
    onChange?: ((value: string, id: string) => any) | undefined;
    onInput?: ((e: InputEvent, value: string) => any) | undefined;
    onBlur?: ((event: FocusEvent) => any) | undefined;
    onFocus?: ((event: FocusEvent) => any) | undefined;
    "onClear-button-click"?: ((id: string) => any) | undefined;
    "onSpinner-change"?: ((value: string, id: string) => any) | undefined;
}, {
    size: "slim" | "medium";
    variant: "inherit" | "borderless";
    type: "number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency";
} | {
    size: "slim" | "medium";
    variant: "inherit" | "borderless";
    type: "number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency";
} | {
    size: "slim" | "medium";
    variant: "inherit" | "borderless";
    type: "number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency";
} | {
    size: "slim" | "medium";
    variant: "inherit" | "borderless";
    type: "number" | "search" | "time" | "text" | "url" | "email" | "integer" | "password" | "tel" | "date" | "datetime-local" | "month" | "week" | "currency";
}, {}>;

declare const __VLS_component_72: DefineComponent<__VLS_WithDefaults_56<__VLS_TypePropsToRuntimeProps_107<ThemeProviderProps>, {
    as: string;
    theme: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_56<__VLS_TypePropsToRuntimeProps_107<ThemeProviderProps>, {
    as: string;
    theme: string;
}>>>, {
    theme: ThemeNameLocal;
    as: string;
}, {}>;

declare const __VLS_component_73: DefineComponent<__VLS_WithDefaults_58<__VLS_TypePropsToRuntimeProps_109<TooltipProps>, {
    preferredPosition: string;
    activatorWrapper: string;
    width: string;
    padding: string;
    active: undefined;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    close: () => void;
    open: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_58<__VLS_TypePropsToRuntimeProps_109<TooltipProps>, {
    preferredPosition: string;
    activatorWrapper: string;
    width: string;
    padding: string;
    active: undefined;
}>>> & {
    onClose?: (() => any) | undefined;
    onOpen?: (() => any) | undefined;
}, {
    width: Width;
    padding: Padding;
    active: boolean;
    preferredPosition: PreferredPosition;
    activatorWrapper: string;
}, {}>;

declare const __VLS_component_74: DefineComponent<    {}, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<    {}>>, {}, {}>;

declare const __VLS_component_8: DefineComponent<__VLS_WithDefaults_6<__VLS_TypePropsToRuntimeProps_11<BannerProps>, {
    tone: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    dismiss: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_6<__VLS_TypePropsToRuntimeProps_11<BannerProps>, {
    tone: string;
}>>> & {
    onDismiss?: (() => any) | undefined;
}, {
    tone: BannerTone;
}, {}>;

declare const __VLS_component_9: DefineComponent<__VLS_TypePropsToRuntimeProps_12<BannerLayoutProps & {
    bannerIcon?: VueNode;
    bannerTitle?: VueNode;
    actionButtons?: VueNode;
    dismissButton?: VueNode;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_12<BannerLayoutProps & {
    bannerIcon?: VueNode;
    bannerTitle?: VueNode;
    actionButtons?: VueNode;
    dismissButton?: VueNode;
}>>>, {}, {}>;

declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_10<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_100<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_101<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_102<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_103<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_104<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_105<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_106<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_107<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_108<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_109<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_11<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_110<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_111<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_112<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_113<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_114<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_12<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_13<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_14<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_15<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_16<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_17<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_18<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_19<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_2<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_20<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_21<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_22<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_23<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_24<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_25<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_26<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_27<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_28<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_29<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_3<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_30<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_31<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_32<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_33<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_34<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_35<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_36<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_37<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_38<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_39<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_4<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_40<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_41<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_42<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_43<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_44<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_45<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_46<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_47<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_48<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_49<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_5<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_50<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_51<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_52<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_53<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_54<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_55<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_56<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_57<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_58<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_59<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_6<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_60<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_61<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_62<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_63<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_64<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_65<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_66<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_67<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_68<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_69<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_7<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_70<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_71<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_72<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_73<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_74<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_75<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_76<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_77<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_78<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_79<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_8<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_80<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_81<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_82<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_83<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_84<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_85<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_86<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_87<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_88<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_89<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_9<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_90<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_91<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_92<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_93<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_94<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_95<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_96<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_97<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_98<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_99<T> = T extends undefined ? never : T;

declare type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_10<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_11<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_12<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_13<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_14<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_15<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_16<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_17<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_18<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_19<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_2<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_20<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_21<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_22<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_23<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_24<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_25<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_26<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_27<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_28<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_29<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_3<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_30<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_31<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_32<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_33<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_34<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_35<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_36<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_37<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_38<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_39<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_4<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_40<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_41<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_42<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_43<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_44<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_45<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_46<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_47<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_48<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_49<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_5<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_50<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_51<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_52<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_53<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_54<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_55<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_56<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_57<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_58<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_59<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_6<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_60<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_61<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_62<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_7<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_8<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_9<T> = {
    [K in keyof T]: T[K];
} & {};

declare function __VLS_template(): Readonly<AccountConnectionSlots> & AccountConnectionSlots;

declare function __VLS_template_10(): Readonly<BannerLayoutSlots> & BannerLayoutSlots;

declare function __VLS_template_11(): Readonly<BannerWithinContentContainerSlots> & BannerWithinContentContainerSlots;

declare function __VLS_template_12(): Readonly<BleedSlots> & BleedSlots;

declare function __VLS_template_13(): Readonly<BlockStackSlots> & BlockStackSlots;

declare function __VLS_template_14(): Readonly<BoxSlots> & BoxSlots;

declare function __VLS_template_15(): Readonly<{
    /** The content to display inside the button */
    default: (_: VueNode) => any;
    /** Icon to display to the left of the button content */
    icon?: (_: VueNode) => any;
}> & {
    /** The content to display inside the button */
    default: (_: VueNode) => any;
    /** Icon to display to the left of the button content */
    icon?: (_: VueNode) => any;
};

declare function __VLS_template_16(): Readonly<{
    /** Button components */
    default: (_?: VueNode) => any;
}> & {
    /** Button components */
    default: (_?: VueNode) => any;
};

declare function __VLS_template_17(): Readonly<{
    /** The content to display inside the button */
    default: (_: VueNode) => any;
    /** The title of the card */
    title: (_: VueNode) => any;
}> & {
    /** The content to display inside the button */
    default: (_: VueNode) => any;
    /** The title of the card */
    title: (_: VueNode) => any;
};

declare function __VLS_template_18(): Readonly<CardSlots> & CardSlots;

declare function __VLS_template_19(): Readonly<CheckboxSlots> & CheckboxSlots;

declare function __VLS_template_2(): Readonly<{
    default?: (_?: VueNode) => VNode[];
    /** Additional hint text to display with item */
    helpText?: (_?: VueNode) => VNode[];
}> & {
    default?: (_?: VueNode) => VNode[];
    /** Additional hint text to display with item */
    helpText?: (_?: VueNode) => VNode[];
};

declare function __VLS_template_20(): Readonly<ChoiceSlots> & ChoiceSlots;

declare function __VLS_template_21(): Readonly<ChoiceListSlots> & ChoiceListSlots;

declare function __VLS_template_22(): Readonly<{
    /** Elements to display inside the collapsible */
    default: (_?: VueNode) => any;
}> & {
    /** Elements to display inside the collapsible */
    default: (_?: VueNode) => any;
};

declare function __VLS_template_23(): Readonly<ComboboxSlots> & ComboboxSlots;

declare function __VLS_template_24(): Readonly<DropZoneSlots> & DropZoneSlots;

declare function __VLS_template_25(): Readonly<{
    /** Elements to display inside empty state */
    default: (_: VueNode) => any;
    /** Secondary elements to display below empty state actions */
    footerContent: (_: VueNode) => any;
}> & {
    /** Elements to display inside empty state */
    default: (_: VueNode) => any;
    /** Secondary elements to display below empty state actions */
    footerContent: (_: VueNode) => any;
};

declare function __VLS_template_26(): Readonly<{
    /** The content to display inside the link */
    default: (_: VueNode) => null;
}> & {
    /** The content to display inside the link */
    default: (_: VueNode) => null;
};

declare function __VLS_template_27(): Readonly<{
    /** The content to display inline with the controls. */
    default?: (_?: VueNode) => VNode[];
}> & {
    /** The content to display inline with the controls. */
    default?: (_?: VueNode) => VNode[];
};

declare function __VLS_template_28(): Readonly<{
    /** The content to display inside the layout. */
    default?: (_?: VueNode) => VNode[];
}> & {
    /** The content to display inside the layout. */
    default?: (_?: VueNode) => VNode[];
};

declare function __VLS_template_29(): Readonly<FormSlots> & FormSlots;

declare function __VLS_template_3(): Readonly<AppProviderSlots> & AppProviderSlots;

declare function __VLS_template_30(): Readonly<FormLayoutSlots> & FormLayoutSlots;

declare function __VLS_template_31(): Readonly<{
    /** Render child elements */
    default?: (_?: VueNode) => VNode[];
}> & {
    /** Render child elements */
    default?: (_?: VueNode) => VNode[];
};

declare function __VLS_template_32(): Readonly<GridSlots> & GridSlots;

declare function __VLS_template_33(): Readonly<IndexTableSlots> & IndexTableSlots;

declare function __VLS_template_34(): Readonly<RowSlots> & RowSlots;

declare function __VLS_template_35(): Readonly<CellSlots> & CellSlots;

declare function __VLS_template_36(): Readonly<InlineGridSlots> & InlineGridSlots;

declare function __VLS_template_37(): Readonly<InlineStackSlots> & InlineStackSlots;

declare function __VLS_template_38(): Readonly<{
    /** KeyboardKey content */
    default: (_: VueNode) => any;
}> & {
    /** KeyboardKey content */
    default: (_: VueNode) => any;
};

declare function __VLS_template_39(): Readonly<{
    /** Label content */
    default: (_: VueNode) => any;
}> & {
    /** Label content */
    default: (_: VueNode) => any;
};

declare function __VLS_template_4(): Readonly<AutocompleteSlots> & AutocompleteSlots;

declare function __VLS_template_40(): Readonly<{
    /** Text for the label */
    label: (_?: VueNode) => any;
    /** Label content */
    default: (_?: VueNode) => any;
    /** Hint text to display */
    helpText: (_?: VueNode) => any;
}> & {
    /** Text for the label */
    label: (_?: VueNode) => any;
    /** Label content */
    default: (_?: VueNode) => any;
    /** Hint text to display */
    helpText: (_?: VueNode) => any;
};

declare function __VLS_template_41(): Readonly<{
    /** The content to display inside the layout. */
    default: (_: VueNode) => any;
}> & {
    /** The content to display inside the layout. */
    default: (_: VueNode) => any;
};

declare function __VLS_template_42(): Readonly<{
    default: (_: VueNode) => any;
    title?: (_: VueNode) => any;
    description?: (_: VueNode) => any;
}> & {
    default: (_: VueNode) => any;
    title?: (_: VueNode) => any;
    description?: (_: VueNode) => any;
};

declare function __VLS_template_43(): Readonly<{
    default: (_?: VueNode) => any;
}> & {
    default: (_?: VueNode) => any;
};

declare function __VLS_template_44(): Readonly<{
    /** Elements to display inside stack */
    default: (_?: VueNode) => any;
}> & {
    /** Elements to display inside stack */
    default: (_?: VueNode) => any;
};

declare function __VLS_template_45(): Readonly<{
    /** The content to display inside the layout. */
    default: (_: VueNode) => any;
}> & {
    /** The content to display inside the layout. */
    default: (_: VueNode) => any;
};

declare function __VLS_template_46(): Readonly<{
    /** Content to display inside the link */
    default: (_: VueNode) => null;
}> & {
    /** Content to display inside the link */
    default: (_: VueNode) => null;
};

declare function __VLS_template_47(): Readonly<ListSlots> & ListSlots;

declare function __VLS_template_48(): Readonly<{
    /** Inner content of the listbox */
    default?: (_?: VueNode) => VNode[];
}> & {
    /** Inner content of the listbox */
    default?: (_?: VueNode) => VNode[];
};

declare function __VLS_template_49(): Readonly<{
    default?: (_?: VueNode) => VNode[];
}> & {
    default?: (_?: VueNode) => VNode[];
};

declare function __VLS_template_5(): Readonly<TextFieldSlots> & TextFieldSlots;

declare function __VLS_template_50(): Readonly<SectionSlots> & SectionSlots;

declare function __VLS_template_51(): Readonly<{
    /** The visual media to display in the card */
    default: (_: VueNode) => any;
    /** Heading content */
    title: (_: VueNode) => any;
}> & {
    /** The visual media to display in the card */
    default: (_: VueNode) => any;
    /** Heading content */
    title: (_: VueNode) => any;
};

declare function __VLS_template_52(): Readonly<ModalSlots> & ModalSlots;

declare function __VLS_template_53(): Readonly<{
    [key: string]: (_?: VueNode) => VNode[];
}> & {
    [key: string]: (_?: VueNode) => VNode[];
};

declare function __VLS_template_54(): Readonly<PageSlots> & PageSlots;

declare function __VLS_template_55(): Readonly<PageActionsSlots> & PageActionsSlots;

declare function __VLS_template_56(): Readonly<PaginationSlots> & PaginationSlots;

declare function __VLS_template_57(): Readonly<{
    /** The content to display inside the popover */
    default?: (_?: VueNode) => any;
    /** The content to display as the activator */
    activator?: (_?: VueNode) => any;
}> & {
    /** The content to display inside the popover */
    default?: (_?: VueNode) => any;
    /** The content to display as the activator */
    activator?: (_?: VueNode) => any;
};

declare function __VLS_template_58(): Readonly<PaneSlots> & PaneSlots;

declare function __VLS_template_59(): Readonly<PositionedOverlaySlots> & PositionedOverlaySlots;

declare function __VLS_template_6(): Readonly<{
    /** The content to display inside the badge. */
    default: (_: VueNode) => any;
}> & {
    /** The content to display inside the badge. */
    default: (_: VueNode) => any;
};

declare function __VLS_template_60(): Readonly<RadioButtonSlots> & RadioButtonSlots;

declare function __VLS_template_61(): Readonly<RangeSliderSlots> & RangeSliderSlots;

declare function __VLS_template_62(): Readonly<ResourceListSlots> & ResourceListSlots;

declare function __VLS_template_63(): Readonly<ScrollableSlot> & ScrollableSlot;

declare function __VLS_template_64(): Readonly<SelectSlots> & SelectSlots;

declare function __VLS_template_65(): Readonly<{
    /** The child elements to render in the skeleton page. */
    default: (_?: VueNode) => any;
}> & {
    /** The child elements to render in the skeleton page. */
    default: (_?: VueNode) => any;
};

declare function __VLS_template_66(): Readonly<{
    default?: (_?: VueNode) => VNode[];
}> & {
    default?: (_?: VueNode) => VNode[];
};

declare function __VLS_template_67(): Readonly<{
    /** Content to display in tabs */
    default?: (_?: VueNode) => any[];
}> & {
    /** Content to display in tabs */
    default?: (_?: VueNode) => any[];
};

declare function __VLS_template_68(): Readonly<{
    /** Elements to display inside the tag*/
    default: (_?: VueNode) => any;
}> & {
    /** Elements to display inside the tag*/
    default: (_?: VueNode) => any;
};

declare function __VLS_template_69(): Readonly<TextSlots> & TextSlots;

declare function __VLS_template_7(): Readonly<{
    /** The content to display inside the button */
    default: (_: VueNode) => any;
}> & {
    /** The content to display inside the button */
    default: (_: VueNode) => any;
};

declare function __VLS_template_70(): Readonly<{
    /** The content to render in the text container. */
    default: (_?: VueNode) => any;
}> & {
    /** The content to render in the text container. */
    default: (_?: VueNode) => any;
};

declare function __VLS_template_71(): Readonly<TextFieldSlots> & TextFieldSlots;

declare function __VLS_template_72(): Readonly<ThemeProviderSlots> & ThemeProviderSlots;

declare function __VLS_template_73(): Readonly<{
    /** The element to activate the tooltip */
    default: (_?: VueNode) => any;
    /** Content to display within the tooltip */
    content?: (_?: VueNode) => any;
}> & {
    /** The element to activate the tooltip */
    default: (_?: VueNode) => any;
    /** Content to display within the tooltip */
    content?: (_?: VueNode) => any;
};

declare function __VLS_template_74(): Readonly<{
    /** The content to display inside the link */
    default: (_: VueNode) => null;
}> & {
    /** The content to display inside the link */
    default: (_: VueNode) => null;
};

declare function __VLS_template_8(): Readonly<{
    /** The content to display inside the button */
    default: (_: VueNode) => any;
}> & {
    /** The content to display inside the button */
    default: (_: VueNode) => any;
};

declare function __VLS_template_9(): Readonly<DefaultBannerSlots> & DefaultBannerSlots;

declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_10<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_10<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_100<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_100<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_101<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_101<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_102<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_102<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_103<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_103<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_104<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_104<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_105<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_105<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_106<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_106<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_107<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_107<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_108<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_108<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_109<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_109<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_11<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_11<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_110<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_110<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_111<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_111<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_112<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_112<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_113<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_113<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_114<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_114<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_12<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_12<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_13<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_13<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_14<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_14<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_15<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_15<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_16<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_16<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_17<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_17<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_18<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_18<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_19<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_19<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_2<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_2<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_20<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_20<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_21<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_21<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_22<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_22<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_23<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_23<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_24<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_24<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_25<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_25<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_26<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_26<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_27<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_27<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_28<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_28<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_29<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_29<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_3<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_3<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_30<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_30<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_31<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_31<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_32<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_32<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_33<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_33<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_34<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_34<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_35<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_35<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_36<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_36<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_37<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_37<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_38<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_38<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_39<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_39<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_4<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_4<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_40<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_40<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_41<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_41<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_42<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_42<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_43<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_43<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_44<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_44<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_45<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_45<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_46<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_46<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_47<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_47<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_48<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_48<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_49<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_49<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_5<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_5<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_50<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_50<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_51<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_51<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_52<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_52<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_53<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_53<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_54<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_54<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_55<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_55<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_56<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_56<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_57<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_57<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_58<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_58<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_59<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_59<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_6<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_6<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_60<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_60<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_61<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_61<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_62<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_62<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_63<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_63<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_64<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_64<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_65<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_65<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_66<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_66<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_67<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_67<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_68<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_68<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_69<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_69<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_7<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_7<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_70<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_70<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_71<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_71<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_72<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_72<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_73<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_73<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_74<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_74<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_75<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_75<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_76<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_76<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_77<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_77<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_78<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_78<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_79<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_79<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_8<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_8<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_80<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_80<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_81<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_81<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_82<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_82<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_83<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_83<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_84<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_84<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_85<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_85<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_86<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_86<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_87<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_87<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_88<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_88<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_89<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_89<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_9<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_9<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_90<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_90<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_91<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_91<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_92<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_92<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_93<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_93<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_94<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_94<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_95<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_95<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_96<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_96<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_97<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_97<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_98<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_98<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_99<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_99<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_10<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_10<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_11<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_11<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_12<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_12<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_13<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_13<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_14<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_14<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_15<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_15<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_16<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_16<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_17<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_17<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_18<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_18<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_19<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_19<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_2<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_2<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_20<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_20<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_21<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_21<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_22<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_22<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_23<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_23<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_24<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_24<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_25<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_25<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_26<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_26<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_27<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_27<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_28<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_28<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_29<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_29<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_3<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_3<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_30<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_30<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_31<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_31<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_32<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_32<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_33<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_33<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_34<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_34<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_35<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_35<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_36<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_36<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_37<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_37<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_38<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_38<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_39<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_39<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_4<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_4<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_40<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_40<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_41<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_41<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_42<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_42<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_43<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_43<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_44<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_44<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_45<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_45<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_46<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_46<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_47<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_47<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_48<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_48<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_49<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_49<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_5<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_5<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_50<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_50<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_51<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_51<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_52<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_52<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_53<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_53<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_54<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_54<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_55<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_55<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_56<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_56<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_57<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_57<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_58<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_58<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_59<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_59<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_6<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_6<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_60<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_60<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_61<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_61<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_62<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_62<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_7<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_7<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_8<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_8<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_9<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_9<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_10<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_11<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_12<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_13<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_14<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_15<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_16<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_17<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_18<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_19<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_2<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_20<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_21<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_22<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_23<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_24<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_25<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_26<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_27<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_28<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_29<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_3<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_30<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_31<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_32<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_33<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_34<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_35<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_36<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_37<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_38<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_39<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_4<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_40<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_41<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_42<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_43<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_44<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_45<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_46<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_47<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_48<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_49<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_5<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_50<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_51<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_52<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_53<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_54<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_55<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_56<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_57<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_58<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_59<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_6<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_60<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_61<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_62<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_63<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_64<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_65<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_66<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_67<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_68<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_69<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_7<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_70<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_71<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_72<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_73<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_74<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_75<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_8<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_9<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare interface AccessibilityLabels {
    previous: string;
    next: string;
}

export declare const AccountConnection: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;

declare interface AccountConnectionProps {
    /** The name of the service */
    accountName?: string;
    /** URL for the user’s avatar image */
    avatarUrl?: string;
    /** Set if the account is connected */
    connected?: boolean;
    /** Action for account connection */
    action?: Action;
}

declare type AccountConnectionSlots = {
    /** Content to display as title */
    title: (_: VueNode) => any;
    /** Content to display as additional details */
    details: (_: VueNode) => any;
    /** Content to display as terms of service */
    'term-of-service': (_: VueNode) => any;
};

declare interface Action {
    /** A unique identifier for the action */
    id?: string;
    /** Content the action displays */
    content?: string;
    /** Visually hidden text for screen readers */
    accessibilityLabel?: string;
    /** A destination to link to, rendered in the action */
    url?: string;
    /** Forces url to open in a new tab */
    external?: boolean;
    /** Where to display the url */
    target?: Target;
    /** Callback when an action takes place */
    onAction?(): void;
    /** Callback when mouse enter */
    onMouseEnter?(): void;
    /** Callback when element is touched */
    onTouchStart?(): void;
}

export declare const ActionList: DefineComponent<__VLS_TypePropsToRuntimeProps_2<ActionListProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "action-any-item": () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_2<ActionListProps>>> & {
    "onAction-any-item"?: (() => any) | undefined;
}, {}, {}>;

declare interface ActionListItemDescriptor extends DisableableAction, DestructableAction {
    /** Visually hidden text for screen readers */
    accessibilityLabel?: string;
    /** @deprecated Badge component */
    badge?: {
        tone: 'new';
        content: string;
    };
    /** Prefix source */
    prefix?: VueNode;
    /** Suffix source */
    suffix?: VueNode;
    /** Additional hint text to display with item */
    helpText?: string;
    /** @deprecated Source of the icon */
    icon?: IconSource;
    /** @deprecated Image source */
    image?: string;
    /** @deprecated Add an ellipsis suffix to action content. ellipsis appends `...` without truncating. Use truncate instead. */
    ellipsis?: boolean;
    /** Truncate the action content either at the beginning or at the end */
    truncate?: boolean;
    /** Whether the action is active or not */
    active?: boolean;
    /** The item variations */
    variant?: 'default' | 'menu' | 'indented';
    /** Defines a role for the action */
    role?: string;
}

declare interface ActionListProps {
    /** Collection of actions for list */
    items?: ActionListItemDescriptor[];
    /** Collection of sectioned action items */
    sections?: ActionListSection_2[];
    /** Defines a specific role attribute for each action in the list */
    actionRole?: 'menuitem' | string;
    /** Allow users to filter items in the list. Will only show if more than 8 items in the list. The item content of every items must be a string for this to work */
    allowFiltering?: boolean;
    /** Filter label used as a placeholder in the search field */
    filterLabel?: string;
}

export declare const ActionListSection: DefineComponent<__VLS_TypePropsToRuntimeProps_4<SectionProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "action-any-item": () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_4<SectionProps>>> & {
    "onAction-any-item"?: (() => any) | undefined;
}, {}, {}>;

declare interface ActionListSection_2 {
    /** Section title */
    title?: string;
    /** Collection of action items for the list */
    items: ActionListItemDescriptor[];
}

declare interface ActionProps {
    value: string;
    accessibilityLabel?: string;
    selected?: boolean;
    disabled?: boolean;
    divider?: boolean;
    icon?: IconSource;
}

declare type Align = 'start' | 'center' | 'end' | 'space-around' | 'space-between' | 'space-evenly';

declare type Align_2 = 'start' | 'center' | 'end' | 'space-around' | 'space-between' | 'space-evenly';

declare type Alignment = 'leading' | 'trailing' | 'center' | 'fill' | 'baseline';

declare type Alignment_2 = 'top' | 'center' | 'bottom';

declare type Alignment_3 = 'leading' | 'trailing' | 'center' | 'fill' | 'baseline';

declare type Alignment_4 = 'start' | 'center' | 'end' | 'justify';

declare type AnnotatedSectionProps = {
    id?: string;
    title?: string;
    description?: string;
};

declare interface AppliedFilterInterface {
    /** A unique key used to identify the applied filter */
    name: string;
    /** A label for the applied filter */
    label: string;
    unsavedChanges?: boolean;
    /** Callback when the remove button is pressed */
    onRemove(key: string): void;
}

export declare const AppProvider: __VLS_WithTemplateSlots_3<typeof __VLS_component_3, ReturnType<typeof __VLS_template_3>>;

declare type AppProviderProps = {
    theme?: ThemeName;
    /** A locale object or array of locale objects that overrides default translations. If specifying an array then your primary language dictionary should come first, followed by your fallback language dictionaries */
    i18n: ConstructorParameters<typeof I18n>[0];
    /** A custom component to use for all links used by Polaris components */
    linkComponent?: LinkLikeComponent;
    /** For toggling features */
    features?: FeaturesConfig;
};

declare type AppProviderSlots = {
    /** Inner content of the application */
    default?: (_: VueNode) => any;
};

declare type Areas = {
    [Breakpoint in Breakpoints]?: string[];
};

export declare const Autocomplete: __VLS_WithTemplateSlots_4<typeof __VLS_component_4, ReturnType<typeof __VLS_template_4>>;

declare type AutocompleteProps = {
    /** A unique identifier for the Autocomplete */
    id?: string;
    /** Collection of options to be listed */
    options: SectionDescriptor[] | OptionDescriptor[];
    /** The selected options */
    selected: string[];
    /** The preferred direction to open the popover */
    preferredPosition?: PopoverProps['preferredPosition'];
    /** Title of the list of options */
    listTitle?: string;
    /** Allow more than one option to be selected */
    allowMultiple?: boolean;
    /** An action to render above the list of options */
    actionBefore?: ActionListItemDescriptor & {
        /** Specifies that if the label is too long it will wrap instead of being hidden  */
        wrapOverflow?: boolean;
    };
    /** Display loading state */
    loading?: boolean;
    /** Indicates if more results will load dynamically */
    willLoadMoreResults?: boolean;
};

declare type AutocompleteSlots = {
    /** The text field component attached to the list of options */
    textField: (_?: VueNode) => VNode[];
    /** The content to display inside the popover */
    default: (_?: VueNode) => VNode[];
    /** Is rendered when there are no options */
    emptyState: (_?: VueNode) => VNode[];
};

declare enum AutoSelection {
    /** Default active option is the first selected option. If no options are selected, defaults to first interactive option. */
    FirstSelected = "FIRST_SELECTED",
    /** Default active option is always the first interactive option. */
    First = "FIRST",
    /** Default to the manual selection pattern. */
    None = "NONE"
}

export declare const Avatar: DefineComponent<__VLS_WithDefaults_3<__VLS_TypePropsToRuntimeProps_7<AvatarProps>, {
    size: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    error: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_3<__VLS_TypePropsToRuntimeProps_7<AvatarProps>, {
    size: string;
}>>> & {
    onError?: (() => any) | undefined;
}, {
    size: Size;
}, {}>;

declare interface AvatarProps {
    /**
     * Size of avatar
     * @default 'medium'
     */
    size?: Size;
    /** The name of the person */
    name?: string;
    /** Initials of person to display */
    initials?: string;
    /** Whether the avatar is for a customer */
    customer?: boolean;
    /** URL of the avatar image which falls back to initials if the image fails to load */
    source?: string;
    /** Accessible label for the avatar image */
    accessibilityLabel?: string;
}

export declare const Backdrop: DefineComponent<__VLS_TypePropsToRuntimeProps_8<BackdropProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    click: () => void;
    "touch-start": () => void;
    closing: (value: boolean) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_8<BackdropProps>>> & {
    onClick?: (() => any) | undefined;
    "onTouch-start"?: (() => any) | undefined;
    onClosing?: ((value: boolean) => any) | undefined;
}, {}, {}>;

declare interface BackdropProps {
    belowNavigation?: boolean;
    transparent?: boolean;
}

export declare const Badge: __VLS_WithTemplateSlots_6<typeof __VLS_component_6, ReturnType<typeof __VLS_template_6>>;

declare interface BadgeAction {
    badge?: {
        tone: 'new';
        content: string;
    };
}

declare type BadgeProps = NonMutuallyExclusiveProps & ({
    progress?: Progress;
    icon?: undefined;
} | {
    icon?: IconSource;
    progress?: undefined;
});

export declare const Banner: __VLS_WithTemplateSlots_7<typeof __VLS_component_7, ReturnType<typeof __VLS_template_7>>;

export declare const BannerLayout: __VLS_WithTemplateSlots_8<typeof __VLS_component_8, ReturnType<typeof __VLS_template_8>>;

declare interface BannerLayoutProps {
    backgroundColor: BoxProps['background'];
    textColor: ColorTextAlias;
}

declare type BannerLayoutSlots = {
    default: (_: VueNode) => any;
};

declare interface BannerProps {
    /** Title content for the banner. */
    title?: string;
    /** Status icon to display in the banner. Use only major icons */
    icon?: IconSource;
    /** Renders the banner without a status icon. */
    hideIcon?: boolean;
    /** Sets the status of the banner. */
    tone?: BannerTone;
    /** Action for banner */
    action?: DisableableAction & LoadableAction;
    /** Action | Displays a secondary action */
    secondaryAction?: Action;
    /** Disables screen reader announcements when changing the content of the banner */
    stopAnnouncements?: boolean;
}

declare type BannerTone = 'success' | 'info' | 'warning' | 'critical';

declare type BannerWithinContentContainerSlots = {
    default: (_: VueNode) => any;
};

declare interface BaseButton {
    /** A unique identifier for the button */
    id?: string;
    /** A destination to link to, rendered in the href attribute of a link */
    url?: string;
    /** Forces url to open in a new tab */
    external?: boolean;
    /** Where to display the url */
    target?: Target;
    /** Tells the browser to download the url instead of opening it. Provides a hint for the downloaded filename if it is a string value */
    download?: string | boolean;
    /** Allows the button to submit a form */
    submit?: boolean;
    /** Disables the button, disallowing merchant interaction */
    disabled?: boolean;
    /** Replaces button text with a spinner while a background action is being performed */
    loading?: boolean;
    /** Sets the button in a pressed state */
    pressed?: boolean;
    /** Visually hidden text for screen readers */
    accessibilityLabel?: string;
    /** A valid WAI-ARIA role to define the semantic value of this element */
    role?: string;
    /** Id of the element the button controls */
    ariaControls?: string;
    /** Tells screen reader the controlled element is expanded */
    ariaExpanded?: boolean;
    /** Indicates the ID of the element that describes the button */
    ariaDescribedBy?: string;
    /** Indicates the current checked state of the button when acting as a toggle or switch */
    ariaChecked?: 'false' | 'true';
}

declare interface BaseCallbackAction {
    /** A unique identifier for the action */
    id?: string;
    /** Content the action displays */
    content?: string;
    /** Visually hidden text for screen readers */
    accessibilityLabel?: string;
    /** Callback when an action takes place */
    onAction(): void;
}

export declare const Bleed: __VLS_WithTemplateSlots_12<typeof __VLS_component_12, ReturnType<typeof __VLS_template_12>>;

declare interface BleedProps {
    /** Negative horizontal space around children */
    marginInline?: Spacing_2;
    /** Negative vertical space around children */
    marginBlock?: Spacing_2;
    /** Negative top space around children */
    marginBlockStart?: Spacing_2;
    /** Negative bottom space around children */
    marginBlockEnd?: Spacing_2;
    /** Negative left space around children */
    marginInlineStart?: Spacing_2;
    /** Negative right space around children */
    marginInlineEnd?: Spacing_2;
}

declare type BleedSlots = {
    default: (_: VueNode) => any;
};

declare type BlockAlign = 'start' | 'center' | 'end' | 'baseline' | 'stretch';

export declare const BlockStack: __VLS_WithTemplateSlots_13<typeof __VLS_component_13, ReturnType<typeof __VLS_template_13>>;

declare interface BlockStackProps {
    as?: Element_3;
    /** Vertical alignment of children */
    align?: Align;
    /** Horizontal alignment of children */
    inlineAlign?: InlineAlign;
    /** The spacing between children */
    gap?: Gap;
    /** Reverse the render order of child items
     * @default false
     */
    reverseOrder?: boolean;
    /** Aria role */
    role?: 'status' | 'presentation' | 'menu' | 'listbox' | 'combobox' | 'group';
}

declare type BlockStackSlots = {
    default: (_: VueNode) => any;
};

declare type BorderRadius = Extract<BorderRadiusAliasOrScale, '100' | '200'>;

export declare const Box: __VLS_WithTemplateSlots_14<typeof __VLS_component_14, ReturnType<typeof __VLS_template_14>>;

declare interface BoxProps {
    /** children of box
     * @default slot
     */
    /** HTML Element type
     * @default 'div'
     */
    as?: Element_2;
    /** Background color */
    background?: ColorBackgroundAlias;
    /** Border color */
    borderColor?: ColorBorderAlias | 'transparent';
    /** Border style */
    borderStyle?: LineStyles;
    /** Border radius */
    borderRadius?: BorderRadiusAliasOrScale;
    /** Vertical end horizontal start border radius */
    borderEndStartRadius?: BorderRadiusAliasOrScale;
    /** Vertical end horizontal end border radius */
    borderEndEndRadius?: BorderRadiusAliasOrScale;
    /** Vertical start horizontal start border radius */
    borderStartStartRadius?: BorderRadiusAliasOrScale;
    /** Vertical start horizontal end border radius */
    borderStartEndRadius?: BorderRadiusAliasOrScale;
    /** Border width */
    borderWidth?: BorderWidthScale;
    /** Vertical start border width */
    borderBlockStartWidth?: BorderWidthScale;
    /** Vertical end border width */
    borderBlockEndWidth?: BorderWidthScale;
    /** Horizontal start border width */
    borderInlineStartWidth?: BorderWidthScale;
    /** Horizontal end border width */
    borderInlineEndWidth?: BorderWidthScale;
    /** Color of children */
    color?: ColorTextAlias;
    /** Minimum height of container */
    minHeight?: string;
    /** Minimum width of container */
    minWidth?: string;
    /** Maximum width of container */
    maxWidth?: string;
    /** Clip horizontal content of children */
    overflowX?: Overflow;
    /** Clip vertical content of children */
    overflowY?: Overflow;
    /** Spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes.
     * @example
     * padding='400'
     * padding={{xs: '200', sm: '300', md: '400', lg: '500', xl: '600'}}
     */
    padding?: Spacing;
    /** Vertical start and end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes.
     * @example
     * paddingBlock='400'
     * paddingBlock={{xs: '200', sm: '300', md: '400', lg: '500', xl: '600'}}
     */
    paddingBlock?: Spacing;
    /** Vertical start spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes.
     * @example
     * paddingBlockStart='400'
     * paddingBlockStart={{xs: '200', sm: '300', md: '400', lg: '500', xl: '600'}}
     */
    paddingBlockStart?: Spacing;
    /** Vertical end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes.
     * @example
     * paddingBlockEnd='400'
     * paddingBlockEnd={{xs: '200', sm: '300', md: '400', lg: '500', xl: '600'}}
     */
    paddingBlockEnd?: Spacing;
    /** Horizontal start and end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes.
     * @example
     * paddingInline='400'
     * paddingInline={{xs: '200', sm: '300', md: '400', lg: '500', xl: '600'}}
     */
    paddingInline?: Spacing;
    /** Horizontal start spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes.
     * @example
     * paddingInlineStart='400'
     * paddingInlineStart={{xs: '200', sm: '300', md: '400', lg: '500', xl: '600'}}
     */
    paddingInlineStart?: Spacing;
    /** Horizontal end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes.
     * @example
     * paddingInlineEnd='400'
     * paddingInlineEnd={{xs: '200', sm: '300', md: '400', lg: '500', xl: '600'}}
     */
    paddingInlineEnd?: Spacing;
    /** Aria role */
    role?: 'status' | 'presentation' | 'menu' | 'listbox' | 'combobox' | 'group';
    /** Shadow on box */
    shadow?: ShadowAliasOrScale;
    /** Width of container */
    width?: string;
    /** Position of box */
    position?: Position;
    /** Top position of box */
    insetBlockStart?: Spacing;
    /** Bottom position of box */
    insetBlockEnd?: Spacing;
    /** Left position of box */
    insetInlineStart?: Spacing;
    /** Right position of box */
    insetInlineEnd?: Spacing;
    /** Opacity of box */
    opacity?: string;
    /** Outline color */
    outlineColor?: ColorBorderAlias;
    /** Outline style */
    outlineStyle?: LineStyles;
    /** Outline width */
    outlineWidth?: BorderWidthScale;
    /** Visually hide the contents during print */
    printHidden?: boolean;
    /** Visually hide the contents (still announced by screenreader) */
    visuallyHidden?: boolean;
    /** z-index of box */
    zIndex?: string;
}

declare type BoxSlots = {
    /** Inner content of the box */
    default: (_: VueNode) => any;
};

export declare const Breadcrumbs: DefineComponent<__VLS_TypePropsToRuntimeProps_18<BreadcrumbsProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_18<BreadcrumbsProps>>>, {}, {}>;

declare interface BreadcrumbsProps {
    /** Back action link */
    backAction: CallbackAction | LinkAction;
}

declare type Breakpoints = 'xs' | 'sm' | 'md' | 'lg' | 'xl';

declare type Breakpoints_2 = 'xs' | 'sm' | 'md' | 'lg' | 'xl';

/**
 * Directional alias for each Polaris `breakpoints` token.
 *
 * @example 'smUp' | 'smDown' | 'smOnly' | 'mdUp' | etc.
 */
declare type BreakpointsDirectionAlias = `${BreakpointsAlias}${Capitalize<BreakpointsAliasDirection>}`;

declare type BulkAction = DisableableAction & BadgeAction;

declare type BulkActionListSection = ActionListSection_2;

export declare const BulkActions: DefineComponent<__VLS_TypePropsToRuntimeProps_19<BulkActionsProps>, {
    checkableButtonRef: Ref<CreateComponentPublicInstance<Readonly<ExtractPropTypes<    {
        label: {
            type: PropType<string>;
            default: string;
        };
        disabled: {
            type: PropType<boolean>;
        };
        accessibilityLabel: {
            type: PropType<string>;
        };
        selected: {
            type: PropType<boolean | "indeterminate">;
        };
        ariaLive: {
            type: PropType<"off" | "polite">;
        };
    }>> & {
        "onToggle-all"?: (() => any) | undefined;
        "onUpdate:modelValue"?: ((value: boolean | "indeterminate" | undefined) => any) | undefined;
    }, {
        focus: () => void;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
        "toggle-all": () => void;
        "update:modelValue": (value: boolean | "indeterminate" | undefined) => void;
    }, VNodeProps & AllowedComponentProps & ComponentCustomProps & Readonly<ExtractPropTypes<    {
        label: {
            type: PropType<string>;
            default: string;
        };
        disabled: {
            type: PropType<boolean>;
        };
        accessibilityLabel: {
            type: PropType<string>;
        };
        selected: {
            type: PropType<boolean | "indeterminate">;
        };
        ariaLive: {
            type: PropType<"off" | "polite">;
        };
    }>> & {
        "onToggle-all"?: (() => any) | undefined;
        "onUpdate:modelValue"?: ((value: boolean | "indeterminate" | undefined) => any) | undefined;
    }, {
        label: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<ExtractPropTypes<    {
        label: {
            type: PropType<string>;
            default: string;
        };
        disabled: {
            type: PropType<boolean>;
        };
        accessibilityLabel: {
            type: PropType<string>;
        };
        selected: {
            type: PropType<boolean | "indeterminate">;
        };
        ariaLive: {
            type: PropType<"off" | "polite">;
        };
    }>> & {
        "onToggle-all"?: (() => any) | undefined;
        "onUpdate:modelValue"?: ((value: boolean | "indeterminate" | undefined) => any) | undefined;
    }, {
        focus: () => void;
    }, {}, {}, {}, {
        label: string;
    }> | null>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "toggle-all": () => void;
    "more-action-popover-toggle": (isOpen: boolean) => void;
    "select-mode-toggle": (selectMode: boolean) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_19<BulkActionsProps>>> & {
    "onToggle-all"?: (() => any) | undefined;
    "onMore-action-popover-toggle"?: ((isOpen: boolean) => any) | undefined;
    "onSelect-mode-toggle"?: ((selectMode: boolean) => any) | undefined;
}, {}, {}>;

declare type BulkActionsProps = {
    /** Visually hidden text for screen readers */
    accessibilityLabel?: string;
    /** State of the bulk actions checkbox */
    selected?: boolean | 'indeterminate';
    /** Text to select all across pages */
    paginatedSelectAllText?: string;
    /** Action for selecting all across pages */
    paginatedSelectAllAction?: Action;
    /** Actions that will be given more prominence */
    promotedActions?: (BulkAction | MenuGroupDescriptor)[];
    /** List of actions */
    actions?: (BulkAction | BulkActionListSection)[];
    /** Disables bulk actions */
    disabled?: boolean;
    /** The size of the buttons to render */
    buttonSize?: Extract<ButtonProps['size'], 'micro' | 'medium'>;
    /** Label for the bulk actions */
    label?: string;
    /** List is in a selectable state. Will only render the bulk actions when `true` */
    selectMode?: boolean;
    /** @deprecated Used for forwarding the ref. Use `ref` prop instead */
    innerRef?: Ref<any>;
    /** @deprecated If the BulkActions is currently sticky in view */
    isSticky?: boolean;
    /** @deprecated The width of the BulkActions */
    width?: number;
};

export declare const Button: __VLS_WithTemplateSlots_15<typeof __VLS_component_15, ReturnType<typeof __VLS_template_15>>;

export declare const ButtonFrom: DefineComponent<__VLS_TypePropsToRuntimeProps_21<Props>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_21<Props>>>, {}, {}>;

export declare const ButtonGroup: __VLS_WithTemplateSlots_16<typeof __VLS_component_16, ReturnType<typeof __VLS_template_16>>;

export declare const ButtonGroupItem: DefineComponent<__VLS_TypePropsToRuntimeProps_23<ItemProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_23<ItemProps>>>, {}, {}>;

declare interface ButtonGroupProps {
    /** Determines the space between button group items */
    gap?: Gap_2;
    /** Styling variant for group */
    variant?: Variant;
    /** Buttons will stretch/shrink to occupy the full width */
    fullWidth?: boolean;
    /** Remove top left and right border radius */
    connectedTop?: boolean;
    /** Prevent buttons in button group from wrapping to next line */
    noWrap?: boolean;
}

declare interface ButtonProps extends BaseButton {
    /**
     * Changes the size of the button, giving it more or less padding
     * @default 'medium'
     */
    size?: 'micro' | 'slim' | 'medium' | 'large';
    /** Changes the inner text alignment of the button */
    textAlign?: 'left' | 'right' | 'center' | 'start' | 'end';
    /** Allows the button to grow to the width of its container */
    fullWidth?: boolean;
    /** Displays the button with a disclosure icon. Defaults to `down` when set to true */
    disclosure?: 'down' | 'up' | 'select' | boolean;
    /** Removes underline from button text (including on interaction)
     * @deprecated Use a variant instead
     */
    removeUnderline?: boolean;
    /** Icon to display to the left of the button content */
    icon?: IconSource;
    /** Indicates whether or not the button is the primary navigation link when rendered inside of an `IndexTable.Row` */
    dataPrimaryLink?: boolean;
    /** Sets the color treatment of the Button. */
    tone?: 'critical' | 'success';
    /** Changes the visual appearance of the Button. */
    variant?: 'plain' | 'primary' | 'secondary' | 'tertiary' | 'monochromePlain';
}

declare interface CallbackAction extends BaseCallbackAction {
}

export declare const CalloutCard: __VLS_WithTemplateSlots_17<typeof __VLS_component_17, ReturnType<typeof __VLS_template_17>>;

declare interface CalloutCardProps {
    /** The title of the card */
    title?: string;
    /** URL to the card illustration */
    illustration: string;
    /** Primary action for the card */
    primaryAction: IconableAction;
    /** Secondary action for the card */
    secondaryAction?: IconableAction & Pick<ButtonProps, 'variant'>;
}

export declare const Card: __VLS_WithTemplateSlots_18<typeof __VLS_component_18, ReturnType<typeof __VLS_template_18>>;

declare interface CardProps {
    /** Background color
     * @default 'bg-surface'
     */
    background?: ColorBackgroundAlias;
    /** The spacing around the card
     * @default {xs: '400', sm: '500'}
     * @example
     * padding='400'
     * padding={{xs: '200', sm: '300', md: '400', lg: '500', xl: '600'}}
     */
    padding?: Spacing_3;
    /** Border radius value above a set breakpoint
     * @default 'sm'
     */
    roundedAbove?: BreakpointsAlias;
}

declare type CardSlots = {
    /** Inner content of the box */
    default: (_: VueNode) => any;
};

declare type Cell = {
    [Breakpoint in Breakpoints_2]?: string;
};

declare interface CellProps {
    /**
     * Set grid-template-areas
     * @deprecated To avoid a11y issues, nest layout components in individual grid
     * cells instead. See:
     * https://polaris.shopify.com/components/layout-and-structure
     */
    area?: string;
    column?: Cell;
    columnSpan?: Columns_2;
    row?: Cell;
}

declare type CellProps_2 = {
    /** The table cell element to render. Render the cell as a `th` if it serves as a subheading
     * @default 'td'
     */
    as?: 'th' | 'td';
    /** The unique ID to set on the cell element */
    id?: string;
    /** Custom class name to apply to the cell element */
    className?: string;
    /** Whether the cell padding should be removed
     * @default false
     */
    flush?: boolean;
    /** For subheader cells -- The number of the columns that the cell element should extend to */
    colSpan?: HTMLTableCellElement['colSpan'];
    /**  For subheader cells -- Indicates the cells that the `th` element relates to */
    scope?: HTMLTableCellElement['scope'];
    /** A space-separated list of the `th` cell IDs that describe or apply to it. Use for cells within a row that relate to a subheader cell in addition to their column header. */
    headers?: HTMLTableCellElement['headers'];
};

declare type CellSlots = {
    default: (_: VueNode) => VNode[];
};

export declare const CheckableButton: DefineComponent<__VLS_WithDefaults_11<__VLS_TypePropsToRuntimeProps_26<CheckableButtonProps>, {
    label: string;
}>, {
    focus: typeof focus_2;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "toggle-all": () => void;
    "update:modelValue": (value: boolean | "indeterminate" | undefined) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_11<__VLS_TypePropsToRuntimeProps_26<CheckableButtonProps>, {
    label: string;
}>>> & {
    "onToggle-all"?: (() => any) | undefined;
    "onUpdate:modelValue"?: ((value: boolean | "indeterminate" | undefined) => any) | undefined;
}, {
    label: string;
}, {}>;

export declare type CheckableButtonProps = {
    accessibilityLabel?: string;
    label?: string;
    selected?: boolean | 'indeterminate';
    disabled?: boolean;
    ariaLive?: 'off' | 'polite';
};

export declare const Checkbox: __VLS_WithTemplateSlots_19<typeof __VLS_component_19, ReturnType<typeof __VLS_template_19>>;

declare type CheckboxSlots = {
    /** Label for the checkbox */
    label: (_: VueNode) => any;
    /** Additional text to aide in use */
    helpText: (_: VueNode) => any;
};

export declare const Choice: __VLS_WithTemplateSlots_20<typeof __VLS_component_20, ReturnType<typeof __VLS_template_20>>;

declare interface Choice_2 {
    /** Value of the choice */
    value: string;
    /** Label for the choice */
    label?: string;
    /** A unique identifier for the choice */
    id?: string;
    /** Disable choice */
    disabled?: boolean;
    /** Additional text to aide in use */
    helpText?: string;
    /** Indicates that the choice is aria-describedBy the error message */
    describedByError?: boolean;
    /**  Method to render children with a choice */
    renderChildren?: VueNode;
}

declare interface ChoiceBleedProps {
    /** Spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes.
     * @example
     * bleed='4'
     * bleed={{xs: '2', sm: '3', md: '4', lg: '5', xl: '6'}}
     */
    bleed?: Spacing_4;
    /** Vertical start spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes.
     * @example
     * bleedBlockStart='4'
     * bleedBlockStart={{xs: '2', sm: '3', md: '4', lg: '5', xl: '6'}}
     */
    bleedBlockStart?: Spacing_4;
    /** Vertical end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes.
     * @example
     * bleedBlockEnd='4'
     * bleedBlockEnd={{xs: '2', sm: '3', md: '4', lg: '5', xl: '6'}}
     */
    bleedBlockEnd?: Spacing_4;
    /** Horizontal start spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes.
     * @example
     * bleedInlineStart='4'
     * bleedInlineStart={{xs: '2', sm: '3', md: '4', lg: '5', xl: '6'}}
     */
    bleedInlineStart?: Spacing_4;
    /** Horizontal end spacing around children. Accepts a spacing token or an object of spacing tokens for different screen sizes.
     * @example
     * bleedInlineEnd='4'
     * bleedInlineEnd={{xs: '2', sm: '3', md: '4', lg: '5', xl: '6'}}
     */
    bleedInlineEnd?: Spacing_4;
}

export declare const ChoiceList: __VLS_WithTemplateSlots_21<typeof __VLS_component_21, ReturnType<typeof __VLS_template_21>>;

declare type ChoiceListSlots = {
    /** Label for list of choices */
    title: (_: VueNode) => VNode[];
};

declare interface ChoiceProps extends ChoiceBleedProps {
    /** A unique identifier for the choice */
    id: string;
    /**	Label for the choice */
    label?: string;
    /** Whether the associated form control is disabled */
    disabled?: boolean;
    /** Visually hide the label */
    labelHidden?: boolean;
    /** Added to the label element */
    labelClassName?: string;
    /** Grow to fill the space. Equivalent to width: 100%; height: 100% */
    fill?: ResponsiveProp<boolean>;
    /** Display an error message */
    error?: Error_2 | boolean;
    /** Additional text to aide in use. Will add a wrapping <div> */
    helpText?: string;
    /** Indicates the tone of the choice */
    tone?: 'magic';
}

declare interface ChoiceSlots {
    /**  Content to display inside the choice */
    default: (_: VueNode) => any;
    /** The label for the choice */
    label: (_: VueNode) => any;
    /** Additional text to aide in use. Will add a wrapping <div> */
    helpText: (_: VueNode) => any;
}

export declare const Collapsible: __VLS_WithTemplateSlots_22<typeof __VLS_component_22, ReturnType<typeof __VLS_template_22>>;

declare type CollapsibleProps = {
    /** Assign a unique ID to the collapsible. For accessibility, pass this ID as the value of the triggering component’s aria-controls prop. */
    id?: string;
    /** Option to show collapsible content when printing */
    expandOnPrint?: boolean;
    /** Toggle whether the collapsible is expanded or not. */
    open: boolean;
    /** The direction the collapsible collapses in.
     * @default 'block'
     */
    variant?: 'block' | 'inline';
    /** Override transition properties. When set to false, disables transition completely.
     * @default :transition="{duration: 'var(--p-motion-duration-150)', timingFunction: 'var(--p-motion-ease-in-out)'}"
     */
    transition?: boolean | Transition;
};

declare interface Color extends HSBColor {
    /** Level of transparency */
    alpha?: HSBAColor['alpha'];
}

declare type Color_2 = 'highlight' | 'primary' | 'success' | 'critical';

export declare const ColorPicker: DefineComponent<    {
    modelValue: PropType<Color | string>;
    id: {
        type: PropType<string>;
    };
    allowAlpha: {
        type: PropType<boolean>;
    };
    fullWidth: {
        type: PropType<boolean>;
    };
    output: {
        type: PropType<"hex" | "rgb" | "hsb">;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    change: (color: string | HSBAColor) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<    {
    modelValue: PropType<Color | string>;
    id: {
        type: PropType<string>;
    };
    allowAlpha: {
        type: PropType<boolean>;
    };
    fullWidth: {
        type: PropType<boolean>;
    };
    output: {
        type: PropType<"hex" | "rgb" | "hsb">;
    };
}>> & {
    onChange?: ((color: string | HSBAColor) => any) | undefined;
}, {}, {}>;

declare type ColumnContentType = 'text' | 'numeric';

declare type Columns = {
    [Breakpoint in Breakpoints]?: number;
};

declare interface Columns_2 {
    /** Number of columns the section should span on extra small screens */
    xs?: 1 | 2 | 3 | 4 | 5 | 6;
    /** Number of columns the section should span on small screens */
    sm?: 1 | 2 | 3 | 4 | 5 | 6;
    /** Number of columns the section should span on medium screens */
    md?: 1 | 2 | 3 | 4 | 5 | 6;
    /** Number of columns the section should span on large screens */
    lg?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    /** Number of columns the section should span on extra large screens */
    xl?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
}

declare type Columns_3 = ResponsiveProp<ColumnsType>;

declare type ColumnsAlias = 'oneThird' | 'oneHalf' | 'twoThirds';

declare type ColumnsType = number | string | ColumnsAlias[];

export declare const Combobox: __VLS_WithTemplateSlots_23<typeof __VLS_component_23, ReturnType<typeof __VLS_template_23>>;

declare type ComboboxProps = {
    /** Allows more than one option to be selected */
    allowMultiple?: boolean;
    /**
     * The preferred direction to open the popover
     * @default 'below'
     */
    preferredPosition?: PopoverProps['preferredPosition'];
    /** Whether or not more options are available to lazy load when the bottom of the listbox reached. Use the hasMoreResults boolean provided by the GraphQL API of the paginated data. */
    willLoadMoreOptions?: boolean;
    /** Height to set on the Popover Pane. */
    height?: string;
    /** Callback fired when the bottom of the listbox is reached. Use to lazy load when listbox option data is paginated. */
    maxHeight?: string;
    /** Min Height to set on the Popover Pane. */
    minHeight?: string;
};

declare type ComboboxSlots = {
    /** The content to display inside the popover */
    default: (_?: VueNode) => VNode[];
    /** The text field component to activate the Popover */
    activator: (_?: VueNode) => VNode[];
};

declare interface ComplexAction extends Action, DisableableAction, DestructableAction, IconableAction, OutlineableAction, LoadableAction, PlainAction {
}

declare interface ComplexAction_2 extends Action, DisableableAction, DestructableAction, IconableAction, OutlineableAction, LoadableAction, PlainAction {
}

declare type CrossOrigin = 'anonymous' | 'use-credentials' | '' | undefined;

export declare const DataTable: DefineComponent<__VLS_WithDefaults_14<__VLS_TypePropsToRuntimeProps_30<DataTableProps>, {
    hideScrollIndicator: boolean;
    increasedTableDensity: boolean;
    hasZebraStripingOnData: boolean;
    stickyHeader: boolean;
    fixedFirstColumn: boolean;
    hoverable: boolean;
    initialSortColumnIndex: number;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    sort: (headingIndex: number, direction: SortDirection) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_14<__VLS_TypePropsToRuntimeProps_30<DataTableProps>, {
    hideScrollIndicator: boolean;
    increasedTableDensity: boolean;
    hasZebraStripingOnData: boolean;
    stickyHeader: boolean;
    fixedFirstColumn: boolean;
    hoverable: boolean;
    initialSortColumnIndex: number;
}>>> & {
    onSort?: ((headingIndex: number, direction: SortDirection) => any) | undefined;
}, {
    hideScrollIndicator: boolean;
    hoverable: boolean;
    initialSortColumnIndex: number;
    increasedTableDensity: boolean;
    hasZebraStripingOnData: boolean;
    stickyHeader: boolean;
}, {}>;

declare type DataTablePaginationProps = Omit<PaginationProps, 'type'>;

declare type DataTableProps = {
    /** List of data types, which determines content alignment for each column. Data types are "text," which aligns left, or "numeric," which aligns right. */
    columnContentTypes: ColumnContentType[];
    /** List of column headings. */
    headings: VueNode[];
    /** List of numeric column totals, highlighted in the table’s header below column headings. Use empty strings as placeholders for columns with no total. */
    totals?: TableData[];
    /** Custom totals row heading */
    totalsName?: {
        singular: VueNode;
        plural: VueNode;
    };
    /** Placement of totals row within table */
    showTotalsInFooter?: boolean;
    /** Lists of data points which map to table body rows. */
    rows: TableData[][];
    /** Hide column visibility and navigation buttons above the header when the table horizontally collapses to be scrollable.
     * @default false
     */
    hideScrollIndicator?: boolean;
    /** Truncate content in first column instead of wrapping.
     * @default true
     */
    truncate?: boolean;
    /** Vertical alignment of content in the cells.
     * @default 'top'
     */
    verticalAlign?: VerticalAlign;
    /** Content centered in the full width cell of the table footer row. */
    footerContent?: TableData;
    /** Table row has hover state. Defaults to true. */
    hoverable?: boolean;
    /** List of booleans, which maps to whether sorting is enabled or not for each column. Defaults to false for all columns.  */
    sortable?: boolean[];
    /**
     * The direction to sort the table rows on first click or keypress of a sortable column heading. Defaults to ascending.
     * @default 'ascending'
     */
    defaultSortDirection?: SortDirection;
    /**
     * The index of the heading that the table rows are initially sorted by. Defaults to the first column.
     * @default 0
     */
    initialSortColumnIndex?: number;
    /** Increased density */
    increasedTableDensity?: boolean;
    /** Add zebra striping to data rows */
    hasZebraStripingOnData?: boolean;
    /** Header becomes sticky and pins to top of table when scrolling  */
    stickyHeader?: boolean;
    /** @deprecated Add a fixed first column on horizontal scroll. Use fixedFirstColumns={n} instead. */
    hasFixedFirstColumn?: boolean;
    /** Add fixed columns on horizontal scroll. */
    fixedFirstColumns?: number;
    /** Specify a min width for the first column if neccessary */
    firstColumnMinWidth?: string;
    /** Properties to enable pagination at the bottom of the table. */
    pagination?: DataTablePaginationProps;
};

export declare const DatePicker: DefineComponent<    {
    modelValue: PropType<Range_3 | Date>;
    id: {
        type: PropType<string>;
    };
    month: {
        type: PropType<number>;
        required: true;
    };
    year: {
        type: PropType<number>;
        required: true;
    };
    disableDatesBefore: {
        type: PropType<Date>;
    };
    disableDatesAfter: {
        type: PropType<Date>;
    };
    disableSpecificDates: {
        type: PropType<Date[]>;
    };
    allowRange: {
        type: PropType<boolean>;
    };
    weekStartsOn: {
        type: PropType<number>;
        default: number;
    };
    multiMonth: {
        type: PropType<boolean>;
    };
    dayAccessibilityLabelPrefix: {
        type: PropType<string>;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    change: (date: Range_3) => void;
    "month-change": (month: number, year: number) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<    {
    modelValue: PropType<Range_3 | Date>;
    id: {
        type: PropType<string>;
    };
    month: {
        type: PropType<number>;
        required: true;
    };
    year: {
        type: PropType<number>;
        required: true;
    };
    disableDatesBefore: {
        type: PropType<Date>;
    };
    disableDatesAfter: {
        type: PropType<Date>;
    };
    disableSpecificDates: {
        type: PropType<Date[]>;
    };
    allowRange: {
        type: PropType<boolean>;
    };
    weekStartsOn: {
        type: PropType<number>;
        default: number;
    };
    multiMonth: {
        type: PropType<boolean>;
    };
    dayAccessibilityLabelPrefix: {
        type: PropType<string>;
    };
}>> & {
    onChange?: ((date: Range_3) => any) | undefined;
    "onMonth-change"?: ((month: number, year: number) => any) | undefined;
}, {
    weekStartsOn: number;
}, {}>;

export declare const Dd: DefineComponent<    {}, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<    {}>>, {}, {}>;

declare const _default: __VLS_WithTemplateSlots_5<typeof __VLS_component_5, ReturnType<typeof __VLS_template_5>>;
export { _default as AutocompleteTextField }
export { _default as ComboboxTextField }

export declare const DefaultBanner: __VLS_WithTemplateSlots_9<typeof __VLS_component_9, ReturnType<typeof __VLS_template_9>>;

declare type DefaultBannerSlots = {
    default: (_: VueNode) => any;
};

declare type Description = string | VueNode | (string | VueNode)[];

export declare const DescriptionList: DefineComponent<__VLS_WithDefaults_15<__VLS_TypePropsToRuntimeProps_31<DescriptionListProps>, {
    gap: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_15<__VLS_TypePropsToRuntimeProps_31<DescriptionListProps>, {
    gap: string;
}>>>, {
    gap: "tight" | "loose";
}, {}>;

declare interface DescriptionListProps {
    /** Determines the spacing between list items */
    gap?: 'tight' | 'loose';
}

declare interface DestructableAction extends Action {
    /** Destructive action */
    destructive?: boolean;
}

declare type Direction = ResponsiveProp<'row' | 'row-reverse'>;

declare interface DisableableAction extends Action {
    /** Whether or not the action is disabled */
    disabled?: boolean;
}

declare type Distribution = 'equalSpacing' | 'leading' | 'trailing' | 'center' | 'fill' | 'fillEvenly';

export declare const Divider: DefineComponent<__VLS_WithDefaults_16<__VLS_TypePropsToRuntimeProps_32<DividerProps>, {
    borderColor: string;
    borderWidth: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_16<__VLS_TypePropsToRuntimeProps_32<DividerProps>, {
    borderColor: string;
    borderWidth: string;
}>>>, {
    borderColor: ColorBorderAlias | "transparent";
    borderWidth: BorderWidthScale;
}, {}>;

declare interface DividerProps {
    /**
     * Divider border color
     * @default 'border-secondary'
     */
    borderColor?: ColorBorderAlias | 'transparent';
    /**
     * Divider border width
     * @default '025'
     */
    borderWidth?: BorderWidthScale;
}

export declare const DropZone: __VLS_WithTemplateSlots_24<typeof __VLS_component_24, ReturnType<typeof __VLS_template_24>>;

declare type DropZoneFileType = 'file' | 'image' | 'video';

export declare const DropZoneFileUpload: DefineComponent<__VLS_TypePropsToRuntimeProps_34<FileUploadProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_34<FileUploadProps>>>, {}, {}>;

declare type DropZoneProps = {
    /** Label for the file input */
    label?: string;
    /** Adds an action to the label */
    labelAction?: LabelledProps['action'];
    /** Visually hide the label */
    labelHidden?: boolean;
    /** ID for file input */
    id?: string;
    /** Allowed file types */
    accept?: string;
    /**
     * Whether is a file or an image
     * @default 'file'
     */
    type?: DropZoneFileType;
    /** Sets an active state */
    active?: boolean;
    /** Sets an error state */
    error?: boolean;
    /**
     * Displays an outline border
     * @default true
     */
    outline?: boolean;
    /**
     * Displays an overlay on hover
     * @default true
     */
    overlay?: boolean;
    /** Text that appears in the overlay */
    overlayText?: string;
    /** Text that appears in the overlay when set in error state */
    errorOverlayText?: string;
    /**
     * Allows multiple files to be uploaded at once
     * @default true
     */
    allowMultiple?: boolean;
    /** Sets a disabled state */
    disabled?: boolean;
    /** Allows a file to be dropped anywhere on the page */
    dropOnPage?: boolean;
    /** Sets the default file dialog state */
    openFileDialog?: boolean;
    /** Allows child content to adjust height */
    variableHeight?: boolean;
    /** Adds custom validations */
    customValidator?(file: File): boolean;
};

declare type DropZoneSlots = {
    /** The child elements to render in the dropzone. */
    default: (_: VueNode) => VNode[];
    /** Label for the file input */
    label?: (_: VueNode) => VNode[];
};

export declare const Dt: DefineComponent<    {}, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<    {}>>, {}, {}>;

declare type DualValue = [number, number];

declare type Element_2 = 'div' | 'span' | 'section' | 'legend' | 'ul' | 'li';

declare type Element_3 = 'div' | 'span' | 'ul' | 'ol' | 'li' | 'fieldset';

declare type Element_4 = 'div' | 'span' | 'li' | 'ol' | 'ul';

declare type Element_5 = 'div' | 'span' | 'section' | 'legend' | 'ul' | 'li';

declare type Element_6 = 'dt' | 'dd' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'span' | 'strong' | 'legend';

export declare const EmptySearchResult: DefineComponent<__VLS_TypePropsToRuntimeProps_35<EmptySearchResultProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_35<EmptySearchResultProps>>>, {}, {}>;

declare interface EmptySearchResultProps {
    title: string;
    description?: string;
    withIllustration?: boolean;
}

export declare const EmptyState: __VLS_WithTemplateSlots_25<typeof __VLS_component_25, ReturnType<typeof __VLS_template_25>>;

declare interface EmptyStateProps {
    /** The empty state heading */
    heading?: string;
    /**
     * The path to the image to display.
     * The image should have ~40px of white space above when empty state is used within a card, modal, or navigation component
     */
    image: string;
    /** The path to the image to display on large screens */
    largeImage?: string;
    /** Whether or not to limit the image to the size of its container on large screens */
    imageContained?: boolean;
    /** Whether or not the content should span the full width of its container  */
    fullWidth?: boolean;
    /** Primary action for empty state */
    action?: ComplexAction_2;
    /** Secondary action for empty state */
    secondaryAction?: ComplexAction_2;
}

declare type Enctype = 'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain';

declare type Error_2 = string | Element | (string | Element)[];

declare const EventListener_2: DefineComponent<__VLS_TypePropsToRuntimeProps_37<{
    event: string;
    capture?: boolean;
    handler(event: Event): void;
    passive?: boolean;
    customWindow?: Window | null;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_37<{
    event: string;
    capture?: boolean;
    handler(event: Event): void;
    passive?: boolean;
    customWindow?: Window | null;
}>>>, {}, {}>;
export { EventListener_2 as EventListener }

export declare const ExceptionList: __VLS_WithTemplateSlots_26<typeof __VLS_component_26, ReturnType<typeof __VLS_template_26>>;

declare interface ExceptionListProps {
    /** Collection of items for list */
    items: Item_2[];
}

declare interface FeaturesConfig {
    dynamicTopBarAndReframe?: boolean;
    [key: string]: boolean | undefined;
}

declare type FileUploadProps = {
    actionTitle?: string;
    actionHint?: string;
};

declare interface FilterInterface {
    /** A unique key used to identify the filter */
    name: string;
    /** The label for the filter */
    label: string;
    /** The markup for the given filter */
    filter: VueNode;
    /** Whether or not the filter should have a shortcut popover displayed */
    shortcut?: boolean;
    /** Whether or not the filter should be pinned, permanently displaying the filter */
    pinned?: boolean;
    /** Whether or not the filter is disabled */
    disabled?: boolean;
    /**
     * @default false
     * Whether or not the clear button is displayed
     */
    hideClearButton?: boolean;
    /** Optional callback when filter is pressed */
    onAction?: () => void;
    /** Suffix source */
    suffix?: VueNode;
    /** Optional section heading that this filter will go under  */
    section?: string;
    /** Optional: hides the filter from the dropdown  */
    hidden?: boolean;
}

export declare const FilterPill: DefineComponent<__VLS_WithDefaults_19<__VLS_TypePropsToRuntimeProps_40<FilterPillProps>, {
    unsavedChanges: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    click: (name: string) => void;
    remove: (name: string) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_19<__VLS_TypePropsToRuntimeProps_40<FilterPillProps>, {
    unsavedChanges: boolean;
}>>> & {
    onClick?: ((name: string) => any) | undefined;
    onRemove?: ((name: string) => any) | undefined;
}, {
    unsavedChanges: boolean;
}, {}>;

declare interface FilterPillProps extends FilterInterface {
    /** A unique identifier for the filter */
    filterKey: string;
    /** Whether the filter is selected or not */
    selected?: boolean;
    /** Whether the Popover will be initially open or not */
    initialActive: boolean;
    /** Whether filtering is disabled */
    disabled?: boolean;
    /** Whether the filter should close when clicking inside another Popover. */
    closeOnChildOverlayClick?: boolean;
    /** Whether the filter is newly applied or updated and hasn't been saved */
    unsavedChanges?: boolean;
    /** Override z-index of popovers and tooltips */
    disclosureZIndexOverride?: number;
}

export declare const Filters: __VLS_WithTemplateSlots_27<typeof __VLS_component_27, ReturnType<typeof __VLS_template_27>>;

export declare const FiltersBar: DefineComponent<__VLS_TypePropsToRuntimeProps_41<FiltersBarProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "clear-all": () => void;
    "add-filter-click": () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_41<FiltersBarProps>>> & {
    "onClear-all"?: (() => any) | undefined;
    "onAdd-filter-click"?: (() => any) | undefined;
}, {}, {}>;

declare type FiltersBarProps = {
    /** Currently entered text in the query field */
    queryValue?: string;
    /** Placeholder text for the query field. */
    queryPlaceholder?: string;
    /** Whether the query field is focused. */
    focused?: boolean;
    /** Available filters added to the filter bar. Shortcut filters are pinned to the front of the bar. */
    filters: FilterInterface[];
    /** Applied filters which are rendered as filter pills. The remove callback is called with the respective key. */
    appliedFilters?: AppliedFilterInterface[];
    /** Disable all filters. */
    disabled?: boolean;
    /** Hide the query field. */
    hideQueryField?: boolean;
    /** Disable the filters */
    disableFilters?: boolean;
    /** Whether the filter should close when clicking inside another Popover. */
    closeOnChildOverlayClick?: boolean;
};

declare type FiltersProps = {
    /** Currently entered text in the query field */
    queryValue?: string;
    /** Placeholder text for the query field. */
    queryPlaceholder?: string;
    /** Whether the query field is focused. */
    focused?: boolean;
    /** Available filters added to the filter bar. Shortcut filters are pinned to the front of the bar. */
    filters: FilterInterface[];
    /** Applied filters which are rendered as filter pills. The remove callback is called with the respective key. */
    appliedFilters?: AppliedFilterInterface[];
    /** Disable all filters. */
    disabled?: boolean;
    /** Hide filter bar for applied filters. */
    hideFilters?: boolean;
    /** Hide the query field. */
    hideQueryField?: boolean;
    /** Disable the query field. */
    disableQueryField?: boolean;
    /** Disable the filters */
    disableFilters?: boolean;
    /** Whether the text field should be borderless. Should be true when used as part of the IndexFilters component. */
    borderlessQueryField?: boolean;
    /** Whether an asyncronous task is currently being run. */
    loading?: boolean;
    mountedState?: TransitionStatus;
    /** Whether the filter should close when clicking inside another Popover. */
    closeOnChildOverlayClick?: boolean;
    /** @deprecated The name of the currently selected view */
    selectedViewName?: string;
};

export declare const Focus: DefineComponent<__VLS_TypePropsToRuntimeProps_42<FocusProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_42<FocusProps>>>, {}, {}>;

declare function focus_2(): void;

declare interface FocusProps {
    disabled?: boolean;
    root: HTMLElement | null;
}

declare type FontWeight = 'regular' | 'medium' | 'semibold' | 'bold';

export declare const FooterHelp: __VLS_WithTemplateSlots_28<typeof __VLS_component_28, ReturnType<typeof __VLS_template_28>>;

declare type FooterHelpProps = {
    /** Horizontal alignment of the component
     * @default 'center'
     */
    align?: 'start' | 'center' | 'end';
};

declare function forceUpdatePosition(): void;

export declare const Form: __VLS_WithTemplateSlots_29<typeof __VLS_component_29, ReturnType<typeof __VLS_template_29>>;

declare type FormItemProps = {
    condensed?: boolean;
};

export declare const FormLayout: __VLS_WithTemplateSlots_30<typeof __VLS_component_30, ReturnType<typeof __VLS_template_30>>;

export declare const FormLayoutGroup: __VLS_WithTemplateSlots_31<DefineComponent<__VLS_TypePropsToRuntimeProps_46<{
    condensed?: boolean;
    title?: string;
    helpText?: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_46<{
    condensed?: boolean;
    title?: string;
    helpText?: string;
}>>>, {}, {}>, Readonly<{
    default: (_?: VueNode) => VNode[];
    helpText?: (_?: VueNode) => VNode[];
}> & {
    default: (_?: VueNode) => VNode[];
    helpText?: (_?: VueNode) => VNode[];
}>;

export declare const FormLayoutItem: DefineComponent<__VLS_TypePropsToRuntimeProps_47<FormItemProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_47<FormItemProps>>>, {}, {}>;

declare type FormLayoutProps = {
    /** Unwrap all stack elements  */
    noItemWrap?: boolean;
};

declare type FormLayoutSlots = {
    /** The content to display inside the layout. */
    default: (_?: VueNode) => VNode[];
};

declare type FormProps = {
    /** Space separated list of character encodings */
    acceptCharset?: string;
    /** Where to send form-data on submittal */
    action?: string;
    /** Grants the browser the ability to autocomplete input elements */
    autoComplete?: boolean;
    /** Media type when submitting content to server */
    encType?: Enctype;
    /** Toggles if form submits on Enter keypress. Defaults to true. */
    implicitSubmit?: boolean;
    /** Method used to submit form */
    method?: Method;
    /** A unique name for the form */
    name?: string;
    /** Whether or not form is validated when submitting */
    noValidate?: boolean;
    /** Blocks the default form action */
    preventDefault?: boolean;
    /** Where to display response after form submittal */
    target?: Target_2;
};

declare type FormSlots = {
    /** The content to display inside the form. */
    default: (_?: VueNode) => VNode[];
};

export declare const FullscreenBar: __VLS_WithTemplateSlots_32<typeof __VLS_component_31, ReturnType<typeof __VLS_template_31>>;

declare type Gap = ResponsiveProp<SpaceScale>;

declare type Gap_2 = 'extraTight' | 'tight' | 'loose';

declare type Gap_3 = {
    [Breakpoint in Breakpoints]?: string;
};

declare type Gap_4 = ResponsiveProp<SpaceScale>;

declare type Gap_5 = ResponsiveProp<SpaceScale>;

export declare const Grid: __VLS_WithTemplateSlots_33<typeof __VLS_component_32, ReturnType<typeof __VLS_template_32>>;

export declare const GridCell: DefineComponent<__VLS_TypePropsToRuntimeProps_49<CellProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_49<CellProps>>>, {}, {}>;

declare interface GridProps {
    /**
     * Set grid-template-areas
     * @deprecated To avoid a11y issues, nest layout components in individual grid
     * cells instead. See:
     * https://polaris.shopify.com/components/layout-and-structure
     */
    areas?: Areas;
    columns?: Columns;
    gap?: Gap_3;
}

declare type GridSlots = {
    default: (_: VueNode) => any;
};

declare interface HeaderProps extends TitleProps {
    /** Visually hide the title */
    titleHidden?: boolean;
    /** A label to use for the page when the page is ready, used by screen readers. Will override the title prop if present */
    pageReadyAccessibilityLabel?: string;
    /** Enables filtering action list items */
    filterActions?: boolean;
    /** Primary page-level action */
    primaryAction?: PrimaryActionType;
    /** Page-level pagination */
    pagination?: PaginationProps;
    /** A back action link */
    backAction?: BreadcrumbsProps['backAction'];
    /** Collection of secondary page-level actions */
    secondaryActions?: MenuActionDescriptor[];
    /** Collection of page-level groups of secondary actions */
    actionGroups?: MenuGroupDescriptor[];
    additionalMetadata?: string;
}

declare interface HistoryState {
    [x: number]: HistoryStateValue;
    [x: string]: HistoryStateValue;
}

declare interface HistoryStateArray extends Array<HistoryStateValue> {
}

/**
 * Allowed variables in HTML5 history state. Note that pushState clones the state
 * passed and does not accept everything: e.g.: it doesn't accept symbols, nor
 * functions as values. It also ignores Symbols as keys.
 */
declare type HistoryStateValue = string | number | boolean | null | undefined | HistoryState | HistoryStateArray;

export declare const Icon: DefineComponent<__VLS_TypePropsToRuntimeProps_50<IconProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_50<IconProps>>>, {}, {}>;

declare interface IconableAction extends Action {
    /** Source of the icon */
    icon?: IconSource;
}

declare type IconProps = {
    /** The SVG contents to display in the icon (icons should fit in a 20 × 20 pixel viewBox) */
    source: IconSource;
    /** Set the color for the SVG fill */
    tone?: Tone_2;
    /** Descriptive text to be read to screenreaders */
    accessibilityLabel?: string;
};

declare type IconSource = Component | string | (string | Component)[];

declare const Image_2: DefineComponent<__VLS_TypePropsToRuntimeProps_51<ImageProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    load: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_51<ImageProps>>> & {
    onLoad?: (() => any) | undefined;
}, {}, {}>;
export { Image_2 as Image }

declare interface ImageProps {
    alt: string;
    source: string;
    crossOrigin?: CrossOrigin;
    sourceSet?: SourceSet[];
}

export declare const IndexFilters: DefineComponent<__VLS_WithDefaults_22<__VLS_TypePropsToRuntimeProps_52<IndexFiltersProps>, {
    queryValue: string;
    isFlushWhenSticky: boolean;
    canCreateNewView: boolean;
    autoFocusSearchField: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_22<__VLS_TypePropsToRuntimeProps_52<IndexFiltersProps>, {
    queryValue: string;
    isFlushWhenSticky: boolean;
    canCreateNewView: boolean;
    autoFocusSearchField: boolean;
}>>>, {
    queryValue: string;
    canCreateNewView: boolean;
    isFlushWhenSticky: boolean;
    autoFocusSearchField: boolean;
}, {}>;

declare interface IndexFiltersCancelAction {
    onAction: () => void;
    disabled?: boolean;
    loading?: boolean;
}

export declare enum IndexFiltersMode {
    Default = "DEFAULT",
    Filtering = "FILTERING",
    EditingColumns = "EDITING_COLUMNS"
}

declare interface IndexFiltersPrimaryAction {
    type: 'save' | 'save-as' | 'cancel';
    onAction: (name: string) => Promise<boolean>;
    disabled?: boolean;
    loading?: boolean;
}

declare interface IndexFiltersProps extends Omit<FiltersProps, 'focused' | 'disableQueryField' | 'disableFilters'>, Pick<TabsProps, 'tabs' | 'selected'> {
    /** The available sorting choices. If not present, the sort button will not show */
    sortOptions?: SortButtonChoice[];
    /** The currently selected sort choice. Required if using sorting */
    sortSelected?: string[];
    /** The primary action to display  */
    primaryAction?: IndexFiltersPrimaryAction;
    /** The cancel action to display */
    cancelAction?: IndexFiltersCancelAction;
    /** The current mode of the IndexFilters component. Used to determine which view to show */
    mode: IndexFiltersMode;
    /** Override z-index of popovers and tooltips */
    disclosureZIndexOverride?: number;
    /** Will disable all the elements within the IndexFilters component */
    disabled?: boolean;
    /** Will disable just the query field */
    disableQueryField?: boolean;
    /** If true, the sticky interaction on smaller devices will be disabled */
    disableStickyMode?: boolean;
    /** If the component should go flush to the top of the page when sticking */
    isFlushWhenSticky?: boolean;
    /** Whether the index supports creating new views */
    canCreateNewView?: boolean;
    /** Optional override to the default aria-label for the button that toggles the filtering mode */
    filteringAccessibilityLabel?: string;
    /** Optional override to the default Tooltip message for the button that toggles the filtering mode */
    filteringAccessibilityTooltip?: string;
    /** Whether the filter should close when clicking inside another Popover. */
    closeOnChildOverlayClick?: boolean;
    /** Optional override to the default keyboard shortcuts available. Should be set to true for all instances
     * of this component not controlling a root-level index */
    disableKeyboardShortcuts?: boolean;
    /** Whether to display the edit columns button with the other default mode filter actions */
    showEditColumnsButton?: boolean;
    /** Whether or not to auto-focus the search field when it renders */
    autoFocusSearchField?: boolean;
}

export declare const IndexProvider: DefineComponent<__VLS_WithDefaults_23<__VLS_TypePropsToRuntimeProps_53<IndexProviderProps>, {
    selectedItemsCount: number;
    selectable: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_23<__VLS_TypePropsToRuntimeProps_53<IndexProviderProps>, {
    selectedItemsCount: number;
    selectable: boolean;
}>>>, {
    selectedItemsCount: "All" | number;
    selectable: boolean;
}, {}>;

declare type IndexProviderProps = {
    selectable?: boolean;
    itemCount: number;
    selectedItemsCount?: 'All' | number;
    resourceName?: {
        singular: string;
        plural: string;
    };
    loading?: boolean;
    hasMoreItems?: boolean;
    condensed?: boolean;
    onSelectionChange?(selectionType: SelectionType, toggleType: boolean, selection?: string | Range_2, position?: number): void;
    paginatedSelectAllText?: string;
};

export declare const IndexTable: __VLS_WithTemplateSlots_34<typeof __VLS_component_33, ReturnType<typeof __VLS_template_33>>;

declare type IndexTableBaseProps = {
    headings: IndexTableHeading[];
    promotedBulkActions?: BulkActionsProps['promotedActions'];
    bulkActions?: BulkActionsProps['actions'];
    paginatedSelectAllActionText?: string;
    paginatedSelectAllText?: string;
    lastColumnSticky?: boolean;
    selectable?: boolean;
    /** List of booleans, which maps to whether sorting is enabled or not for each column. Defaults to false for all columns.  */
    sortable?: boolean[];
    /**
     * The direction to sort the table rows on first click or keypress of a sortable column heading. Defaults to descending.
     * @default 'descending'
     */
    defaultSortDirection?: IndexTableSortDirection;
    /** The current sorting direction. */
    sortDirection?: IndexTableSortDirection;
    /**
     * The index of the heading that the table rows are sorted by.
     */
    sortColumnIndex?: number;
    /** Optional dictionary of sort toggle labels for each sortable column, with ascending and descending label,
     * with the key as the index of the column */
    sortToggleLabels?: IndexTableSortToggleLabels;
    /** Add zebra striping to table rows */
    hasZebraStriping?: boolean;
    /** Properties to enable pagination at the bottom of the table. */
    pagination?: Omit<PaginationProps, 'type'>;
};

export declare const IndexTableCell: __VLS_WithTemplateSlots_36<typeof __VLS_component_35, ReturnType<typeof __VLS_template_35>>;

declare type IndexTableHeading = IndexTableHeadingTitleString | IndexTableHeadingTitleNode;

declare type IndexTableHeadingBase = {
    id?: string;
    /**
     * Adjust horizontal alignment of header content.
     * @default 'start'
     */
    alignment?: 'start' | 'center' | 'end';
    flush?: boolean;
    new?: boolean;
    hidden?: boolean;
    tooltipContent?: VueNode;
    tooltipWidth?: Width;
    tooltipPersistsOnClick?: boolean;
    /**
     * The direction to sort the table rows on first click or keypress of this column heading.
     * When not specified, the value from IndexTable.defaultSortDirection will be used.
     */
    defaultSortDirection?: IndexTableSortDirection;
    /** Horizontal end spacing around title. Accepts a spacing token. */
    paddingBlockEnd?: SpaceScale;
};

declare interface IndexTableHeadingTitleNode extends IndexTableHeadingBase {
    title: VueNode;
    id: string;
}

declare interface IndexTableHeadingTitleString extends IndexTableHeadingBase {
    title: string;
    id?: string;
}

declare type IndexTableProps = IndexTableBaseProps & IndexProviderProps;

export declare const IndexTableRow: __VLS_WithTemplateSlots_35<typeof __VLS_component_34, ReturnType<typeof __VLS_template_34>>;

declare type IndexTableSlots = {
    default: (_: VueNode) => VNode[];
    emptyState: (_: VueNode) => VNode[];
    sort: (_?: VueNode) => VNode[];
};

declare type IndexTableSortDirection = 'ascending' | 'descending';

declare type IndexTableSortToggleLabel = {
    [key in IndexTableSortDirection]: string;
};

declare interface IndexTableSortToggleLabels {
    [key: number]: IndexTableSortToggleLabel;
}

export declare const Indicator: DefineComponent<__VLS_WithDefaults_27<__VLS_TypePropsToRuntimeProps_57<IndicatorProps>, {
    pulse: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_27<__VLS_TypePropsToRuntimeProps_57<IndicatorProps>, {
    pulse: boolean;
}>>>, {
    pulse: boolean;
}, {}>;

declare interface IndicatorProps {
    pulse?: boolean;
}

declare type InlineAlign = 'start' | 'center' | 'end' | 'baseline' | 'stretch';

export declare const InlineError: DefineComponent<__VLS_TypePropsToRuntimeProps_58<InlineErrorProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_58<InlineErrorProps>>>, {}, {}>;

declare interface InlineErrorProps {
    /** Content briefly explaining how to resolve the invalid form field input. */
    message: Error_2;
    /** Unique identifier of the invalid form field that the message describes */
    fieldId: string;
}

export declare const InlineGrid: __VLS_WithTemplateSlots_37<typeof __VLS_component_36, ReturnType<typeof __VLS_template_36>>;

declare type InlineGridAlignItems = 'start' | 'end' | 'center';

declare interface InlineGridProps {
    /** The number of columns to display. Accepts either a single value or an object of values for different screen sizes.
     * @example
     * columns={6}
     * columns={{xs: 1, sm: 2, md: 3, lg: 4, xl: 6}}
     */
    columns?: Columns_3;
    /** The spacing between children. Accepts a spacing token or an object of spacing tokens for different screen sizes.
     * @example
     * gap='200'
     * gap={{xs: '100', sm: '200', md: '300', lg: '400', xl: '500'}}
     */
    gap?: Gap_4;
    /** Vertical alignment of children. If not set, inline elements will stretch to the height of the parent.
     * @example
     * alignItems='start'
     */
    alignItems?: InlineGridAlignItems;
}

declare type InlineGridSlots = {
    default: (_: VueNode) => any;
};

export declare const InlineIconBanner: __VLS_WithTemplateSlots_10<typeof __VLS_component_10, ReturnType<typeof __VLS_template_10>>;

export declare const InlineStack: __VLS_WithTemplateSlots_38<typeof __VLS_component_37, ReturnType<typeof __VLS_template_37>>;

declare interface InlineStackProps {
    /** HTML Element type
     * @default 'div'
     */
    as?: Element_4;
    /** Horizontal alignment of children */
    align?: Align_2;
    /** Horizontal direction in which children are laid out */
    direction?: Direction;
    /** Vertical alignment of children */
    blockAlign?: BlockAlign;
    /** The spacing between elements. Accepts a spacing token or an object of spacing tokens for different screen sizes.
     * @example
     * gap='200'
     * gap={{xs: '200', sm: '300', md: '400', lg: '500', xl: '600'}}
     */
    gap?: Gap_5;
    /** Wrap stack elements to additional rows as needed on small screens
     * @default true
     */
    wrap?: boolean;
}

declare type InlineStackSlots = {
    default: (_: VueNode) => any;
};

export declare const Item: __VLS_WithTemplateSlots_2<typeof __VLS_component_2, ReturnType<typeof __VLS_template_2>>;

declare interface Item_2 {
    /** Set the color of the icon and title for the given item. */
    status?: 'critical' | 'warning';
    /** Icon displayed by the list item */
    icon?: IconProps['source'];
    /** Text displayed beside the icon */
    title?: string;
    /** Text displayed for the item */
    description?: Description;
    /** Should the description be truncated at end of line */
    truncate?: boolean;
}

declare interface ItemProps {
    buttonElm: Element | any;
}

declare enum Key {
    Backspace = 8,
    Tab = 9,
    Enter = 13,
    Shift = 16,
    Ctrl = 17,
    Alt = 18,
    Pause = 19,
    CapsLock = 20,
    Escape = 27,
    Space = 32,
    PageUp = 33,
    PageDown = 34,
    End = 35,
    Home = 36,
    LeftArrow = 37,
    UpArrow = 38,
    RightArrow = 39,
    DownArrow = 40,
    Insert = 45,
    Delete = 46,
    Key0 = 48,
    Key1 = 49,
    Key2 = 50,
    Key3 = 51,
    Key4 = 52,
    Key5 = 53,
    Key6 = 54,
    Key7 = 55,
    Key8 = 56,
    Key9 = 57,
    KeyA = 65,
    KeyB = 66,
    KeyC = 67,
    KeyD = 68,
    KeyE = 69,
    KeyF = 70,
    KeyG = 71,
    KeyH = 72,
    KeyI = 73,
    KeyJ = 74,
    KeyK = 75,
    KeyL = 76,
    KeyM = 77,
    KeyN = 78,
    KeyO = 79,
    KeyP = 80,
    KeyQ = 81,
    KeyR = 82,
    KeyS = 83,
    KeyT = 84,
    KeyU = 85,
    KeyV = 86,
    KeyW = 87,
    KeyX = 88,
    KeyY = 89,
    KeyZ = 90,
    LeftMeta = 91,
    RightMeta = 92,
    Select = 93,
    Numpad0 = 96,
    Numpad1 = 97,
    Numpad2 = 98,
    Numpad3 = 99,
    Numpad4 = 100,
    Numpad5 = 101,
    Numpad6 = 102,
    Numpad7 = 103,
    Numpad8 = 104,
    Numpad9 = 105,
    Multiply = 106,
    Add = 107,
    Subtract = 109,
    Decimal = 110,
    Divide = 111,
    F1 = 112,
    F2 = 113,
    F3 = 114,
    F4 = 115,
    F5 = 116,
    F6 = 117,
    F7 = 118,
    F8 = 119,
    F9 = 120,
    F10 = 121,
    F11 = 122,
    F12 = 123,
    NumLock = 144,
    ScrollLock = 145,
    Semicolon = 186,
    Equals = 187,
    Comma = 188,
    Dash = 189,
    Period = 190,
    ForwardSlash = 191,
    GraveAccent = 192,
    OpenBracket = 219,
    BackSlash = 220,
    CloseBracket = 221,
    SingleQuote = 222
}

export declare const KeyboardKey: __VLS_WithTemplateSlots_39<typeof __VLS_component_38, ReturnType<typeof __VLS_template_38>>;

declare interface KeyboardKeyProps {
    size?: Size_3;
}

declare type KeyEvent = 'keydown' | 'keyup';

export declare const KeypressListener: DefineComponent<__VLS_WithDefaults_29<__VLS_TypePropsToRuntimeProps_62<KeypressListenerProps>, {
    keyEvent: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_29<__VLS_TypePropsToRuntimeProps_62<NonMutuallyExclusiveProps_2 & {
    useCapture?: boolean;
    options?: undefined;
}>, {
    keyEvent: string;
}>>> | Readonly<ExtractPropTypes<__VLS_WithDefaults_29<__VLS_TypePropsToRuntimeProps_62<NonMutuallyExclusiveProps_2 & {
    useCapture?: undefined;
    options?: AddEventListenerOptions;
}>, {
    keyEvent: string;
}>>>, {
    keyEvent: KeyEvent;
} | {
    keyEvent: KeyEvent;
}, {}>;

declare type KeypressListenerProps = NonMutuallyExclusiveProps_2 & ({
    useCapture?: boolean;
    options?: undefined;
} | {
    useCapture?: undefined;
    options?: AddEventListenerOptions;
});

export declare const Label: __VLS_WithTemplateSlots_40<typeof __VLS_component_39, ReturnType<typeof __VLS_template_39>>;

export declare const Labelled: __VLS_WithTemplateSlots_41<typeof __VLS_component_40, ReturnType<typeof __VLS_template_40>>;

declare interface LabelledProps {
    /** A unique identifier for the label */
    id: LabelProps['id'];
    /** Error to display beneath the label */
    error?: Error_2 | boolean;
    /** An action */
    action?: Action;
    /** Additional hint text to display */
    labelHidden?: boolean;
    /** Visual required indicator for the label */
    requiredIndicator?: boolean;
    /** Labels signify a disabled control */
    disabled?: boolean;
    /** Labels signify a readOnly control */
    readOnly?: boolean;
}

declare type LabelProps = {
    /** A unique identifier for the label */
    id: string;
    /** Visually hide the label */
    hidden?: boolean;
    /** Visual required indicator for the label */
    requiredIndicator?: boolean;
};

export declare const Layout: __VLS_WithTemplateSlots_42<typeof __VLS_component_41, ReturnType<typeof __VLS_template_41>>;

export declare const LayoutAnnotatedSection: __VLS_WithTemplateSlots_43<typeof __VLS_component_42, ReturnType<typeof __VLS_template_42>>;

declare type LayoutProps = {
    /** Automatically adds sections to layout. */
    sectioned?: boolean;
};

export declare const LayoutSection: DefineComponent<__VLS_TypePropsToRuntimeProps_66<SectionProps_2>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_66<SectionProps_2>>>, {}, {}>;

export declare const LegacyCard: DefineComponent<__VLS_WithDefaults_30<__VLS_TypePropsToRuntimeProps_68<LegacyCardProps>, {
    footerActionAlignment: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_30<__VLS_TypePropsToRuntimeProps_68<LegacyCardProps>, {
    footerActionAlignment: string;
}>>>, {
    footerActionAlignment: "right" | "left";
}, {}>;

export declare const LegacyCardHeader: DefineComponent<__VLS_TypePropsToRuntimeProps_69<LegacyCardHeaderProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_69<LegacyCardHeaderProps>>>, {}, {}>;

declare interface LegacyCardHeaderProps {
    title?: string;
    actions?: DisableableAction[];
}

declare interface LegacyCardProps {
    /** Title content for the card */
    title?: string;
    /** A less prominent card */
    subdued?: boolean;
    /** Auto wrap content in section */
    sectioned?: boolean;
    /** Card header actions */
    actions?: DisableableAction[];
    /** Primary action in the card footer */
    primaryFooterAction?: ComplexAction_2;
    /** Secondary actions in the card footer */
    secondaryFooterActions?: ComplexAction_2[];
    /** The content of the disclosure button rendered when there is more than one secondary footer action */
    secondaryFooterActionsDisclosureText?: string;
    /** Alignment of the footer actions on the card, defaults to right */
    footerActionAlignment?: 'right' | 'left';
    /** Allow the card to be hidden when printing */
    hideOnPrint?: boolean;
}

export declare const LegacyCardSection: DefineComponent<__VLS_TypePropsToRuntimeProps_70<LegacyCardSectionProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_70<LegacyCardSectionProps>>>, {}, {}>;

declare interface LegacyCardSectionProps {
    title?: string;
    subdued?: boolean;
    flush?: boolean;
    fullWidth?: boolean;
    /** Allow the card to be hidden when printing */
    hideOnPrint?: boolean;
    actions?: ComplexAction_2[];
}

export declare const LegacyCardSubsection: __VLS_WithTemplateSlots_44<typeof __VLS_component_43, ReturnType<typeof __VLS_template_43>>;

declare interface LegacyItemProps {
    /** Fill the remaining horizontal space in the stack with the item  */
    fill?: boolean;
}

export declare const LegacyStack: __VLS_WithTemplateSlots_45<typeof __VLS_component_44, ReturnType<typeof __VLS_template_44>>;

export declare const LegacyStackItem: __VLS_WithTemplateSlots_46<typeof __VLS_component_45, ReturnType<typeof __VLS_template_45>>;

declare interface LegacyStackProps {
    /** Wrap stack elements to additional rows as needed on small screens (Defaults to true) */
    wrap?: boolean;
    /** Stack the elements vertically */
    vertical?: boolean;
    /** Adjust spacing between elements */
    spacing?: Spacing_5;
    /** Adjust vertical alignment of elements */
    alignment?: Alignment;
    /** Adjust horizontal alignment of elements */
    distribution?: Distribution;
    /** No wrap all stack elements with StackItem  */
    noItemWrap?: boolean;
}

declare type LineStyles = 'solid' | 'dashed';

export declare const Link: __VLS_WithTemplateSlots_47<typeof __VLS_component_46, ReturnType<typeof __VLS_template_46>>;

declare interface LinkAction {
    /** A unique identifier for the action */
    id?: string;
    /** Content the action displays */
    content?: string;
    /** Visually hidden text for screen readers */
    accessibilityLabel?: string;
    /** A destination to link to */
    url: string;
}

declare type LinkLikeComponent = Component<LinkLikeComponentProps>;

/**
 * Explain about usage of React.Props<HTMLAnchorElement>
 *
 * React.HTMLProps<HTMLAnchorElement> is a TypeScript type used in React to
 * specify that a component will accept all standard HTML attributes of an <a> tag (HTMLAnchorElement).
 * This allows you to pass any HTML attribute that a regular <a> tag would accept
 * (like href, target, download, etc.) to your component, as well as React-specific attributes like key and ref.
 */
/**
 * In React version this interface extends React.HTMLProps<HTMLAnchorElement>
 * but in Vue version we don't need to extend any interface because we can use
 * useAttrs method
 */
declare type LinkLikeComponentProps = {
    /** The url to link to */
    url: string;
    /** Makes the link open in a new tab */
    external?: boolean;
    /** Where to display the url */
    target?: Target;
    /** Makes the browser download the url instead of opening it. Provides a hint for the downloaded filename if it is a string value. */
    download?: string | boolean;
    [key: string]: any;
};

declare type LinkProps = {
    /** ID for the link */
    id?: string;
    /** The url to link to */
    url?: string;
    /**
     * Router link 'to' option, if this prop is provided router-link component will be render
     * <a href="https://router.vuejs.org/api/interfaces/RouterLinkProps.html#to" target="blank"> details </a>
     */
    to?: RouteLocationRaw;
    /** Makes the link open in a new tab
     * @deprecated use `target` set to `_blank` instead
     */
    external?: boolean;
    /** Where to display the url */
    target?: Target;
    /** Makes the link color the same as the current text color and adds an underline */
    monochrome?: boolean;
    /** Removes text decoration underline to the link */
    removeUnderline?: boolean;
    /** Descriptive text to be read to screenreaders */
    accessibilityLabel?: string;
    /** Indicates whether or not the link is the primary navigation link when rendered inside of an `IndexTable.Row` */
    dataPrimaryLink?: boolean;
};

export declare const List: __VLS_WithTemplateSlots_48<typeof __VLS_component_47, ReturnType<typeof __VLS_template_47>>;

export declare const Listbox: __VLS_WithTemplateSlots_49<typeof __VLS_component_48, ReturnType<typeof __VLS_template_48>>;

export declare const ListboxAction: DefineComponent<__VLS_TypePropsToRuntimeProps_76<ActionProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_76<ActionProps>>>, {}, {}>;

export declare const ListboxHeader: DefineComponent<    {}, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<    {}>>, {}, {}>;

export declare const ListboxLoading: DefineComponent<__VLS_TypePropsToRuntimeProps_77<LoadingProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_77<LoadingProps>>>, {}, {}>;

export declare const ListboxOption: __VLS_WithTemplateSlots_50<typeof __VLS_component_49, ReturnType<typeof __VLS_template_49>>;

declare interface ListBoxProps {
    /** Indicates the default active option in the list. Patterns that support option creation should default the active option to the first option.
     * @default FIRST_SELECTED
     */
    autoSelection?: AutoSelection;
    /** Explicitly enable keyboard control */
    enableKeyboardControl?: boolean;
    /** Visually hidden text for screen readers */
    accessibilityLabel?: string;
    /** Provide a custom ID for the list element */
    customListId?: string;
}

export declare const ListboxSection: __VLS_WithTemplateSlots_51<typeof __VLS_component_50, ReturnType<typeof __VLS_template_50>>;

export declare const ListboxTextOption: DefineComponent<    {
    modelValue: PropType<boolean>;
    selected: {
        type: PropType<boolean>;
    };
    disabled: {
        type: PropType<boolean>;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<    {
    modelValue: PropType<boolean>;
    selected: {
        type: PropType<boolean>;
    };
    disabled: {
        type: PropType<boolean>;
    };
}>>, {}, {}>;

export declare const ListItem: DefineComponent<    {}, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<    {}>>, {}, {}>;

declare interface ListProps {
    /**
     * Determines the space between list items
     * @default 'loose'
     */
    gap?: Spacing_6;
    /**
     * Type of list to display
     * @default 'bullet'
     */
    type?: Type;
}

declare interface ListSlots {
    /** List item elements */
    default?: (_?: VueNode) => VNode[];
}

declare interface LoadableAction extends Action {
    /** Should a spinner be displayed */
    loading?: boolean;
}

declare interface LoadingProps {
    accessibilityLabel: string;
}

declare interface LocationAsRelativeRaw {
    name?: RouteRecordName;
    params?: RouteParamsRaw;
}

declare type LocationQueryRaw = Record<string | number, LocationQueryValueRaw | LocationQueryValueRaw[]>;

declare type LocationQueryValue = string | null;

declare type LocationQueryValueRaw = LocationQueryValue | number | undefined;

declare interface MatcherLocationAsPath {
    path: string;
}

export declare const MediaCard: __VLS_WithTemplateSlots_52<typeof __VLS_component_51, ReturnType<typeof __VLS_template_51>>;

declare interface MediaCardProps {
    /** Body content */
    description: string;
    /** Main call to action, rendered as a basic button */
    primaryAction?: ComplexAction_2;
    /** Secondary call to action, rendered as a plain button */
    secondaryAction?: ComplexAction_2;
    /** Action list items to render in ellipsis popover */
    popoverActions?: ActionListItemDescriptor[];
    /** Whether or not card content should be laid out vertically
     * @default false
     */
    portrait?: boolean;
    /** Size of the visual media in the card
     * @default 'medium'
     */
    size?: Size_4;
    /** Heading content. */
    title?: string;
}

declare interface MenuActionDescriptor extends ComplexAction_2, TooltipAction {
    /** Zero-indexed numerical position. Overrides the action's order in the menu */
    index?: number;
}

declare interface MenuActionDescriptor extends ComplexAction_2 {
    /** Zero-indexed numerical position. Overrides the action's order in the menu */
    index?: number;
}

declare interface MenuGroupDescriptor extends BadgeAction {
    /** Menu group title */
    title: string;
    /** List of actions */
    actions: ActionListItemDescriptor[];
    /** Icon to display */
    icon?: IconableAction['icon'];
    /** Action details */
    details?: VueNode;
    /** Disables action button */
    disabled?: boolean;
    /** Zero-indexed numerical position. Overrides the group's order in the menu. */
    index?: number;
    /** Callback when any action takes place */
    onActionAnyItem?: ActionListItemDescriptor['onAction'];
    /** Callback when the menu is clicked */
    onClick?(openActions: () => void): void;
}

declare interface MenuGroupDescriptor extends BadgeAction {
    /** Menu group title */
    title: string;
    /** List of actions */
    actions: ActionListItemDescriptor[];
    /** Icon to display */
    icon?: IconableAction['icon'];
    /** Disables action button */
    disabled?: boolean;
    /** Zero-indexed numerical position. Overrides the group's order in the menu. */
    index?: number;
}

declare type Method = 'post' | 'get' | 'action';

export declare const Modal: __VLS_WithTemplateSlots_53<typeof __VLS_component_52, ReturnType<typeof __VLS_template_52>>;

declare interface ModalProps {
    /** Whether the modal is open or not */
    open: boolean;
    /** The url that will be loaded as the content of the modal */
    src?: string;
    /** The name of the modal content iframe */
    iframeName?: string;
    /**
     * Hide the title in the modal
     * @default false
     */
    titleHidden?: boolean;
    /** Automatically adds sections to modal */
    sectioned?: boolean;
    /** The size of the modal */
    size?: ModalSize;
    /** Limits modal height on large screens with scrolling */
    limitHeight?: boolean;
    /** Replaces modal content with a spinner while a background action is being performed */
    loading?: boolean;
    /** Removes Scrollable container from the modal content */
    noScroll?: boolean;
    /** Click or tap the area outside to close the modal */
    clickOutsideToClose?: boolean;
    /** Primary action */
    primaryAction?: ComplexAction_2;
    /** Collection of secondary actions */
    secondaryActions?: ComplexAction_2[];
}

export declare const ModalSection: DefineComponent<__VLS_WithDefaults_38<__VLS_TypePropsToRuntimeProps_81<SectionProps_4>, {
    flush: boolean;
    subdued: boolean;
    titleHidden: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_38<__VLS_TypePropsToRuntimeProps_81<SectionProps_4>, {
    flush: boolean;
    subdued: boolean;
    titleHidden: boolean;
}>>>, {
    subdued: boolean;
    flush: boolean;
    titleHidden: boolean;
}, {}>;

declare type ModalSize = 'small' | 'large' | 'fullScreen';

declare type ModalSlots = {
    /** The element or the RefObject that activates the Modal */
    activator: (_VueNode: VueNode) => null;
    /** The content for the title of the modal */
    title: (_: VueNode) => null;
    /** The content to display inside modal */
    default: (_: VueNode) => null;
    /** Inner content of the footer */
    footer: (_: VueNode) => null;
};

declare interface NonMutuallyExclusiveProps {
    /** Colors and labels the badge with the given tone. */
    tone?: Tone;
    /** Render a pip showing the progress of a given task. */
    progress?: Progress;
    /** Icon to display to the left of the badge’s content. */
    icon?: IconSource;
    /**
     * @default 'medium'
     */
    size?: Size_2;
    /** Pass a custom accessibilityLabel */
    toneAndProgressLabelOverride?: string;
}

declare type NonMutuallyExclusiveProps_2 = {
    keyCode: Key;
    handler(event: KeyboardEvent): void;
    keyEvent?: KeyEvent;
};

declare interface OptionDescriptor {
    /** Value of the option */
    value: string;
    /** Whether the option is disabled or not */
    disabled?: boolean;
    /** Whether the option is active or not */
    active?: boolean;
    /** Unique identifier for the option */
    id?: string;
    /** Display label for the option */
    label: string;
    /** Media to display to the left of the option content */
    media?: VueNode;
}

export declare const OptionList: __VLS_WithTemplateSlots_54<typeof __VLS_component_53, ReturnType<typeof __VLS_template_53>>;

declare interface OptionListProps {
    /** A unique identifier for the option list */
    id?: string;
    /** List title */
    title?: string;
    /** Collection of options to be listed */
    options?: OptionDescriptor[];
    /** Defines a specific role attribute for the list itself */
    role?: 'listbox' | 'combobox' | BoxProps['role'];
    /** Defines a specific role attribute for each option in the list */
    optionRole?: string;
    /** Sections containing a header and related options */
    sections?: SectionDescriptor[];
    /** The selected options */
    selected: string[];
    /** Allow more than one option to be selected */
    allowMultiple?: boolean;
    /** Vertically align child content to the center, top, or bottom.  */
    verticalAlign?: Alignment_2;
}

declare interface OutlineableAction extends Action {
    /** Should action be displayed as an outlined button */
    outline?: boolean;
}

declare type Overflow = 'hidden' | 'scroll' | 'clip';

declare interface OverlayDetails {
    left?: number;
    right?: number;
    desiredHeight: number;
    positioning: Positioning;
    measuring: boolean;
    activatorRect: Rect;
    chevronOffset: number;
}

declare type Padding = 'default' | Extract<SpaceScale, '400'>;

export declare const Page: __VLS_WithTemplateSlots_55<typeof __VLS_component_54, ReturnType<typeof __VLS_template_54>>;

export declare const PageActions: __VLS_WithTemplateSlots_56<typeof __VLS_component_55, ReturnType<typeof __VLS_template_55>>;

declare type PageActionsProps = {
    /** The primary action for the page */
    primaryAction?: DisableableAction & LoadableAction;
    /** The secondary actions for the page */
    secondaryActions?: ComplexAction_2[];
};

declare type PageActionsSlots = {
    primaryAction: (_: VueNode) => VNode[];
    secondaryActions: (_: VueNode) => VNode[];
};

declare interface PageProps extends HeaderProps {
    /** Remove the normal max-width on the page */
    fullWidth?: boolean;
    /** Decreases the maximum layout width. Intended for single-column layouts */
    narrowWidth?: boolean;
}

declare interface PageSlots {
    /** The contents of the page */
    default: (_: VueNode) => any;
    /** Important and non-interactive status information shown immediately after the title. */
    pageTitle: (_: VueNode) => any;
    /** Collection of secondary page-level actions */
    secondaryActions: (_: VueNode) => any;
    /** Primary page-level action */
    primaryAction: (_: VueNode) => any;
    /** Additional meta data */
    additionalMetadata: (_: VueNode) => any;
    /** Label for page-level pagination */
    pagination: (_: VueNode) => any;
}

export declare const Pagination: __VLS_WithTemplateSlots_57<typeof __VLS_component_56, ReturnType<typeof __VLS_template_56>>;

declare type PaginationProps = {
    /** Keyboard shortcuts for the next button */
    nextKeys?: Key[];
    /** Keyboard shortcuts for the previous button */
    previousKeys?: Key[];
    /** Tooltip for the next button */
    nextTooltip?: string;
    /** Tooltip for the previous button */
    previousTooltip?: string;
    /** The URL of the next page */
    nextURL?: string;
    /** The URL of the previous page */
    previousURL?: string;
    /** Whether there is a next page to show */
    hasNext?: boolean;
    /** Whether there is a previous page to show */
    hasPrevious?: boolean;
    /** Accessible label for the pagination */
    accessibilityLabel?: string;
    /** Accessible labels for the buttons and UnstyledLinks */
    accessibilityLabels?: AccessibilityLabels;
    /** Layout structure of the component */
    type?: "page" | "table";
};

declare type PaginationSlots = {
    /** Text to provide more context in between the arrow buttons */
    default: (_: VueNode) => VNode[];
};

export declare const Pane: __VLS_WithTemplateSlots_59<typeof __VLS_component_58, ReturnType<typeof __VLS_template_58>>;

declare type PaneProps = {
    /** Fix the pane to the top of the popover */
    fixed?: boolean;
    /** Automatically wrap children in padded sections */
    sectioned?: boolean;
    /** Sets a fixed height on the Scrollable */
    height?: string;
    /** Sets maxHeight on the Scrollable */
    maxHeight?: string;
    /** Sets minHeight on the Scrollable */
    minHeight?: string;
    /**
     * Prevents page scrolling when the end of the scrollable Popover content is reached
     * @default false
     */
    captureOverscroll?: boolean;
    /**
     * Sets a subdued background to the pane
     * @default false
     */
    subdued?: boolean;
};

declare type PaneSlots = {
    /** Default slot */
    default: (_?: VueNode) => any;
};

declare interface PlainAction extends Action {
    /** Should action be displayed as a plain link */
    plain?: boolean;
}

declare interface Point {
    x: number;
    y: number;
}

declare const PolarisVue: {
    install(Vue: App): void;
};
export default PolarisVue;

export declare const Popover: __VLS_WithTemplateSlots_58<typeof __VLS_component_57, ReturnType<typeof __VLS_template_57>>;

declare type PopoverAutofocusTarget = 'none' | 'first-node' | 'container';

declare enum PopoverCloseSource {
    Click = 0,
    EscapeKeypress = 1,
    FocusOut = 2,
    ScrollOut = 3
}

export declare const PopoverOverlay: DefineComponent<__VLS_WithDefaults_41<__VLS_TypePropsToRuntimeProps_87<PopoverOverlayProps>, {
    preferredPosition: string;
    preferredAlignment: string;
    preferInputActivator: boolean;
}>, {
    forceUpdatePosition: typeof forceUpdatePosition;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    close: (event: PopoverCloseSource) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_41<__VLS_TypePropsToRuntimeProps_87<PopoverOverlayProps>, {
    preferredPosition: string;
    preferredAlignment: string;
    preferInputActivator: boolean;
}>>> & {
    onClose?: ((event: PopoverCloseSource) => any) | undefined;
}, {
    preferredPosition: PreferredPosition;
    preferredAlignment: PreferredAlignment;
    preferInputActivator: boolean;
}, {}>;

declare type PopoverOverlayProps = {
    fullWidth?: boolean;
    fullHeight?: boolean;
    fluidContent?: boolean;
    preferredPosition?: PositionedOverlayProps['preferredPosition'];
    preferredAlignment?: PositionedOverlayProps['preferredAlignment'];
    active: boolean;
    id: string;
    zIndexOverride?: number;
    activator: HTMLElement;
    preferInputActivator?: PositionedOverlayProps['preferInputActivator'];
    sectioned?: boolean;
    fixed?: boolean;
    hideOnPrint?: boolean;
    autofocusTarget?: PopoverAutofocusTarget;
    preventCloseOnChildOverlayClick?: boolean;
    captureOverscroll?: boolean;
};

export declare type PopoverProps = {
    /** The preferred direction to open the popover */
    preferredPosition?: PopoverOverlayProps['preferredPosition'];
    /** The preferred alignment of the popover relative to its activator */
    preferredAlignment?: PopoverOverlayProps['preferredAlignment'];
    /** Show or hide the Popover */
    active: boolean;
    /**
     * Use the activator's input element to calculate the Popover position
     * @default true
     */
    preferInputActivator?: PopoverOverlayProps['preferInputActivator'];
    /**
     * The element type to wrap the activator with
     * @default 'div'
     */
    activatorWrapper?: string;
    /** Override on the default z-index of 400 */
    zIndexOverride?: number;
    /** Prevents focusing the activator or the next focusable element when the popover is deactivated */
    preventFocusOnClose?: boolean;
    /** Automatically add wrap content in a section */
    sectioned?: boolean;
    /** Allow popover to stretch to the full width of its activator */
    fullWidth?: boolean;
    /** Allow popover to stretch to fit content vertically */
    fullHeight?: boolean;
    /** Allow popover content to determine the overlay width and height */
    fluidContent?: boolean;
    /** Remains in a fixed position */
    fixed?: boolean;
    /** Used to illustrate the type of popover element */
    ariaHaspopup?: boolean | 'false' | 'true' | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog' | undefined;
    /** Allow the popover overlay to be hidden when printing */
    hideOnPrint?: boolean;
    /**
     * The preferred auto focus target defaulting to the popover container
     * @default 'container'
     */
    autofocusTarget?: PopoverAutofocusTarget;
    /** Prevents closing the popover when other overlays are clicked */
    preventCloseOnChildOverlayClick?: boolean;
    /**
     * Prevents page scrolling when the end of the scrollable Popover overlay content is reached - applied to Pane subcomponent
     * @default false
     */
    captureOverscroll?: boolean;
};

export declare const PopoverSection: DefineComponent<    {}, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<    {}>>, {}, {}>;

export declare const Portal: DefineComponent<__VLS_TypePropsToRuntimeProps_89<PortalProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "portal-created": () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_89<PortalProps>>> & {
    "onPortal-created"?: (() => any) | undefined;
}, {}, {}>;

declare type PortalProps = {
    idPrefix?: string;
};

declare type Position = 'relative' | 'absolute' | 'fixed' | 'sticky';

export declare const PositionedOverlay: __VLS_WithTemplateSlots_60<typeof __VLS_component_59, ReturnType<typeof __VLS_template_59>>;

declare type PositionedOverlayProps = {
    active: boolean;
    activator: HTMLElement;
    preferInputActivator?: boolean;
    preferredPosition?: PreferredPosition;
    preferredAlignment?: PreferredAlignment;
    fullWidth?: boolean;
    fixed?: boolean;
    preventInteraction?: boolean;
    classNames?: string;
    zIndexOverride?: number;
};

declare type PositionedOverlaySlots = {
    default: (_?: VueNode) => any;
};

declare type Positioning = 'above' | 'below' | 'cover';

declare type PreferredAlignment = 'left' | 'center' | 'right';

declare type PreferredPosition = 'above' | 'below' | 'mostSpace' | 'cover';

declare interface PrimaryActionType extends DestructableAction, DisableableAction, LoadableAction, IconableAction, TooltipAction {
    /** Provides extra visual weight and identifies the primary action in a set of buttons */
    primary?: boolean;
}

declare type Progress = 'incomplete' | 'partiallyComplete' | 'complete';

export declare const ProgressBar: DefineComponent<__VLS_WithDefaults_43<__VLS_TypePropsToRuntimeProps_91<ProgressBarProps>, {
    progress: number;
    size: string;
    color: string;
    animated: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_43<__VLS_TypePropsToRuntimeProps_91<ProgressBarProps>, {
    progress: number;
    size: string;
    color: string;
    animated: boolean;
}>>>, {
    size: Size_5;
    color: Color_2;
    progress: number;
    animated: boolean;
}, {}>;

declare interface ProgressBarProps {
    /**
     * The progression of certain tasks
     * @default 0
     */
    progress?: number;
    /**
     * Size of progressbar
     * @default 'medium'
     */
    size?: Size_5;
    /**
     * Whether the fill animation is triggered
     * @default 'true'
     */
    animated?: boolean;
    /**
     * Id (ids) of element (elements) that describes progressbar
     */
    ariaLabelledBy?: string;
    /**
     * Color of progressbar
     * @default 'highlight'
     */
    color?: Color_2;
}

declare interface Props {
    action: ComplexAction;
    overrides?: Partial<ButtonProps>;
}

declare interface Props_2 {
    trapping?: boolean;
}

export declare const RadioButton: __VLS_WithTemplateSlots_61<typeof __VLS_component_60, ReturnType<typeof __VLS_template_60>>;

declare type RadioButtonSlots = {
    /** Label for the radio button */
    label: (_?: VueNode) => VNode[];
    /** Additional text to aide in use */
    helpText: (_?: VueNode) => VNode[];
};

declare type Range_2 = [number, number];

export declare const RangeSlider: __VLS_WithTemplateSlots_62<typeof __VLS_component_61, ReturnType<typeof __VLS_template_61>>;

declare type RangeSliderSlots = {
    /** Label for the range input */
    label?: (_?: VueNode) => VNode[];
    /** Additional text to aid in use */
    helpText?: (_?: VueNode) => VNode[];
    /** Element to display before the input */
    prefix?: (_?: VueNode) => VNode[];
    /** Element to display after the input */
    suffix?: (_?: VueNode) => VNode[];
};

declare type RangeSliderValue = number | DualValue;

declare class Rect {
    static get zero(): Rect;
    top: number;
    left: number;
    width: number;
    height: number;
    constructor({ top, left, width, height }?: RectConfig);
    get center(): Point;
}

declare interface RectConfig {
    top?: number;
    left?: number;
    width?: number;
    height?: number;
}

declare type ResourceIDResolver<T extends {
    [key: string]: unknown;
}> = (resource: T) => string;

export declare const ResourceItem: DefineComponent<__VLS_WithDefaults_44<__VLS_TypePropsToRuntimeProps_92<ResourceItemProps>, {
    persistActions: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    click: (id: string) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_44<__VLS_TypePropsToRuntimeProps_92<ResourceItemProps>, {
    persistActions: boolean;
}>>> & {
    onClick?: ((id: string) => any) | undefined;
}, {
    persistActions: boolean;
}, {}>;

declare interface ResourceItemProps {
    /** Whether or not interaction is disabled */
    disabled?: boolean;
    /** Visually hidden text for screen readers used for item link*/
    accessibilityLabel?: string;
    /** Individual item name used by various text labels */
    name?: string;
    /** Id of the element the item onClick controls */
    ariaControls?: string;
    /** Tells screen reader the controlled element is expanded */
    ariaExpanded?: boolean;
    /** Unique identifier for the item */
    id: string;
    /** Makes the shortcut actions always visible */
    persistActions?: boolean;
    /** 1 or 2 shortcut actions; must be available on the page linked to by url */
    shortcutActions?: DisableableAction[];
    /** The order the item is rendered */
    sortOrder?: number;
    /** URL for the resource’s details page (required unless onClick is provided) */
    url?: string;
    /** Allows url to open in a new tab */
    external?: boolean;
    /** Adjust vertical alignment of elements */
    verticalAlignment?: Alignment_3;
    /** Prefetched url attribute to bind to the main element being returned */
    dataHref?: string;
}

export declare const ResourceList: __VLS_WithTemplateSlots_63<typeof __VLS_component_62, ReturnType<typeof __VLS_template_62>>;

declare interface ResourceListItemData {
    [data: string]: any;
}

declare type ResourceListPaginationProps = Omit<PaginationProps, 'type'>;

declare interface ResourceListProps<TItemType extends ResourceListItemData = ResourceListItemData> {
    /** Item data; each item is passed to renderItem */
    items: TItemType[];
    /** Whether to remove all padding around the filter controls. Should be true if using Filters, and false if using LegacyFilters.  */
    flushFilters?: boolean;
    /** Name of the resource, such as customers or products */
    resourceName?: {
        singular: string;
        plural: string;
    };
    /** Up to 2 bulk actions that will be given more prominence */
    promotedBulkActions?: BulkActionsProps['promotedActions'];
    /** Actions available on the currently selected items */
    bulkActions?: BulkActionsProps['actions'];
    /** Collection of IDs for the currently selected items */
    selectedItems?: ResourceListSelectedItems;
    /** Whether or not the list has filter(s) applied */
    isFiltered?: boolean;
    /** Renders a Select All button at the top of the list and checkboxes in front of each list item. For use when bulkActions aren't provided. **/
    selectable?: boolean;
    /** Whether or not there are more items than currently set on the items prop. Determines whether or not to set the paginatedSelectAllAction and paginatedSelectAllText props on the BulkActions component. */
    hasMoreItems?: boolean;
    /** Overlays item list with a spinner while a background action is being performed */
    loading?: boolean;
    /** Boolean to show or hide the header */
    showHeader?: boolean;
    /** Total number of resources */
    totalItemsCount?: number;
    /** Current value of the sort control */
    sortValue?: string;
    /** Collection of sort options to choose from */
    sortOptions?: SelectOption[];
    /** Custom header text displayed above the list instead of the resource count. */
    headerContent?: string;
    /** Function to customize the unique ID for each item */
    idForItem?(item: TItemType, index: number): string;
    /** Function to resolve the ids of items */
    resolveItemId?(item: TItemType): string;
    /** Properties to enable pagination at the bottom of the list. */
    pagination?: ResourceListPaginationProps;
}

declare type ResourceListSelectedItems = string[] | 'All';

declare type ResourceListSlots = {
    filterControl?: (_?: VueNode) => VNode[];
    /** The markup to display when no resources exist yet. Renders when set and items is empty. */
    emptyState?: (_?: VueNode) => VNode[];
    /** The markup to display when no results are returned on search or filter of the list. Renders when `filterControl` is set, items are empty, and `emptyState` is not set.
     * @default EmptySearchResult
     */
    emptySearchState?: (_?: VueNode) => VNode[];
    /** Node to display instead of the sort control */
    alternateTool?: (_?: VueNode) => VNode[];
    default?: (_?: VueNode) => VNode[];
};

declare type ResponsiveProp<T> = T | ResponsivePropConfig<T>;

declare type ResponsivePropConfig<T = string> = {
    [Breakpoint in BreakpointsAlias]?: T;
};

/** Route Location that can infer the necessary params based on the name. */
declare interface RouteLocationNamedRaw extends RouteQueryAndHash, LocationAsRelativeRaw, RouteLocationOptions {
}

/**
 * Common options for all navigation methods.
 */
declare interface RouteLocationOptions {
    /**
     * Replace the entry in the history instead of pushing a new entry
     */
    replace?: boolean;
    /**
     * Triggers the navigation even if the location is the same as the current one.
     * Note this will also add a new entry to the history unless `replace: true`
     * is passed.
     */
    force?: boolean;
    /**
     * State to save using the History API. This cannot contain any reactive
     * values and some primitives like Symbols are forbidden. More info at
     * https://developer.mozilla.org/en-US/docs/Web/API/History/state
     */
    state?: HistoryState;
}

/** Route Location that can infer the possible paths. */
declare interface RouteLocationPathRaw extends RouteQueryAndHash, MatcherLocationAsPath, RouteLocationOptions {
}

declare type RouteLocationRaw = string | RouteLocationPathRaw | RouteLocationNamedRaw;

declare type RouteParamsRaw = Record<string, RouteParamValueRaw | Exclude<RouteParamValueRaw, null | undefined>[]>;

declare type RouteParamValue = string;

declare type RouteParamValueRaw = RouteParamValue | number | null | undefined;

declare interface RouteQueryAndHash {
    query?: LocationQueryRaw;
    hash?: string;
}

declare type RouteRecordName = string | symbol;

declare type RowProps = {
    /** A unique identifier for the row */
    id: string;
    /** Whether the row is selected */
    selected?: boolean | 'indeterminate';
    /** The zero-indexed position of the row. Used for Shift key multi-selection */
    position: number;
    /** Whether the row should visually indicate its status with a background color */
    tone?: RowStatus;
    /** Whether the row should be disabled */
    disabled?: boolean;
    /** A tuple array with the first and last index of the range of other rows that this row describes. All rows in the range are selected when the selection range row is selected. */
    selectionRange?: Range_2;
    /**
     * Indicates the relationship or role of the row's contents. A "subheader" row displays the same as the table header. Rows of type "child" are indented.
     *  @default 'data' */
    rowType?: RowType;
    /** Label set on the row's checkbox
     * @default "Select {resourceName}"
     */
    accessibilityLabel?: string;
};

declare type RowSlots = {
    default: (_: VueNode) => VNode[];
};

declare type RowStatus = 'subdued' | 'success' | 'warning' | 'critical';

declare type RowType = 'data' | 'subheader' | 'child';

export declare const Scrollable: __VLS_WithTemplateSlots_64<typeof __VLS_component_63, ReturnType<typeof __VLS_template_63>>;

/**
 * In react version this prop will extends React.HTMLProps<HTMLDivElement>
 * But with Vue we don't need to do that just simple pass the attribute the same way we passing props
 */
declare type ScrollableProps = {
    /** Scroll content vertically
     * @default true
     */
    vertical?: boolean;
    /** Scroll content horizontally
     * @default true
     */
    horizontal?: boolean;
    /** Add a shadow when content is scrollable */
    shadow?: boolean;
    /** Slightly hints content upon mounting when scrollable */
    hint?: boolean;
    /** Adds a tabIndex to scrollable when children are not focusable */
    focusable?: boolean;
    /** Browser determined scrollbar width
     * @default 'thin'
     */
    scrollbarWidth?: 'thin' | 'none' | 'auto';
    /** Adds space to one or both sides to prevent content shift when scrolling is necessary */
    scrollbarGutter?: 'stable' | 'stable both-edges';
};

declare type ScrollableSlot = {
    /** Content inside scrollable */
    default: (_: VueNode) => null;
};

export declare const ScrollLock: DefineComponent<    {}, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<    {}>>, {}, {}>;

export declare const ScrollTo: DefineComponent<    {}, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<    {}>>, {}, {}>;

export declare const SearchField: DefineComponent<    {
    modelValue: PropType<string>;
    focused: {
        type: PropType<boolean>;
    };
    placeholder: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    borderlessQueryField: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    selectedViewName: {
        type: PropType<string>;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    change: (args_0: string) => void;
    clear: () => void;
    blur: () => void;
    focus: () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<    {
    modelValue: PropType<string>;
    focused: {
        type: PropType<boolean>;
    };
    placeholder: {
        type: PropType<string>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    borderlessQueryField: {
        type: PropType<boolean>;
    };
    loading: {
        type: PropType<boolean>;
    };
    selectedViewName: {
        type: PropType<string>;
    };
}>> & {
    onChange?: ((args_0: string) => any) | undefined;
    onBlur?: (() => any) | undefined;
    onFocus?: (() => any) | undefined;
    onClear?: (() => any) | undefined;
}, {}, {}>;

declare interface SectionDescriptor {
    /** Collection of options within the section */
    options: OptionDescriptor[];
    /** Section title */
    title?: string;
}

declare interface SectionProps {
    /** Section of action items */
    section: ActionListSection_2;
    /** Should there be multiple sections */
    hasMultipleSections: boolean;
    /** Defines a specific role attribute for each action in the list */
    actionRole?: 'option' | 'menuitem' | string;
    /** Whether it is the first in a group of sections */
    isFirst?: boolean;
}

declare type SectionProps_2 = {
    variant?: 'oneHalf' | 'oneThird' | 'fullWidth';
};

declare interface SectionProps_3 {
    divider?: boolean;
}

declare interface SectionProps_4 {
    flush?: boolean;
    subdued?: boolean;
    titleHidden?: boolean;
}

declare interface SectionSlots {
    default?: (_?: VueNode) => VNode[];
    title?: (_?: VueNode) => VNode[];
}

export declare const Select: __VLS_WithTemplateSlots_65<typeof __VLS_component_64, ReturnType<typeof __VLS_template_64>>;

export declare const SelectAllActions: DefineComponent<    {
    modelValue: PropType<boolean | string>;
    label: {
        type: PropType<string>;
    };
    selectMode: {
        type: PropType<boolean>;
    };
    paginatedSelectAllText: {
        type: PropType<string>;
    };
    paginatedSelectAllAction: {
        type: PropType<Action>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    isSticky: {
        type: PropType<boolean>;
    };
    hasPagination: {
        type: PropType<boolean>;
    };
    accessibilityLabel: {
        type: PropType<string>;
    };
    selected: {
        type: PropType<boolean | "indeterminate">;
    };
}, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "toggle-all": () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<    {
    modelValue: PropType<boolean | string>;
    label: {
        type: PropType<string>;
    };
    selectMode: {
        type: PropType<boolean>;
    };
    paginatedSelectAllText: {
        type: PropType<string>;
    };
    paginatedSelectAllAction: {
        type: PropType<Action>;
    };
    disabled: {
        type: PropType<boolean>;
    };
    isSticky: {
        type: PropType<boolean>;
    };
    hasPagination: {
        type: PropType<boolean>;
    };
    accessibilityLabel: {
        type: PropType<string>;
    };
    selected: {
        type: PropType<boolean | "indeterminate">;
    };
}>> & {
    "onToggle-all"?: (() => any) | undefined;
}, {}, {}>;

declare interface SelectGroup {
    title: string;
    options: SelectOption[];
}

declare enum SelectionType {
    All = "all",
    Page = "page",
    Multi = "multi",
    Single = "single",
    Range = "range"
}

declare type SelectOption = string | StrictOption;

declare type SelectSlots = {
    /** Label for the select */
    label?: (_?: VueNode) => VNode[];
    /** Additional text to aide in use */
    helpText?: (_?: VueNode) => VNode[];
};

export declare const SettingAction: DefineComponent<    {}, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<    {}>>, {}, {}>;

export declare const ShadowBevel: DefineComponent<__VLS_WithDefaults_47<__VLS_TypePropsToRuntimeProps_95<ShadowBevelProps>, {
    as: string;
    zIndex: string;
    bevel: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_47<__VLS_TypePropsToRuntimeProps_95<ShadowBevelProps>, {
    as: string;
    zIndex: string;
    bevel: boolean;
}>>>, {
    zIndex: string;
    as: "div" | "legend" | "li" | "section" | "span" | "ul";
    bevel: ResponsiveProp<boolean>;
}, {}>;

declare interface ShadowBevelProps {
    as?: Element_5;
    /** The box-shadow applied to the root element. */
    boxShadow: ShadowAliasOrScale;
    /** The border-radius applied to both the root and pseudo elements. */
    borderRadius: BorderRadiusAliasOrScale;
    /** The z-index applied to the pseudo element. */
    zIndex?: string;
    /**
     * Enable/disable the bevel effect.
     * Note: This also disables the border-radius and box-shadow.
     * @default true
     */
    bevel?: ResponsiveProp<boolean>;
}

declare type Size = 'xs' | 'sm' | 'md' | 'lg' | 'xl';

declare type Size_2 = 'small' | 'medium' | 'large';

declare type Size_3 = 'small';

declare type Size_4 = 'small' | 'medium';

declare type Size_5 = 'small' | 'medium' | 'large';

declare type Size_6 = 'small' | 'medium' | 'large' | 'extraLarge';

declare type Size_7 = 'extraSmall' | 'small' | 'medium' | 'large';

declare type Size_8 = 'small' | 'large';

declare type Size_9 = 'extraSmall' | 'small' | 'medium' | 'large';

export declare const SkeletonBodyText: DefineComponent<__VLS_WithDefaults_48<__VLS_TypePropsToRuntimeProps_96<SkeletonBodyTextProps>, {
    lines: number;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_48<__VLS_TypePropsToRuntimeProps_96<SkeletonBodyTextProps>, {
    lines: number;
}>>>, {
    lines: number;
}, {}>;

declare interface SkeletonBodyTextProps {
    /**
     * Number of lines to display
     * @default 3
     */
    lines?: number;
}

export declare const SkeletonDisplayText: DefineComponent<__VLS_WithDefaults_49<__VLS_TypePropsToRuntimeProps_97<SkeletonDisplayTextProps>, {
    size: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_49<__VLS_TypePropsToRuntimeProps_97<SkeletonDisplayTextProps>, {
    size: string;
}>>>, {
    size: Size_6;
}, {}>;

declare interface SkeletonDisplayTextProps {
    /**
     * Size of the text
     * @default 'medium'
     */
    size?: Size_6;
    /**
     * Maxium width of the text
     * @default '120px'
     */
    maxWidth?: `${number}ch` | `${number}%`;
}

export declare const SkeletonPage: __VLS_WithTemplateSlots_66<typeof __VLS_component_65, ReturnType<typeof __VLS_template_65>>;

declare interface SkeletonPageProps {
    /** Page title, in large type */
    title?: string;
    /** Remove the normal max-width on the page */
    fullWidth?: boolean;
    /** Decreases the maximum layout width. Intended for single-column layouts */
    narrowWidth?: boolean;
    /** Shows a skeleton over the primary action */
    primaryAction?: boolean;
    /** Shows a skeleton over the backAction */
    backAction?: boolean;
}

export declare const SkeletonTabs: DefineComponent<__VLS_WithDefaults_51<__VLS_TypePropsToRuntimeProps_99<SkeletonTabsProps>, {
    count: number;
    fitted: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_51<__VLS_TypePropsToRuntimeProps_99<SkeletonTabsProps>, {
    count: number;
    fitted: boolean;
}>>>, {
    fitted: boolean;
    count: number;
}, {}>;

declare interface SkeletonTabsProps {
    count?: number;
    /** Fit tabs to container */
    fitted?: boolean;
}

export declare const SkeletonThumbnail: DefineComponent<__VLS_WithDefaults_52<__VLS_TypePropsToRuntimeProps_100<SkeletonThumbnailProps>, {
    size: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_52<__VLS_TypePropsToRuntimeProps_100<SkeletonThumbnailProps>, {
    size: string;
}>>>, {
    size: Size_7;
}, {}>;

declare interface SkeletonThumbnailProps {
    /**
     * Size of the thumbnail
     * @default 'medium'
     */
    size?: Size_7;
}

declare interface SortButtonChoice {
    label: string;
    disabled?: boolean;
    value: SortValue;
    directionLabel: string;
}

declare type SortDirection = 'ascending' | 'descending' | 'none';

declare type SortValue = `${string} ${'asc' | 'desc'}`;

declare type Source = 'function' | 'placeholder' | 'external';

declare interface SourceSet {
    source?: string;
    descriptor?: string;
}

declare type Spacing = ResponsiveProp<SpaceScale>;

declare type Spacing_2 = ResponsiveProp<SpaceScale>;

declare type Spacing_3 = ResponsiveProp<SpaceScale>;

declare type Spacing_4 = ResponsiveProp<SpaceScale>;

declare type Spacing_5 = 'extraTight' | 'tight' | 'baseTight' | 'loose' | 'extraLoose' | 'none';

declare type Spacing_6 = 'extraTight' | 'loose';

declare type Spacing_7 = 'tight' | 'loose';

export declare const Spinner: DefineComponent<__VLS_WithDefaults_53<__VLS_TypePropsToRuntimeProps_101<SpinnerProps>, {
    size: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_53<__VLS_TypePropsToRuntimeProps_101<SpinnerProps>, {
    size: string;
}>>>, {
    size: Size_8;
}, {}>;

declare interface SpinnerProps {
    /**
     * Size of spinner
     * @default 'large'
     */
    size?: Size_8;
    /** Accessible label for the spinner */
    accessibilityLabel?: string;
    /** Allows the component to apply the correct accessibility roles based on focus */
    hasFocusableParent?: boolean;
}

export declare const Sticky: __VLS_WithTemplateSlots_67<typeof __VLS_component_66, ReturnType<typeof __VLS_template_66>>;

declare type StickyProps = {
    /** Element outlining the fixed position boundaries */
    boundingElement?: HTMLElement | null;
    /** Offset vertical spacing from the top of the scrollable container */
    offset?: boolean;
    /** Should the element remain in a fixed position when the layout is stacked (smaller screens)  */
    disableWhenStacked?: boolean;
};

declare interface StrictOption {
    /** Machine value of the option; this is the value passed to `onChange` */
    value: string;
    /** Human-readable text for the option */
    label: string;
    /** Option will be visible, but not selectable */
    disabled?: boolean;
    /** Element to display to the left of the option label. Does not show in the dropdown. */
    prefix?: VueNode;
    /** Unique key applied to the option element. Defaults to option value prop when undefined. */
    key?: string;
}

declare type TabAction = 'rename' | 'edit' | 'edit-columns' | 'duplicate' | 'delete';

declare interface TabActionDescriptor extends Omit<ActionListItemDescriptor, 'onAction'> {
    type: TabAction;
    onAction?: (name: string) => void;
    onPrimaryAction?: (name: string) => Promise<boolean> | void;
}

declare type TableData = string | number | VueNode;

declare interface TabProps {
    /** The unique identifier for the Tab */
    id: string;
    /** The name of the Tab */
    content: string;
    /** A unique identifier for the panel */
    panelID?: string;
    /** The accessible label for the Tab, if the name alone does not give enough context */
    accessibilityLabel?: string;
    /** A badge to render next to the view name */
    badge?: string;
    /** Optional URL if the Tab points to a location */
    url?: string;
    /** If true, will remove the ability to edit/rename/delete the view. */
    isLocked?: boolean;
    /** Whether the Tab is disabled */
    disabled?: boolean;
    /** A list of actions which map to actions that a merchant can take with this  */
    actions?: TabActionDescriptor[];
    /** Optional array that has a list of names of currently existing views. Used to check if a view name is unique. */
    viewNames?: string[];
    /** If true, the primary button in the currently open Modal will show a loading state */
    isModalLoading?: boolean;
    /** If the Tab is currently focused */
    focused?: boolean;
    /** If a sibling Tab currently has focus */
    siblingTabHasFocus?: boolean;
    /** If the Tab is selected */
    selected?: boolean;
    /** If the Tab is currently being measured */
    measuring?: boolean;
    /** Overrides the tabIndex calculated by the Tabs component */
    tabIndexOverride?: 0 | -1;
    /** Override z-index of popovers and tooltips */
    disclosureZIndexOverride?: number;
}

export declare const Tabs: __VLS_WithTemplateSlots_68<typeof __VLS_component_67, ReturnType<typeof __VLS_template_67>>;

declare interface TabsProps {
    /** The items that map to each Tab. */
    tabs: TabProps[];
    /** The index of the currently selected Tab. */
    selected: number;
    /** Whether the Tabs are disabled or not. */
    disabled?: boolean;
    /** Whether to show the add new view Tab. */
    canCreateNewView?: boolean;
    /** Label for the new view Tab. Will override the default of "Create new view" */
    newViewAccessibilityLabel?: string;
    /** Fit tabs to container */
    fitted?: boolean;
    /** Text to replace disclosures horizontal dots */
    disclosureText?: string;
    /** Override z-index of popovers and tooltips */
    disclosureZIndexOverride?: number;
}

export declare const Tag: __VLS_WithTemplateSlots_69<typeof __VLS_component_68, ReturnType<typeof __VLS_template_68>>;

declare type TagProps = {
    /** Disables the tag  */
    disabled?: boolean;
    /** A string to use when tag has more than textual content */
    accessibilityLabel?: string;
    /** Url to navigate to when tag is clicked or keypressed. */
    url?: string;
    /** The size of the tag */
    size?: 'large';
};

declare type Target = '_blank' | '_self' | '_parent' | '_top';

declare type Target_2 = '_blank' | '_self' | '_parent' | '_top' | string;

declare type Target_3 = '_blank' | '_self' | '_parent' | '_top';

declare const Text_2: __VLS_WithTemplateSlots_70<typeof __VLS_component_69, ReturnType<typeof __VLS_template_69>>;
export { Text_2 as Text }

export declare const TextContainer: __VLS_WithTemplateSlots_71<typeof __VLS_component_70, ReturnType<typeof __VLS_template_70>>;

declare interface TextContainerProps {
    /** The amount of vertical spacing children will get between them */
    spacing?: Spacing_7;
}

declare type TextDecorationLine = 'line-through';

export declare const TextField: __VLS_WithTemplateSlots_72<typeof __VLS_component_71, ReturnType<typeof __VLS_template_71>>;

declare type TextFieldSlots = {
    /** Additional hint text to display */
    helpText?: (_?: VueNode) => VNode[];
    /** Label for the input */
    label?: (_?: VueNode) => VNode[];
    /** An element connected to the right of the input */
    connectedRight?: (_?: VueNode) => VNode[];
    /** An element connected to the left of the input */
    connectedLeft?: (_?: VueNode) => VNode[];
    /** Content to vertically display above the input value */
    verticalContent?: (_?: VueNode) => VNode[];
    /** Text to display before value */
    prefix?: (_?: VueNode) => VNode[];
    /** Text to display after value */
    suffix?: (_?: VueNode) => VNode[];
};

/**
 * This component will not use children props because of slot method in vue can do the same thing
 */
declare type TextProps = {
    /** Adjust horizontal alignment of text */
    alignment?: Alignment_4;
    /** The element type */
    as: Element_6;
    /** Prevent text from overflowing */
    breakWord?: boolean;
    /** Adjust tone of text */
    tone?: Tone_3;
    /** Adjust weight of text */
    fontWeight?: FontWeight;
    /** HTML id attribute */
    id?: string;
    /** Use a numeric font variant with monospace appearance */
    numeric?: boolean;
    /** Truncate text overflow with ellipsis */
    truncate?: boolean;
    /** Typographic style of text */
    variant?: Variant_2;
    /** Visually hide the text */
    visuallyHidden?: boolean;
    /** Add a line-through to the text */
    textDecorationLine?: TextDecorationLine;
};

declare type TextSlots = {
    /** Text to display */
    default: (_: VueNode) => null;
};

declare type ThemeNameLocal = typeof themeNamesLocal[number];

declare const themeNamesLocal: readonly ["light", "dark-experimental"];

export declare const ThemeProvider: __VLS_WithTemplateSlots_73<typeof __VLS_component_72, ReturnType<typeof __VLS_template_72>>;

declare type ThemeProviderProps = {
    as?: string;
    className?: string;
    theme?: ThemeNameLocal;
};

declare type ThemeProviderSlots = {
    default: (_?: VueNode) => VNode[];
};

export declare const Thumbnail: DefineComponent<__VLS_WithDefaults_57<__VLS_TypePropsToRuntimeProps_108<ThumbnailProps>, {
    size: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_57<__VLS_TypePropsToRuntimeProps_108<ThumbnailProps>, {
    size: string;
}>>>, {
    size: Size_9;
}, {}>;

declare interface ThumbnailProps {
    /**
     * Size of thumbnail
     * @default 'medium'
     */
    size?: Size_9;
    /** URL for the image */
    source: string | Source | IconSource;
    /** Alt text for the thumbnail image */
    alt: string;
    /** Transparent background */
    transparent?: boolean;
}

declare interface TitleProps {
    /** Page title, in large type */
    title?: string;
    /** Page subtitle, in regular type */
    subtitle?: string;
    /** Removes spacing between title and subtitle */
    compactTitle?: boolean;
    /** Whether or not to add a max-width to the subtitle. Gets calculated by
     * the presence of either the secondaryActions or actionGroups props on the
     * Header that consumes this component */
    hasSubtitleMaxWidth?: boolean;
}

declare type Tone = 'info' | 'success' | 'warning' | 'critical' | 'attention' | 'new' | 'info-strong' | 'success-strong' | 'warning-strong' | 'critical-strong' | 'attention-strong' | 'read-only' | 'enabled';

declare type Tone_2 = 'base' | 'inherit' | 'subdued' | 'caution' | 'warning' | 'critical' | 'interactive' | 'info' | 'success' | 'primary' | 'emphasis' | 'magic' | 'textCaution' | 'textWarning' | 'textCritical' | 'textInfo' | 'textSuccess' | 'textPrimary' | 'textMagic';

declare type Tone_3 = 'base' | 'disabled' | 'inherit' | 'success' | 'critical' | 'caution' | 'subdued' | 'text-inverse' | 'text-inverse-secondary' | 'magic' | 'magic-subdued';

export declare const Tooltip: __VLS_WithTemplateSlots_74<typeof __VLS_component_73, ReturnType<typeof __VLS_template_73>>;

declare interface TooltipAction {
    /** Text content to render in a tooltip */
    helpText?: VueNode;
}

export declare const TooltipOverlay: DefineComponent<__VLS_WithDefaults_59<__VLS_TypePropsToRuntimeProps_110<TooltipOverlayProps>, {
    preferredPosition: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_59<__VLS_TypePropsToRuntimeProps_110<TooltipOverlayProps>, {
    preferredPosition: string;
}>>>, {
    preferredPosition: PreferredPosition;
}, {}>;

declare type TooltipOverlayBaseProps = {
    id: string;
    active: boolean;
    activator: HTMLElement;
    accessibilityLabel?: string;
    width?: Width;
    padding?: Padding;
    borderRadius?: BorderRadius;
    zIndexOverride?: number;
    onClose?(): void;
    instant?: boolean;
};

declare type TooltipOverlayProps = TooltipOverlayBaseProps & {
    preventInteraction?: PositionedOverlayProps['preventInteraction'];
    preferredPosition?: PositionedOverlayProps['preferredPosition'];
};

declare interface TooltipProps {
    /** Content to display within the tooltip */
    content?: string;
    /** Toggle whether the tooltip is visible */
    active?: boolean;
    /** Delay in milliseconds while hovering over an element before the tooltip is visible */
    hoverDelay?: number;
    /** Dismiss tooltip when not interacting with its children */
    dismissOnMouseOut?: TooltipOverlayProps['preventInteraction'];
    /**
     * The direction the tooltip tries to display
     * @default 'above'
     */
    preferredPosition?: TooltipOverlayProps['preferredPosition'];
    /**
     * The element type to wrap the activator in
     * @default 'span'
     */
    activatorWrapper?: string;
    /** Visually hidden text for screen readers */
    accessibilityLabel?: string;
    /**
     * Width of content
     * @default 'default'
     */
    width?: Width;
    /**
     * Padding of content
     * @default 'default'
     */
    padding?: Padding;
    /**
     * Border radius of the tooltip
     * @default '200'
     */
    borderRadius?: BorderRadius;
    /** Override on the default z-index of 400 */
    zIndexOverride?: number;
    /** Whether to render a dotted underline underneath the tooltip's activator */
    hasUnderline?: boolean;
    /** Whether the tooltip's content remains open after clicking the activator */
    persistOnClick?: boolean;
}

declare interface Transition {
    /** Expand the collpsible on render. */
    animateIn?: boolean;
    /** Assign a transition duration to the collapsible animation. */
    duration?: string;
    /** Assign a transition delay to the collapsible animation */
    delay?: MotionDurationScale;
    /** Assign a transition timing function to the collapsible animation */
    timingFunction?: string;
}

declare type TransitionStatus = 'entering' | 'entered' | 'exiting' | 'exited' | 'unmounted';

export declare const TrapFocus: DefineComponent<__VLS_WithDefaults_60<__VLS_TypePropsToRuntimeProps_111<Props_2>, {
    trapping: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_60<__VLS_TypePropsToRuntimeProps_111<Props_2>, {
    trapping: boolean;
}>>>, {
    trapping: boolean;
}, {}>;

export declare const Truncate: __VLS_WithTemplateSlots_75<typeof __VLS_component_74, ReturnType<typeof __VLS_template_74>>;

export declare const TruncateText: DefineComponent<    {}, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<    {}>>, {}, {}>;

declare type Type = 'bullet' | 'number';

export declare const UnstyledButton: DefineComponent<__VLS_TypePropsToRuntimeProps_112<UnstyledButtonProps>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_112<UnstyledButtonProps>>>, {}, {}>;

declare type UnstyledButtonProps = {
    /** A custom class name to apply styles to button */
    className?: string;
    /** A unique identifier for the button */
    id?: string;
    /** A destination to link to, rendered in the href attribute of a link */
    url?: string;
    /** Forces url to open in a new tab */
    external?: boolean;
    /** Where to display the url */
    target?: Target_3;
    /** Tells the browser to download the url instead of opening it. Provides a hint for the downloaded filename if it is a string value */
    download?: string | boolean;
    /** Allows the button to submit a form */
    submit?: boolean;
    /** Disables the button, disallowing merchant interaction */
    disabled?: boolean;
    /** Replaces button text with a spinner while a background action is being performed */
    loading?: boolean;
    /** Sets the button in a pressed state */
    pressed?: boolean;
    /** Visually hidden text for screen readers */
    accessibilityLabel?: string;
    /** A valid WAI-ARIA role to define the semantic value of this element */
    role?: string;
    /** Id of the element the button controls */
    ariaControls?: string;
    /** Tells screen reader the controlled element is expanded */
    ariaExpanded?: boolean;
    /** Indicates the ID of the element that describes the button */
    ariaDescribedBy?: string;
    /** Indicates the current checked state of the button when acting as a toggle or switch */
    ariaChecked?: 'false' | 'true';
};

export declare const UnstyledLink: DefineComponent<__VLS_WithDefaults_61<__VLS_TypePropsToRuntimeProps_113<LinkLikeComponentProps>, {
    download: undefined;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_61<__VLS_TypePropsToRuntimeProps_113<LinkLikeComponentProps>, {
    download: undefined;
}>>>, {}, {}>;

/**
 * Retrieves media query matches for each directional Polaris `breakpoints` alias.
 *
 * @example
 * const {smUp} = useBreakpoints();
 * return smUp && 'Hello world';
 *
 * @example
 * const {mdUp} = useBreakpoints({defaults: {mdUp: true}});
 * mdUp //=> `true` during SSR
 *
 * @example
 * const breakpoints = useBreakpoints({defaults: true});
 * breakpoints //=> All values will be `true` during SSR
 */
export declare function useBreakpoints(options?: UseBreakpointsOptions): Ref<    {
    xsUp: boolean;
    xsDown: boolean;
    xsOnly: boolean;
    smUp: boolean;
    smDown: boolean;
    smOnly: boolean;
    mdUp: boolean;
    mdDown: boolean;
    mdOnly: boolean;
    lgUp: boolean;
    lgDown: boolean;
    lgOnly: boolean;
    xlUp: boolean;
    xlDown: boolean;
    xlOnly: boolean;
}>;

declare interface UseBreakpointsOptions {
    /**
     * Default values applied during SSR. Accepts a single value to use for each
     * breakpoint alias, or an object for configuring select breakpoints.
     *
     * @default false
     */
    defaults: boolean | {
        [DirectionAlias in BreakpointsDirectionAlias]?: boolean;
    };
}

export declare function useIndexResourceState<T extends {
    [key: string]: unknown;
}>(resources: T[], { selectedResources: initSelectedResources, allResourcesSelected: initAllResourcesSelected, resourceIDResolver, resourceFilter, }?: {
    selectedResources?: string[];
    allResourcesSelected?: boolean;
    resourceIDResolver?: ResourceIDResolver<T>;
    resourceFilter?: (value: T, index: number) => boolean;
}): {
    selectedResources: Ref<string[]>;
    allResourcesSelected: Ref<boolean>;
    handleSelectionChange: (selectionType: SelectionType, isSelecting: boolean, selection?: string | Range_2, _position?: number) => void;
    clearSelection: () => void;
    removeSelectedResources: (removeResources: string[]) => void;
};

export declare function useSetIndexFiltersMode(defaultMode?: IndexFiltersMode): {
    mode: Ref<IndexFiltersMode>;
    setMode: (newMode: IndexFiltersMode) => void;
};

declare type Variant = 'segmented';

declare type Variant_2 = 'headingXs' | 'headingSm' | 'headingMd' | 'headingLg' | 'headingXl' | 'heading2xl' | 'heading3xl' | 'bodyXs' | 'bodySm' | 'bodyMd' | 'bodyLg';

declare type VerticalAlign = 'top' | 'bottom' | 'middle' | 'baseline';

export declare const VideoThumbnail: DefineComponent<__VLS_WithDefaults_62<__VLS_TypePropsToRuntimeProps_114<VideoThumbnailProps>, {
    videoLength: number;
    videoProgress: number;
    showVideoProgress: boolean;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    click: () => void;
    "before-start-playing": () => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_62<__VLS_TypePropsToRuntimeProps_114<VideoThumbnailProps>, {
    videoLength: number;
    videoProgress: number;
    showVideoProgress: boolean;
}>>> & {
    onClick?: (() => any) | undefined;
    "onBefore-start-playing"?: (() => any) | undefined;
}, {
    videoLength: number;
    videoProgress: number;
    showVideoProgress: boolean;
}, {}>;

declare interface VideoThumbnailProps {
    /** URL source for thumbnail image. */
    thumbnailUrl: string;
    /**
     * Length of video in seconds.
     * @default 0
     */
    videoLength?: number;
    /**
     * Video progress in seconds. Displays a progress bar at the bottom of the thumbnail. Only renders when videoLength is also set.
     * @default 0
     */
    videoProgress?: number;
    /**
     * Indicate whether to allow video progress to be displayed
     * @default false
     */
    showVideoProgress?: boolean;
    /** Custom ARIA label for play button.
     * @default 'Play video of length {human readable duration}'
     */
    accessibilityLabel?: string;
}

declare type VueNode = string | number | boolean | Component | Element | Function | VNode | null | undefined;

declare type Width = 'default' | 'wide';

export declare const WithinContentContainerBanner: __VLS_WithTemplateSlots_11<typeof __VLS_component_11, ReturnType<typeof __VLS_template_11>>;

export { }
