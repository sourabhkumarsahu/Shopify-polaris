{"version":3,"file":"I18n.js","sources":["../../../../../../../polaris/polaris-react/src/utilities/i18n/I18n.ts"],"sourcesContent":["import {get} from '../get';\nimport {merge} from '../merge';\n\nconst REPLACE_REGEX = /{([^}]*)}/g;\n\ninterface TranslationDictionary {\n  [key: string]: string | TranslationDictionary;\n}\n\nexport class I18n {\n  private translation: TranslationDictionary = {};\n\n  /**\n   * @param translation A locale object or array of locale objects that overrides default translations. If specifying an array then your desired language dictionary should come first, followed by your fallback language dictionaries\n   */\n  constructor(translation: TranslationDictionary | TranslationDictionary[]) {\n    // slice the array to make a shallow copy of it, so we don't accidentally\n    // modify the original translation array\n    this.translation = Array.isArray(translation)\n      ? merge(...translation.slice().reverse())\n      : translation;\n  }\n\n  translate(\n    id: string,\n    replacements?: {[key: string]: string | number},\n  ): string {\n    const text: string = get(this.translation, id, '');\n\n    if (!text) {\n      return '';\n    }\n\n    if (replacements) {\n      return text.replace(REPLACE_REGEX, (match: string) => {\n        const replacement: string = match.substring(1, match.length - 1)!;\n\n        if (replacements[replacement] === undefined) {\n          const replacementData = JSON.stringify(replacements);\n\n          throw new Error(\n            `Error in translation for key '${id}'. No replacement found for key '${replacement}'. The following replacements were passed: '${replacementData}'`,\n          );\n        }\n\n        // This could be a string or a number, but JS doesn't mind which it gets\n        // and can handle that cast internally. So let it, to save us calling\n        // toString() on what's already a string in 90% of cases.\n        return replacements[replacement] as string;\n      });\n    }\n\n    return text;\n  }\n\n  translationKeyExists(path: string): boolean {\n    return Boolean(get(this.translation, path));\n  }\n}\n"],"names":[],"mappings":";;AAGA,MAAM,gBAAgB;AAMf,MAAM,KAAK;AAAA;AAAA;AAAA;AAAA,EAMhB,YAAY,aAA8D;AAL1E,SAAQ,cAAqC;AAQ3C,SAAK,cAAc,MAAM,QAAQ,WAAW,IACxC,MAAM,GAAG,YAAY,MAAM,EAAE,QAAS,CAAA,IACtC;AAAA,EACN;AAAA,EAEA,UACE,IACA,cACQ;AACR,UAAM,OAAe,IAAI,KAAK,aAAa,IAAI,EAAE;AAEjD,QAAI,CAAC,MAAM;AACF,aAAA;AAAA,IACT;AAEA,QAAI,cAAc;AAChB,aAAO,KAAK,QAAQ,eAAe,CAAC,UAAkB;AACpD,cAAM,cAAsB,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC;AAE3D,YAAA,aAAa,WAAW,MAAM,QAAW;AACrC,gBAAA,kBAAkB,KAAK,UAAU,YAAY;AAEnD,gBAAM,IAAI;AAAA,YACR,iCAAiC,EAAE,oCAAoC,WAAW,+CAA+C,eAAe;AAAA,UAAA;AAAA,QAEpJ;AAKA,eAAO,aAAa,WAAW;AAAA,MAAA,CAChC;AAAA,IACH;AAEO,WAAA;AAAA,EACT;AAAA,EAEA,qBAAqB,MAAuB;AAC1C,WAAO,QAAQ,IAAI,KAAK,aAAa,IAAI,CAAC;AAAA,EAC5C;AACF;"}