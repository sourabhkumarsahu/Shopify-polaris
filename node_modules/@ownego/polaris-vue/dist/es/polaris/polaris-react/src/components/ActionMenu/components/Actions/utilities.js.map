{"version":3,"file":"utilities.js","sources":["../../../../../../../../../polaris/polaris-react/src/components/ActionMenu/components/Actions/utilities.ts"],"sourcesContent":["export function getVisibleAndHiddenActionsIndices(\n  actions: any[] = [],\n  groups: any[] = [],\n  disclosureWidth: number,\n  actionsWidths: number[],\n  containerWidth: number,\n) {\n  const sumTabWidths = actionsWidths.reduce((sum, width) => sum + width, 0);\n  const arrayOfActionsIndices = actions.map((_, index) => {\n    return index;\n  });\n  const arrayOfGroupsIndices = groups.map((_, index) => {\n    return index;\n  });\n\n  const visibleActions: number[] = [];\n  const hiddenActions: number[] = [];\n  const visibleGroups: number[] = [];\n  const hiddenGroups: number[] = [];\n\n  if (containerWidth > sumTabWidths) {\n    visibleActions.push(...arrayOfActionsIndices);\n    visibleGroups.push(...arrayOfGroupsIndices);\n  } else {\n    let accumulatedWidth = 0;\n\n    arrayOfActionsIndices.forEach((currentActionsIndex) => {\n      const currentActionsWidth = actionsWidths[currentActionsIndex];\n\n      if (\n        accumulatedWidth + currentActionsWidth >=\n        containerWidth - disclosureWidth\n      ) {\n        hiddenActions.push(currentActionsIndex);\n        return;\n      }\n\n      visibleActions.push(currentActionsIndex);\n      accumulatedWidth += currentActionsWidth;\n    });\n\n    arrayOfGroupsIndices.forEach((currentGroupsIndex) => {\n      const currentActionsWidth =\n        actionsWidths[currentGroupsIndex + actions.length];\n\n      if (\n        accumulatedWidth + currentActionsWidth >=\n        containerWidth - disclosureWidth\n      ) {\n        hiddenGroups.push(currentGroupsIndex);\n        return;\n      }\n\n      visibleGroups.push(currentGroupsIndex);\n      accumulatedWidth += currentActionsWidth;\n    });\n  }\n\n  return {\n    visibleActions,\n    hiddenActions,\n    visibleGroups,\n    hiddenGroups,\n  };\n}\n"],"names":[],"mappings":"AAAgB,SAAA,kCACd,UAAiB,IACjB,SAAgB,CAAA,GAChB,iBACA,eACA,gBACA;AACM,QAAA,eAAe,cAAc,OAAO,CAAC,KAAK,UAAU,MAAM,OAAO,CAAC;AACxE,QAAM,wBAAwB,QAAQ,IAAI,CAAC,GAAG,UAAU;AAC/C,WAAA;AAAA,EAAA,CACR;AACD,QAAM,uBAAuB,OAAO,IAAI,CAAC,GAAG,UAAU;AAC7C,WAAA;AAAA,EAAA,CACR;AAED,QAAM,iBAA2B,CAAA;AACjC,QAAM,gBAA0B,CAAA;AAChC,QAAM,gBAA0B,CAAA;AAChC,QAAM,eAAyB,CAAA;AAE/B,MAAI,iBAAiB,cAAc;AAClB,mBAAA,KAAK,GAAG,qBAAqB;AAC9B,kBAAA,KAAK,GAAG,oBAAoB;AAAA,EAAA,OACrC;AACL,QAAI,mBAAmB;AAED,0BAAA,QAAQ,CAAC,wBAAwB;AAC/C,YAAA,sBAAsB,cAAc,mBAAmB;AAG3D,UAAA,mBAAmB,uBACnB,iBAAiB,iBACjB;AACA,sBAAc,KAAK,mBAAmB;AACtC;AAAA,MACF;AAEA,qBAAe,KAAK,mBAAmB;AACnB,0BAAA;AAAA,IAAA,CACrB;AAEoB,yBAAA,QAAQ,CAAC,uBAAuB;AACnD,YAAM,sBACJ,cAAc,qBAAqB,QAAQ,MAAM;AAGjD,UAAA,mBAAmB,uBACnB,iBAAiB,iBACjB;AACA,qBAAa,KAAK,kBAAkB;AACpC;AAAA,MACF;AAEA,oBAAc,KAAK,kBAAkB;AACjB,0BAAA;AAAA,IAAA,CACrB;AAAA,EACH;AAEO,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;"}