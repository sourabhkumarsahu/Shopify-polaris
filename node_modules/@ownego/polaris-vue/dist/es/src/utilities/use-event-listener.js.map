{"version":3,"file":"use-event-listener.js","sources":["../../../../src/utilities/use-event-listener.ts"],"sourcesContent":["import { onBeforeUnmount, onMounted } from 'vue';\n\n/**\n * Acceptable target elements for `useEventListener`.\n */\ntype UseEventListenerTarget =\n  | Window\n  | Document\n  | HTMLElement\n\n/**\n * Extracts the target element from a React `RefObject` or returns the input element.\n */\ntype ExtractTargetElement<Target> = Target extends Element\n  ? Element\n  : Target;\n\n/**\n * Extracts a (lib.dom.ts) EventMap for a given target element.\n */\ntype ExtractEventMap<Target> = ExtractTargetElement<Target> extends Window\n  ? WindowEventMap\n  : ExtractTargetElement<Target> extends Document\n  ? DocumentEventMap\n  : HTMLElementEventMap;\n\n/**\n * Extracts all event names for a given target element.\n */\ntype ExtractEventName<Target> = keyof ExtractEventMap<\n  ExtractTargetElement<Target>\n>;\n\n/**\n * Extracts the `event` object for a given event type.\n */\ntype ExtractEvent<\n  Target,\n  EventName extends ExtractEventName<Target>,\n> = ExtractEventMap<ExtractTargetElement<Target>>[EventName];\n\n/**\n * React hook encapsulating the boilerplate logic for adding and removing event listeners.\n */\nexport function useEventListener<\n  TargetEventName extends ExtractEventName<Target>,\n  TargetEvent extends ExtractEvent<Target, TargetEventName>,\n  Target extends UseEventListenerTarget = Window,\n>(\n  eventName: TargetEventName,\n  handler: (event: TargetEvent) => void,\n  target?: null | Target,\n  options?: AddEventListenerOptions,\n): void {\n  if (!(typeof eventName === 'string' && target !== null)) return;\n\n  let targetElement: UseEventListenerTarget;\n\n  if (typeof target === 'undefined') {\n    targetElement = window;\n  } else {\n    targetElement = target;\n  }\n\n  const eventListener = (event: Event) =>\n    handler(event as unknown as TargetEvent);\n\n\n  onMounted(() => {\n    targetElement.addEventListener(eventName, eventListener, options);\n  });\n\n  onBeforeUnmount(() => {\n    targetElement.removeEventListener(eventName, eventListener, options);\n  });\n}\n"],"names":[],"mappings":";AA4CO,SAAS,iBAKd,WACA,SACA,QACA,SACM;AACN,MAAI,EAAE,OAAO,cAAc,YAAY,WAAW,MAAO;AAErD,MAAA;AAEA,MAAA,OAAO,WAAW,aAAa;AACjB,oBAAA;AAAA,EAAA,OACX;AACW,oBAAA;AAAA,EAClB;AAEA,QAAM,gBAAgB,CAAC,UACrB,QAAQ,KAA+B;AAGzC,YAAU,MAAM;AACA,kBAAA,iBAAiB,WAAW,eAAe,OAAO;AAAA,EAAA,CACjE;AAED,kBAAgB,MAAM;AACN,kBAAA,oBAAoB,WAAW,eAAe,OAAO;AAAA,EAAA,CACpE;AACH;"}