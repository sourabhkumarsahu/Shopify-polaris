import { c as clamp } from "../../polaris/polaris-react/src/utilities/clamp.js";
import { r as roundNumberToDecimalPlaces } from "../../polaris/polaris-react/src/utilities/roundNumberToDecimalPlaces.js";
function componentToHex(component) {
  const hex = component.toString(16);
  return hex.length === 1 ? `0${hex}` : hex;
}
function rgbFromHueAndChroma(hue, chroma) {
  const huePrime = hue / 60;
  const hueDelta = 1 - Math.abs(huePrime % 2 - 1);
  const intermediateValue = chroma * hueDelta;
  let red = 0;
  let green = 0;
  let blue = 0;
  if (huePrime >= 0 && huePrime <= 1) {
    red = chroma;
    green = intermediateValue;
    blue = 0;
  }
  if (huePrime >= 1 && huePrime <= 2) {
    red = intermediateValue;
    green = chroma;
    blue = 0;
  }
  if (huePrime >= 2 && huePrime <= 3) {
    red = 0;
    green = chroma;
    blue = intermediateValue;
  }
  if (huePrime >= 3 && huePrime <= 4) {
    red = 0;
    green = intermediateValue;
    blue = chroma;
  }
  if (huePrime >= 4 && huePrime <= 5) {
    red = intermediateValue;
    green = 0;
    blue = chroma;
  }
  if (huePrime >= 5 && huePrime <= 6) {
    red = chroma;
    green = 0;
    blue = intermediateValue;
  }
  return { red, green, blue };
}
function rgbToHsbl(color, type = "b") {
  const { alpha = 1 } = color;
  const red = color.red / 255;
  const green = color.green / 255;
  const blue = color.blue / 255;
  const largestComponent = Math.max(red, green, blue);
  const smallestComponent = Math.min(red, green, blue);
  const delta = largestComponent - smallestComponent;
  const lightness = (largestComponent + smallestComponent) / 2;
  let saturation = 0;
  if (largestComponent === 0) {
    saturation = 0;
  } else if (type === "b") {
    saturation = delta / largestComponent;
  } else if (type === "l") {
    const baseSaturation = lightness > 0.5 ? delta / (2 - largestComponent - smallestComponent) : delta / (largestComponent + smallestComponent);
    saturation = Number.isNaN(baseSaturation) ? 0 : baseSaturation;
  }
  let huePercentage = 0;
  switch (largestComponent) {
    case red:
      huePercentage = (green - blue) / delta + (green < blue ? 6 : 0);
      break;
    case green:
      huePercentage = (blue - red) / delta + 2;
      break;
    case blue:
      huePercentage = (red - green) / delta + 4;
      break;
  }
  const hue = huePercentage / 6 * 360;
  const clampedHue = clamp(hue, 0, 360);
  return {
    hue: clampedHue ? roundNumberToDecimalPlaces(clampedHue, 2) : 0,
    saturation: roundNumberToDecimalPlaces(clamp(saturation, 0, 1), 4),
    brightness: roundNumberToDecimalPlaces(clamp(largestComponent, 0, 1), 4),
    lightness: roundNumberToDecimalPlaces(lightness, 4),
    alpha: roundNumberToDecimalPlaces(alpha, 4)
  };
}
function hexToRgb(color) {
  if (color.length === 4) {
    const repeatHex = (hex1, hex2) => color.slice(hex1, hex2).repeat(2);
    const red2 = parseInt(repeatHex(1, 2), 16);
    const green2 = parseInt(repeatHex(2, 3), 16);
    const blue2 = parseInt(repeatHex(3, 4), 16);
    return { red: red2, green: green2, blue: blue2 };
  }
  const red = parseInt(color.slice(1, 3), 16);
  const green = parseInt(color.slice(3, 5), 16);
  const blue = parseInt(color.slice(5, 7), 16);
  return { red, green, blue };
}
function rgbToHex({ red, green, blue }) {
  return `#${componentToHex(red)}${componentToHex(green)}${componentToHex(blue)}`;
}
function hsbToRgb(color) {
  const { hue, saturation, brightness } = color;
  const colorAlpha = color;
  const alpha = colorAlpha.alpha || 1;
  const chroma = brightness * saturation;
  let { red, green, blue } = rgbFromHueAndChroma(hue, chroma);
  const chromaBrightnessDelta = brightness - chroma;
  red += chromaBrightnessDelta;
  green += chromaBrightnessDelta;
  blue += chromaBrightnessDelta;
  return {
    red: Math.round(red * 255),
    green: Math.round(green * 255),
    blue: Math.round(blue * 255),
    alpha
  };
}
function hsbToHex(color) {
  return rgbToHex(hsbToRgb({ ...color, alpha: 1 }));
}
function rgbToHsb(color) {
  const { hue, saturation, brightness, alpha = 1 } = rgbToHsbl(color, "b");
  return {
    hue,
    saturation,
    brightness,
    alpha
  };
}
export {
  hsbToRgb as a,
  hexToRgb as b,
  hsbToHex as h,
  rgbToHsb as r
};
//# sourceMappingURL=color-transformers.js.map
