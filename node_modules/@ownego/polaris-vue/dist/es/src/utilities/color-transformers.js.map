{"version":3,"file":"color-transformers.js","sources":["../../../../src/utilities/color-transformers.ts"],"sourcesContent":["import { clamp } from '@polaris/utilities/clamp';\nimport type {\n  RGBColor,\n  RGBAColor,\n  HSBColor,\n  HSBAColor,\n  HSLColor,\n  HSLAColor,\n  HSBLAColor,\n} from '@polaris/utilities/color-types';\nimport { roundNumberToDecimalPlaces } from '@polaris/utilities/roundNumberToDecimalPlaces';\n\ntype ColorType = 'hex' | 'rgb' | 'rgba' | 'hsl' | 'hsla' | 'default';\n\nfunction componentToHex(component: number) {\n  const hex = component.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\nfunction rgbFromHueAndChroma(hue: number, chroma: number) {\n  const huePrime = hue / 60;\n  const hueDelta = 1 - Math.abs((huePrime % 2) - 1);\n  const intermediateValue = chroma * hueDelta;\n\n  let red = 0;\n  let green = 0;\n  let blue = 0;\n  if (huePrime >= 0 && huePrime <= 1) {\n    red = chroma;\n    green = intermediateValue;\n    blue = 0;\n  }\n\n  if (huePrime >= 1 && huePrime <= 2) {\n    red = intermediateValue;\n    green = chroma;\n    blue = 0;\n  }\n\n  if (huePrime >= 2 && huePrime <= 3) {\n    red = 0;\n    green = chroma;\n    blue = intermediateValue;\n  }\n\n  if (huePrime >= 3 && huePrime <= 4) {\n    red = 0;\n    green = intermediateValue;\n    blue = chroma;\n  }\n\n  if (huePrime >= 4 && huePrime <= 5) {\n    red = intermediateValue;\n    green = 0;\n    blue = chroma;\n  }\n\n  if (huePrime >= 5 && huePrime <= 6) {\n    red = chroma;\n    green = 0;\n    blue = intermediateValue;\n  }\n\n  return { red, green, blue };\n}\n\n// ref https://en.wikipedia.org/wiki/HSL_and_HSV\nfunction rgbToHsbl(color: RGBAColor, type: 'b' | 'l' = 'b'): HSBLAColor {\n  const { alpha = 1 } = color;\n\n  const red = color.red / 255;\n  const green = color.green / 255;\n  const blue = color.blue / 255;\n\n  const largestComponent = Math.max(red, green, blue);\n  const smallestComponent = Math.min(red, green, blue);\n\n  const delta = largestComponent - smallestComponent;\n  const lightness = (largestComponent + smallestComponent) / 2;\n  let saturation = 0;\n  if (largestComponent === 0) {\n    saturation = 0;\n  } else if (type === 'b') {\n    saturation = delta / largestComponent;\n  } else if (type === 'l') {\n    const baseSaturation =\n      lightness > 0.5\n        ? delta / (2 - largestComponent - smallestComponent)\n        : delta / (largestComponent + smallestComponent);\n    saturation = Number.isNaN(baseSaturation) ? 0 : baseSaturation;\n  }\n\n  let huePercentage = 0;\n  switch (largestComponent) {\n  case red:\n    huePercentage = (green - blue) / delta + (green < blue ? 6 : 0);\n    break;\n  case green:\n    huePercentage = (blue - red) / delta + 2;\n    break;\n  case blue:\n    huePercentage = (red - green) / delta + 4;\n    break;\n  default:\n    break;\n  }\n\n  const hue = (huePercentage / 6) * 360;\n  const clampedHue = clamp(hue, 0, 360);\n\n  return {\n    hue: clampedHue ? roundNumberToDecimalPlaces(clampedHue, 2) : 0,\n    saturation: roundNumberToDecimalPlaces(clamp(saturation, 0, 1), 4),\n    brightness: roundNumberToDecimalPlaces(clamp(largestComponent, 0, 1), 4),\n    lightness: roundNumberToDecimalPlaces(lightness, 4),\n    alpha: roundNumberToDecimalPlaces(alpha, 4),\n  };\n}\n\nfunction getColorType(color: string): ColorType {\n  if (color.includes('#')) {\n    return 'hex';\n  }\n  if (color.includes('rgb')) {\n    return 'rgb';\n  }\n  if (color.includes('rgba')) {\n    return 'rgba';\n  }\n  if (color.includes('hsl')) {\n    return 'hsl';\n  }\n  if (color.includes('hsla')) {\n    return 'hsla';\n  }\n\n  return 'default';\n}\n\nfunction rgbToObject(color: string): RGBAColor {\n  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n  const colorMatch = color.match(/\\(([^)]+)\\)/);\n\n  if (!colorMatch) {\n    return {\n      red: 0,\n      green: 0,\n      blue: 0,\n      alpha: 0,\n    };\n  }\n\n  const [red, green, blue, alpha] = colorMatch[1].split(',');\n  const objColor = {\n    red: parseInt(red, 10),\n    green: parseInt(green, 10),\n    blue: parseInt(blue, 10),\n    alpha: parseInt(alpha, 10) || 1,\n  };\n  return objColor;\n}\n\nexport function rgbToHsl(color: RGBAColor): HSLAColor {\n  const { hue, saturation: rawSaturation, lightness: rawLightness, alpha = 1 } = rgbToHsbl(color, 'l');\n\n  const saturation = roundNumberToDecimalPlaces(rawSaturation * 100, 2);\n  const lightness = roundNumberToDecimalPlaces(rawLightness * 100, 2);\n\n  return {\n    hue,\n    saturation,\n    lightness,\n    alpha,\n  };\n}\n\nexport function hexToRgb(color: string) {\n  if (color.length === 4) {\n    const repeatHex = (hex1: number, hex2: number) => color.slice(hex1, hex2).repeat(2);\n    const red = parseInt(repeatHex(1, 2), 16);\n    const green = parseInt(repeatHex(2, 3), 16);\n    const blue = parseInt(repeatHex(3, 4), 16);\n\n    return { red, green, blue };\n  }\n\n  const red = parseInt(color.slice(1, 3), 16);\n  const green = parseInt(color.slice(3, 5), 16);\n  const blue = parseInt(color.slice(5, 7), 16);\n\n  return { red, green, blue };\n}\n\nfunction hexToHsla(color: string): HSLAColor {\n  return rgbToHsl({ ...hexToRgb(color), alpha: 1 });\n}\n\nfunction rbgStringToHsla(color: string): HSLAColor {\n  return rgbToHsl(rgbToObject(color));\n}\n\nfunction hslToObject(color: string): HSLAColor {\n  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n  const colorMatch = color.match(/\\(([^)]+)\\)/);\n\n  if (!colorMatch) {\n    return {\n      hue: 0,\n      saturation: 0,\n      lightness: 0,\n      alpha: 0,\n    };\n  }\n\n  const [hue, saturation, lightness, alpha] = colorMatch[1].split(',');\n  const objColor = {\n    hue: roundNumberToDecimalPlaces(parseFloat(hue), 2),\n    saturation: roundNumberToDecimalPlaces(parseFloat(saturation), 2),\n    lightness: roundNumberToDecimalPlaces(parseFloat(lightness), 2),\n    alpha: roundNumberToDecimalPlaces(parseFloat(alpha), 2) || 1,\n  };\n  return objColor;\n}\nexport function rgbString(color: RGBColor | RGBAColor) {\n  const { red, green, blue } = color;\n\n  if ('alpha' in color) {\n    return `rgba(${red}, ${green}, ${blue}, ${color.alpha})`;\n  }\n  return `rgb(${red}, ${green}, ${blue})`;\n}\n\nexport const rgbaString = rgbString;\n\nexport function rgbToHex({ red, green, blue }: RGBColor) {\n  return `#${componentToHex(red)}${componentToHex(green)}${componentToHex(blue)}`;\n}\n\n// implements https://en.wikipedia.org/wiki/HSL_and_HSV#From_HSV\nexport function hsbToRgb(color: HSBColor | HSBAColor): RGBColor | RGBAColor {\n  const { hue, saturation, brightness } = color;\n  const colorAlpha = color as HSBAColor;\n  const alpha = colorAlpha.alpha || 1;\n  const chroma = brightness * saturation;\n\n  let { red, green, blue } = rgbFromHueAndChroma(hue, chroma);\n\n  const chromaBrightnessDelta = brightness - chroma;\n  red += chromaBrightnessDelta;\n  green += chromaBrightnessDelta;\n  blue += chromaBrightnessDelta;\n\n  return {\n    red: Math.round(red * 255),\n    green: Math.round(green * 255),\n    blue: Math.round(blue * 255),\n    alpha,\n  };\n}\n\nexport function hsbToHex(color: HSBColor) {\n  return rgbToHex(hsbToRgb({ ...color, alpha: 1 }));\n}\n\n// implements https://en.wikipedia.org/wiki/HSL_and_HSV#From_HSV\nexport function hslToRgb(color: HSLColor | HSLAColor): RGBAColor | RGBColor {\n  const { hue, saturation, lightness } = color;\n\n  const colorAlpha = color as HSLAColor;\n\n  const alpha = colorAlpha.alpha || 1;\n\n  const chroma = (1 - Math.abs(2 * (lightness / 100) - 1)) * (saturation / 100);\n\n  let { red, green, blue } = rgbFromHueAndChroma(hue, chroma);\n\n  const lightnessVal = lightness / 100 - chroma / 2;\n  red += lightnessVal;\n  green += lightnessVal;\n  blue += lightnessVal;\n\n  return {\n    red: Math.round(red * 255),\n    green: Math.round(green * 255),\n    blue: Math.round(blue * 255),\n    alpha,\n  };\n}\n\nexport function rgbToHsb(color: RGBAColor): HSBAColor {\n  const { hue, saturation, brightness, alpha = 1 } = rgbToHsbl(color, 'b');\n  return {\n    hue,\n    saturation,\n    brightness,\n    alpha,\n  };\n}\n\nexport function colorToHsla(color: string): HSLAColor {\n  const type = getColorType(color);\n  switch (type) {\n  case 'hex':\n    return hexToHsla(color);\n  case 'rgb':\n  case 'rgba':\n    return rbgStringToHsla(color);\n  case 'hsl':\n  case 'hsla':\n    return hslToObject(color);\n  case 'default':\n  default:\n    throw new Error('Accepted color formats are: hex, rgb, rgba, hsl and hsla');\n  }\n}\n"],"names":["red","green","blue"],"mappings":"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"}