var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
class Rect {
  constructor({ top = 0, left = 0, width = 0, height = 0 } = {}) {
    __publicField(this, "top");
    __publicField(this, "left");
    __publicField(this, "width");
    __publicField(this, "height");
    this.top = top;
    this.left = left;
    this.width = width;
    this.height = height;
  }
  static get zero() {
    return new Rect();
  }
  get center() {
    return {
      x: this.left + this.width / 2,
      y: this.top + this.height / 2
    };
  }
}
function getRectForNode(node) {
  try {
    const rect = node.getBoundingClientRect();
    return new Rect({
      top: rect.top,
      left: rect.left,
      width: rect.width,
      height: rect.height
    });
  } catch (_) {
    return new Rect({
      width: window.innerWidth,
      height: window.innerHeight
    });
  }
}
export {
  Rect as R,
  getRectForNode as g
};
//# sourceMappingURL=geometry.js.map
