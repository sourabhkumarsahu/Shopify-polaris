{"version":3,"file":"types.js","sources":["../../../../src/utilities/types.ts"],"sourcesContent":["import type { Component, ComputedRef, Ref, VNode } from 'vue';\n\nexport type Target = '_blank' | '_self' | '_parent' | '_top';\n\nexport type IconSource = Component | string | (string | Component)[]\n\nexport type VueNode = string | number | boolean | Component | Element | Function | VNode | null | undefined;\n\nexport type NonEmptyArray<T> = [T, ...T[]];\n\nexport interface BaseButton {\n  /** A unique identifier for the button */\n  id?: string;\n  /** A destination to link to, rendered in the href attribute of a link */\n  url?: string;\n  /** Forces url to open in a new tab */\n  external?: boolean;\n  /** Where to display the url */\n  target?: Target;\n  /** Tells the browser to download the url instead of opening it. Provides a hint for the downloaded filename if it is a string value */\n  download?: string | boolean;\n  /** Allows the button to submit a form */\n  submit?: boolean;\n  /** Disables the button, disallowing merchant interaction */\n  disabled?: boolean;\n  /** Replaces button text with a spinner while a background action is being performed */\n  loading?: boolean;\n  /** Sets the button in a pressed state */\n  pressed?: boolean;\n  /** Visually hidden text for screen readers */\n  accessibilityLabel?: string;\n  /** A valid WAI-ARIA role to define the semantic value of this element */\n  role?: string;\n  /** Id of the element the button controls */\n  ariaControls?: string;\n  /** Tells screen reader the controlled element is expanded */\n  ariaExpanded?: boolean;\n  /** Indicates the ID of the element that describes the button */\n  ariaDescribedBy?: string;\n  /** Indicates the current checked state of the button when acting as a toggle or switch */\n  ariaChecked?: 'false' | 'true';\n}\n\nexport interface Action {\n  /** A unique identifier for the action */\n  id?: string;\n  /** Content the action displays */\n  content?: string;\n  /** Visually hidden text for screen readers */\n  accessibilityLabel?: string;\n  /** A destination to link to, rendered in the action */\n  url?: string;\n  /** Forces url to open in a new tab */\n  external?: boolean;\n  /** Where to display the url */\n  target?: Target;\n  /** Callback when an action takes place */\n  onAction?(): void;\n  /** Callback when mouse enter */\n  onMouseEnter?(): void;\n  /** Callback when element is touched */\n  onTouchStart?(): void;\n}\n\nexport type Error = string | Element | (string | Element)[];\n\nexport enum Key {\n  Backspace = 8,\n  Tab = 9,\n  Enter = 13,\n  Shift = 16,\n  Ctrl = 17,\n  Alt = 18,\n  Pause = 19,\n  CapsLock = 20,\n  Escape = 27,\n  Space = 32,\n  PageUp = 33,\n  PageDown = 34,\n  End = 35,\n  Home = 36,\n  LeftArrow = 37,\n  UpArrow = 38,\n  RightArrow = 39,\n  DownArrow = 40,\n  Insert = 45,\n  Delete = 46,\n  Key0 = 48,\n  Key1 = 49,\n  Key2 = 50,\n  Key3 = 51,\n  Key4 = 52,\n  Key5 = 53,\n  Key6 = 54,\n  Key7 = 55,\n  Key8 = 56,\n  Key9 = 57,\n  KeyA = 65,\n  KeyB = 66,\n  KeyC = 67,\n  KeyD = 68,\n  KeyE = 69,\n  KeyF = 70,\n  KeyG = 71,\n  KeyH = 72,\n  KeyI = 73,\n  KeyJ = 74,\n  KeyK = 75,\n  KeyL = 76,\n  KeyM = 77,\n  KeyN = 78,\n  KeyO = 79,\n  KeyP = 80,\n  KeyQ = 81,\n  KeyR = 82,\n  KeyS = 83,\n  KeyT = 84,\n  KeyU = 85,\n  KeyV = 86,\n  KeyW = 87,\n  KeyX = 88,\n  KeyY = 89,\n  KeyZ = 90,\n  LeftMeta = 91,\n  RightMeta = 92,\n  Select = 93,\n  Numpad0 = 96,\n  Numpad1 = 97,\n  Numpad2 = 98,\n  Numpad3 = 99,\n  Numpad4 = 100,\n  Numpad5 = 101,\n  Numpad6 = 102,\n  Numpad7 = 103,\n  Numpad8 = 104,\n  Numpad9 = 105,\n  Multiply = 106,\n  Add = 107,\n  Subtract = 109,\n  Decimal = 110,\n  Divide = 111,\n  F1 = 112,\n  F2 = 113,\n  F3 = 114,\n  F4 = 115,\n  F5 = 116,\n  F6 = 117,\n  F7 = 118,\n  F8 = 119,\n  F9 = 120,\n  F10 = 121,\n  F11 = 122,\n  F12 = 123,\n  NumLock = 144,\n  ScrollLock = 145,\n  Semicolon = 186,\n  Equals = 187,\n  Comma = 188,\n  Dash = 189,\n  Period = 190,\n  ForwardSlash = 191,\n  GraveAccent = 192,\n  OpenBracket = 219,\n  BackSlash = 220,\n  CloseBracket = 221,\n  SingleQuote = 222,\n}\n\nexport interface DisableableAction extends Action {\n  /** Whether or not the action is disabled */\n  disabled?: boolean;\n}\n\nexport interface BadgeAction {\n  badge?: {\n    tone: 'new';\n    content: string;\n  };\n}\n\nexport interface DestructableAction extends Action {\n  /** Destructive action */\n  destructive?: boolean;\n}\n\nexport interface IconableAction extends Action {\n  /** Source of the icon */\n  icon?: IconSource;\n}\n\nexport interface TooltipAction {\n  /** Text content to render in a tooltip */\n  helpText?: VueNode;\n}\n\nexport interface LoadableAction extends Action {\n  /** Should a spinner be displayed */\n  loading?: boolean;\n}\n\nexport interface OutlineableAction extends Action {\n  /** Should action be displayed as an outlined button */\n  outline?: boolean;\n}\n\nexport interface PlainAction extends Action {\n  /** Should action be displayed as a plain link */\n  plain?: boolean;\n}\n\nexport interface ComplexAction\n  extends Action,\n    DisableableAction,\n    DestructableAction,\n    IconableAction,\n    OutlineableAction,\n    LoadableAction,\n    PlainAction {}\n\nexport interface MenuActionDescriptor extends ComplexAction, TooltipAction {\n  /** Zero-indexed numerical position. Overrides the action's order in the menu */\n  index?: number;\n}\n\nexport interface MenuGroupDescriptor extends BadgeAction {\n  /** Menu group title */\n  title: string;\n  /** List of actions */\n  actions: ActionListItemDescriptor[];\n  /** Icon to display */\n  icon?: IconableAction['icon'];\n  /** Action details */\n  details?: VueNode;\n  /** Disables action button */\n  disabled?: boolean;\n  /** Zero-indexed numerical position. Overrides the group's order in the menu. */\n  index?: number;\n  /** Callback when any action takes place */\n  onActionAnyItem?: ActionListItemDescriptor['onAction'];\n  /** Callback when the menu is clicked */\n  onClick?(openActions: () => void): void;\n}\n\nexport interface LinkAction {\n  /** A unique identifier for the action */\n  id?: string;\n  /** Content the action displays */\n  content?: string;\n  /** Visually hidden text for screen readers */\n  accessibilityLabel?: string;\n  /** A destination to link to */\n  url: string;\n}\n\nexport interface BaseCallbackAction {\n  /** A unique identifier for the action */\n  id?: string;\n  /** Content the action displays */\n  content?: string;\n  /** Visually hidden text for screen readers */\n  accessibilityLabel?: string;\n  /** Callback when an action takes place */\n  onAction(): void;\n}\n\nexport interface CallbackAction extends BaseCallbackAction {}\n\nexport interface ActionListItemDescriptor\n  extends DisableableAction,\n    DestructableAction {\n  /** Visually hidden text for screen readers */\n  accessibilityLabel?: string;\n  /** @deprecated Badge component */\n  badge?: {\n    tone: 'new';\n    content: string;\n  };\n  /** Prefix source */\n  prefix?: VueNode;\n  /** Suffix source */\n  suffix?: VueNode;\n  /** Additional hint text to display with item */\n  helpText?: string;\n  /** @deprecated Source of the icon */\n  icon?: IconSource;\n  /** @deprecated Image source */\n  image?: string;\n  /** @deprecated Add an ellipsis suffix to action content. ellipsis appends `...` without truncating. Use truncate instead. */\n  ellipsis?: boolean;\n  /** Truncate the action content either at the beginning or at the end */\n  truncate?: boolean;\n  /** Whether the action is active or not */\n  active?: boolean;\n  /** The item variations */\n  variant?: 'default' | 'menu' | 'indented';\n  /** Defines a role for the action */\n  role?: string;\n}\n\nexport interface ActionListSection {\n  /** Section title */\n  title?: string;\n  /** Collection of action items for the list */\n  items: ActionListItemDescriptor[];\n}\n\nexport interface MenuActionDescriptor extends ComplexAction {\n  /** Zero-indexed numerical position. Overrides the action's order in the menu */\n  index?: number;\n}\n\nexport interface MenuGroupDescriptor extends BadgeAction {\n  /** Menu group title */\n  title: string;\n  /** List of actions */\n  actions: ActionListItemDescriptor[];\n  /** Icon to display */\n  icon?: IconableAction['icon'];\n  /** Disables action button */\n  disabled?: boolean;\n  /** Zero-indexed numerical position. Overrides the group's order in the menu. */\n  index?: number;\n}\n\nexport interface CheckboxHandles {\n  focus(): void;\n}\n\nexport interface ResourceListContextType {\n  selectMode?: Ref<boolean>;\n  selectable?: ComputedRef<boolean>;\n  selectedItems?: ComputedRef<ResourceListSelectedItems>;\n  resourceName?: {\n    singular: string;\n    plural: string;\n  };\n  hasBulkActions?: boolean;\n  loading?: boolean;\n  onSelectionChange?(\n    selected: boolean,\n    id: string,\n    sortNumber: number | undefined,\n    shiftKey: boolean,\n  ): void;\n}\n\nexport type ResourceListSelectedItems = string[] | 'All';\nexport type CheckableButtonKey = 'plain' | 'bulkSm' | 'bulkLg';\nexport type CheckableButtons = Map<CheckableButtonKey, CheckboxHandles>;\nexport interface OptionDescriptor {\n  /** Value of the option */\n  value: string;\n  /** Whether the option is disabled or not */\n  disabled?: boolean;\n  /** Whether the option is active or not */\n  active?: boolean;\n  /** Unique identifier for the option */\n  id?: string;\n  /** Display label for the option */\n  label: string,\n  /** Media to display to the left of the option content */\n  media?: VueNode;\n}\n\nexport interface SectionDescriptor {\n  /** Collection of options within the section */\n  options: OptionDescriptor[];\n  /** Section title */\n  title?: string;\n}\n\nexport type Descriptor = SectionDescriptor | OptionDescriptor;\nexport interface NavigableOption {\n  domId: string;\n  value: string;\n  element: HTMLElement;\n  disabled: boolean;\n  isAction?: boolean;\n  index?: number;\n}\n\nexport interface ListboxContextType {\n  onOptionSelect(option: NavigableOption): void;\n  setLoading(label?: string): void;\n}\n\nexport interface ComboboxListboxOptionType {\n  // Whether the option should visually support multiple selection\n  allowMultiple?: boolean;\n}\n\nexport interface ComboboxListboxType {\n  // Value of the Texfields ID for listbox aria-labelledby\n  textFieldLabelId?: Ref<string | undefined>;\n  // Enables/disables keyboard control\n  textFieldFocused?: Ref<boolean>;\n  // Unique ID to set on the listbox. Used to set the Combobox aria-owns and TextField aria-controls attributes.\n  listboxId?: Ref<string | undefined>;\n  // Whether or not more options are available to lazy load. Use the hasMoreResults boolean provided by the GraphQL API of the paginated data. */\n  willLoadMoreOptions?: ComputedRef<boolean>;\n  // Sets the value for the TextField aria-activedescendant attribute.\n  setActiveOptionId?(id: string): void;\n  // Callback to set a generated listbox ID.\n  setListboxId?(id: string): void;\n  // Callback fired when an option is selected.\n  onOptionSelected?(): void;\n  // Callback fired when keyboard user navigates to the last item. Use to lazy load when listbox option data is paginated.\n  onKeyToBottom?(): void;\n}\n\nexport interface AppliedFilterInterface {\n  /** A unique key used to identify the applied filter */\n  name: string;\n  /** A label for the applied filter */\n  label: string;\n  unsavedChanges?: boolean;\n  /** Callback when the remove button is pressed */\n  onRemove(key: string): void;\n}\n\n\nexport interface FilterInterface {\n  /** A unique key used to identify the filter */\n  name: string;\n  /** The label for the filter */\n  label: string;\n  /** The markup for the given filter */\n  filter: VueNode;\n  /** Whether or not the filter should have a shortcut popover displayed */\n  shortcut?: boolean;\n  /** Whether or not the filter should be pinned, permanently displaying the filter */\n  pinned?: boolean;\n  /** Whether or not the filter is disabled */\n  disabled?: boolean;\n  /**\n   * @default false\n   * Whether or not the clear button is displayed\n   */\n  hideClearButton?: boolean;\n  /** Optional callback when filter is pressed */\n  onAction?: () => void;\n  /** Suffix source */\n  suffix?: VueNode;\n  /** Optional section heading that this filter will go under  */\n  section?: string;\n  /** Optional: hides the filter from the dropdown  */\n  hidden?: boolean;\n}\n"],"names":["Key"],"mappings":"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"}