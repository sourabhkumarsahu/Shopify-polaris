import { ref, computed, onMounted, onBeforeUnmount, watch } from "vue";
import { d as debounce } from "../../polaris/polaris-react/src/utilities/debounce.js";
const DEBOUNCE_PERIOD = 250;
function useIsSticky(mode, disabled, isFlushWhenSticky) {
  const hasIOSupport = typeof window !== "undefined" && Boolean(window.IntersectionObserver);
  const indexFilteringHeight = ref(0);
  const isSticky = ref(false);
  const measurerRef = ref(null);
  const intersectionRef = ref(null);
  const handleIntersect = (entries) => {
    entries.forEach((entry) => {
      isSticky.value = !entry.isIntersecting;
    });
  };
  const options = {
    root: null,
    rootMargin: `${isFlushWhenSticky ? "0px" : "-56px"} 0px 0px 0px`,
    threshold: 0
  };
  const observerRef = ref(hasIOSupport ? new IntersectionObserver(handleIntersect, options) : null);
  const box = computed(() => {
    var _a;
    return (_a = measurerRef.value) == null ? void 0 : _a.getBoundingClientRect();
  });
  const computeTableDimensions = () => {
    if (!measurerRef.value) {
      return {
        height: 0
      };
    }
    if (!box.value) {
      return;
    }
    const height = box.value.height;
    indexFilteringHeight.value = height;
  };
  const debouncedComputeDimensions = debounce(
    computeTableDimensions,
    DEBOUNCE_PERIOD,
    {
      trailing: true
    }
  );
  onMounted(() => {
    window.addEventListener("resize", debouncedComputeDimensions);
    if (!observerRef.value) {
      return;
    }
    if (intersectionRef.value) {
      observerRef.value.observe(intersectionRef.value);
    }
  });
  onBeforeUnmount(() => {
    var _a;
    window.removeEventListener("resize", debouncedComputeDimensions);
    (_a = observerRef.value) == null ? void 0 : _a.disconnect();
  });
  watch(
    () => mode,
    () => {
      computeTableDimensions();
    },
    { flush: "post" }
  );
  return {
    intersectionRef,
    measurerRef,
    isSticky: isSticky.value && !disabled,
    indexFilteringHeight
  };
}
export {
  useIsSticky as u
};
//# sourceMappingURL=useIsSticky.js.map
