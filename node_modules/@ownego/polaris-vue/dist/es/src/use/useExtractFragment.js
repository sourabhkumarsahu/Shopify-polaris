import { computed } from "vue";
function useExtractFragment(slot) {
  const slotsElms = computed(() => {
    let elm = [];
    if (slot) {
      const groups = slot().map((group) => {
        if (group.children && group.children.length) {
          return extractElement(group);
        }
        return group;
      });
      elm = groups.flat();
    }
    return elm;
  });
  const isFragment = (item) => {
    var _a, _b, _c;
    return ((_a = item.type) == null ? void 0 : _a.toString()) === "Symbol(Fragment)" || ((_b = item.type) == null ? void 0 : _b.toString()) === "Symbol()" || ((_c = item.type) == null ? void 0 : _c.toString()) === "Symbol(v-fgt)";
  };
  const extractElement = (elm) => {
    if (!isFragment(elm)) {
      return [elm];
    }
    const children = elm.children;
    const items = [];
    for (const child of children) {
      if (isFragment(child)) {
        items.push(...extractElement(child));
      } else {
        items.push(child);
      }
    }
    return items;
  };
  return {
    slotsElms,
    extractElement
  };
}
export {
  useExtractFragment as u
};
//# sourceMappingURL=useExtractFragment.js.map
