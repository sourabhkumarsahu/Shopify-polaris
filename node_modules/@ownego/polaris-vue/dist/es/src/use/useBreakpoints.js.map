{"version":3,"file":"useBreakpoints.js","sources":["../../../../src/use/useBreakpoints.ts"],"sourcesContent":["import { onBeforeUnmount, ref } from 'vue';\nimport {getMediaConditions, themeDefault} from '@shopify/polaris-tokens';\nimport type {\n  BreakpointsAlias,\n  BreakpointsAliasDirection,\n  BreakpointsTokenGroup,\n} from '@shopify/polaris-tokens';\n\nconst Breakpoints = {\n  // TODO: Update to smDown\n  navigationBarCollapsed: '767.95px',\n  // TODO: Update to lgDown\n  stackedContent: '1039.95px',\n};\n\nconst noWindowMatches: MediaQueryList = {\n  media: '',\n  addListener: noop,\n  removeListener: noop,\n  matches: false,\n  onchange: noop,\n  addEventListener: noop,\n  removeEventListener: noop,\n  dispatchEvent: (_: Event) => true,\n};\n\nfunction noop() {}\n\nexport function navigationBarCollapsed() {\n  return typeof window === 'undefined'\n    ? noWindowMatches\n    : window.matchMedia(`(max-width: ${Breakpoints.navigationBarCollapsed})`);\n}\n\nexport function stackedContent() {\n  return typeof window === 'undefined'\n    ? noWindowMatches\n    : window.matchMedia(`(max-width: ${Breakpoints.stackedContent})`);\n}\n\n/**\n * Directional alias for each Polaris `breakpoints` token.\n *\n * @example 'smUp' | 'smDown' | 'smOnly' | 'mdUp' | etc.\n */\nexport type BreakpointsDirectionAlias =\n  `${BreakpointsAlias}${Capitalize<BreakpointsAliasDirection>}`;\n\n/**\n * Match results for each directional Polaris `breakpoints` alias.\n */\ntype BreakpointsMatches = {\n  [DirectionAlias in BreakpointsDirectionAlias]: boolean;\n};\n\nconst breakpointsQueryEntries = getBreakpointsQueryEntries(\n  themeDefault.breakpoints,\n);\n\nfunction getMatches(\n  defaults?: UseBreakpointsOptions['defaults'],\n  /**\n   * Used to force defaults on initial client side render so they match SSR\n   * values and hence avoid a Hydration error.\n   */\n  forceDefaults?: boolean,\n) {\n  const isServer = typeof window === 'undefined' || typeof document === 'undefined';\n\n  if (!isServer && !forceDefaults) {\n    return Object.fromEntries(\n      breakpointsQueryEntries.map(([directionAlias, query]) => [\n        directionAlias,\n        window.matchMedia(query).matches,\n      ]),\n    ) as BreakpointsMatches;\n  }\n\n  if (typeof defaults === 'object' && defaults !== null) {\n    return Object.fromEntries(\n      breakpointsQueryEntries.map(([directionAlias]) => [\n        directionAlias,\n        defaults[directionAlias] ?? false,\n      ]),\n    ) as BreakpointsMatches;\n  }\n\n  return Object.fromEntries(\n    breakpointsQueryEntries.map(([directionAlias]) => [\n      directionAlias,\n      defaults ?? false,\n    ]),\n  ) as BreakpointsMatches;\n}\n\nexport interface UseBreakpointsOptions {\n  /**\n   * Default values applied during SSR. Accepts a single value to use for each\n   * breakpoint alias, or an object for configuring select breakpoints.\n   *\n   * @default false\n   */\n  defaults:\n    | boolean\n    | {\n        [DirectionAlias in BreakpointsDirectionAlias]?: boolean;\n      };\n}\n\n/**\n * Retrieves media query matches for each directional Polaris `breakpoints` alias.\n *\n * @example\n * const {smUp} = useBreakpoints();\n * return smUp && 'Hello world';\n *\n * @example\n * const {mdUp} = useBreakpoints({defaults: {mdUp: true}});\n * mdUp //=> `true` during SSR\n *\n * @example\n * const breakpoints = useBreakpoints({defaults: true});\n * breakpoints //=> All values will be `true` during SSR\n */\nexport function useBreakpoints(options?: UseBreakpointsOptions) {\n  // On SSR, and initial CSR, we force usage of the defaults to avoid a\n  // hydration mismatch error.\n  // Later, in the effect, we will call this again on the client side without\n  // any defaults to trigger a more accurate client side evaluation.\n  const breakpoints = ref<BreakpointsMatches>(getMatches(options?.defaults, true));\n\n  const setBreakpoints = (value: BreakpointsMatches) => {\n    breakpoints.value = value;\n  };\n\n  // useIsomorphicLayoutEffect - setup\n  const mediaQueryLists = breakpointsQueryEntries.map(([_, query]) =>\n    window.matchMedia(query),\n  );\n\n  const handler = () => setBreakpoints(getMatches());\n\n  mediaQueryLists.forEach((mql) => {\n    if (mql.addListener) {\n      mql.addListener(handler);\n    } else {\n      mql.addEventListener('change', handler);\n    }\n  });\n\n  // Trigger the breakpoint recalculation at least once client-side to ensure\n  // we don't have stale default values from SSR.\n  handler();\n\n  // useIsomorphicLayoutEffect - teardown\n  onBeforeUnmount(() => {\n    mediaQueryLists.forEach((mql) => {\n      if (mql.removeListener) {\n        mql.removeListener(handler);\n      } else {\n        mql.removeEventListener('change', handler);\n      }\n    });\n  });\n\n  return breakpoints;\n}\n\n/**\n * Converts `breakpoints` tokens into directional media query entries.\n *\n * @example\n * const breakpointsQueryEntries = getBreakpointsQueryEntries(breakpoints);\n * breakpointsQueryEntries === [\n *   ['xsUp', '(min-width: ...)'],\n *   ['xsDown', '(max-width: ...)'],\n *   ['xsOnly', '(min-width: ...) and (max-width: ...)'],\n *   ['smUp', '(min-width: ...) and (max-width: ...)'],\n *   ['mdUp', '(min-width: ...) and (max-width: ...)'],\n *   // etc.\n * ]\n */\nexport function getBreakpointsQueryEntries(breakpoints: BreakpointsTokenGroup) {\n  const mediaConditionEntries = Object.entries(getMediaConditions(breakpoints));\n\n  return mediaConditionEntries\n    .map(([breakpointsToken, mediaConditions]) =>\n      Object.entries(mediaConditions).map(([direction, mediaCondition]) => {\n        const breakpointsAlias = breakpointsToken.split('-')[1];\n\n        // e.g. smUp, smDown, smOnly, etc.\n        const directionAlias = `${breakpointsAlias}${capitalize(direction)}`;\n\n        return [directionAlias, mediaCondition];\n      }),\n    )\n    .flat() as [BreakpointsDirectionAlias, string][];\n}\n\nfunction capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n"],"names":[],"mappings":";;AAQA,MAAM,cAAc;AAAA;AAAA,EAElB,wBAAwB;AAAA;AAAA,EAExB,gBAAgB;AAClB;AAEA,MAAM,kBAAkC;AAAA,EACtC,OAAO;AAAA,EACP,aAAa;AAAA,EACb,gBAAgB;AAAA,EAChB,SAAS;AAAA,EACT,UAAU;AAAA,EACV,kBAAkB;AAAA,EAClB,qBAAqB;AAAA,EACrB,eAAe,CAAC,MAAa;AAC/B;AAEA,SAAS,OAAO;AAAC;AAEV,SAAS,yBAAyB;AAChC,SAAA,OAAO,WAAW,cACrB,kBACA,OAAO,WAAW,eAAe,YAAY,sBAAsB,GAAG;AAC5E;AAEO,SAAS,iBAAiB;AACxB,SAAA,OAAO,WAAW,cACrB,kBACA,OAAO,WAAW,eAAe,YAAY,cAAc,GAAG;AACpE;AAiBA,MAAM,0BAA0B;AAAA,EAC9B,aAAa;AACf;AAEA,SAAS,WACP,UAKA,eACA;AACA,QAAM,WAAW,OAAO,WAAW,eAAe,OAAO,aAAa;AAElE,MAAA,CAAC,YAAY,CAAC,eAAe;AAC/B,WAAO,OAAO;AAAA,MACZ,wBAAwB,IAAI,CAAC,CAAC,gBAAgB,KAAK,MAAM;AAAA,QACvD;AAAA,QACA,OAAO,WAAW,KAAK,EAAE;AAAA,MAAA,CAC1B;AAAA,IAAA;AAAA,EAEL;AAEA,MAAI,OAAO,aAAa,YAAY,aAAa,MAAM;AACrD,WAAO,OAAO;AAAA,MACZ,wBAAwB,IAAI,CAAC,CAAC,cAAc,MAAM;AAAA,QAChD;AAAA,QACA,SAAS,cAAc,KAAK;AAAA,MAAA,CAC7B;AAAA,IAAA;AAAA,EAEL;AAEA,SAAO,OAAO;AAAA,IACZ,wBAAwB,IAAI,CAAC,CAAC,cAAc,MAAM;AAAA,MAChD;AAAA,MACA,YAAY;AAAA,IAAA,CACb;AAAA,EAAA;AAEL;AA+BO,SAAS,eAAe,SAAiC;AAK9D,QAAM,cAAc,IAAwB,WAAW,mCAAS,UAAU,IAAI,CAAC;AAEzE,QAAA,iBAAiB,CAAC,UAA8B;AACpD,gBAAY,QAAQ;AAAA,EAAA;AAItB,QAAM,kBAAkB,wBAAwB;AAAA,IAAI,CAAC,CAAC,GAAG,KAAK,MAC5D,OAAO,WAAW,KAAK;AAAA,EAAA;AAGzB,QAAM,UAAU,MAAM,eAAe,WAAY,CAAA;AAEjC,kBAAA,QAAQ,CAAC,QAAQ;AAC/B,QAAI,IAAI,aAAa;AACnB,UAAI,YAAY,OAAO;AAAA,IAAA,OAClB;AACD,UAAA,iBAAiB,UAAU,OAAO;AAAA,IACxC;AAAA,EAAA,CACD;AAIO;AAGR,kBAAgB,MAAM;AACJ,oBAAA,QAAQ,CAAC,QAAQ;AAC/B,UAAI,IAAI,gBAAgB;AACtB,YAAI,eAAe,OAAO;AAAA,MAAA,OACrB;AACD,YAAA,oBAAoB,UAAU,OAAO;AAAA,MAC3C;AAAA,IAAA,CACD;AAAA,EAAA,CACF;AAEM,SAAA;AACT;AAgBO,SAAS,2BAA2B,aAAoC;AAC7E,QAAM,wBAAwB,OAAO,QAAQ,mBAAmB,WAAW,CAAC;AAE5E,SAAO,sBACJ;AAAA,IAAI,CAAC,CAAC,kBAAkB,eAAe,MACtC,OAAO,QAAQ,eAAe,EAAE,IAAI,CAAC,CAAC,WAAW,cAAc,MAAM;AACnE,YAAM,mBAAmB,iBAAiB,MAAM,GAAG,EAAE,CAAC;AAGtD,YAAM,iBAAiB,GAAG,gBAAgB,GAAG,WAAW,SAAS,CAAC;AAE3D,aAAA,CAAC,gBAAgB,cAAc;AAAA,IAAA,CACvC;AAAA,IAEF,KAAK;AACV;AAEA,SAAS,WAAW,KAAa;AACxB,SAAA,IAAI,OAAO,CAAC,EAAE,gBAAgB,IAAI,MAAM,CAAC;AAClD;"}