{"version":3,"file":"useIndexResourceState.js","sources":["../../../../src/use/useIndexResourceState.ts"],"sourcesContent":["import { ref } from 'vue';\nimport { SelectionType, type Range } from '@/components/IndexProvider/types';\n\ntype ResourceIDResolver<T extends {[key: string]: unknown}> = (\n  resource: T,\n) => string;\n\nfunction defaultResourceIDResolver(resource: {[key: string]: any}): string {\n  if ('id' in resource) {\n    return resource.id;\n  }\n\n  throw new Error(\n    'Your resource does not directly contain an `id`. Pass a `resourceIDResolver` to `useIndexResourceState`',\n  );\n}\n\nexport function useIndexResourceState<T extends {[key: string]: unknown}>(\n  resources: T[],\n  {\n    selectedResources: initSelectedResources = [],\n    allResourcesSelected: initAllResourcesSelected = false,\n    resourceIDResolver = defaultResourceIDResolver,\n    resourceFilter = undefined,\n  }: {\n    selectedResources?: string[];\n    allResourcesSelected?: boolean;\n    resourceIDResolver?: ResourceIDResolver<T>;\n    resourceFilter?: (value: T, index: number) => boolean;\n  } = {\n    selectedResources: [],\n    allResourcesSelected: false,\n    resourceIDResolver: defaultResourceIDResolver,\n    resourceFilter: undefined,\n  },\n) {\n  const tmpSelectedResources = ref(initSelectedResources);\n  const tmpAllResourcesSelected = ref(initAllResourcesSelected);\n\n  const handleSelectionChange = (\n    selectionType: SelectionType,\n    isSelecting: boolean,\n    selection?: string | Range,\n    // This is not used in the function, but needed to keep the type compatible with IndexProviderProps onSelectionChange\n    _position?: number,\n  ) => {\n    if (selectionType === SelectionType.All) {\n      tmpAllResourcesSelected.value = isSelecting;\n    } else if (tmpAllResourcesSelected.value) {\n      tmpAllResourcesSelected.value = false;\n    }\n\n    switch (selectionType) {\n      case SelectionType.Single:\n        tmpSelectedResources.value = isSelecting\n            ? [...tmpSelectedResources.value, selection as string]\n            : tmpSelectedResources.value.filter((id) => id !== selection);\n        break;\n      case SelectionType.All:\n      case SelectionType.Page:\n        if (resourceFilter) {\n          const filteredResources = resources.filter(resourceFilter);\n          tmpSelectedResources.value = isSelecting && tmpSelectedResources.value.length < filteredResources.length\n            ? filteredResources.map(resourceIDResolver)\n            : [];\n        } else {\n          tmpSelectedResources.value = isSelecting ? resources.map(resourceIDResolver) : [];\n        }\n\n        break;\n      case SelectionType.Multi:\n        if (!selection) break;\n\n        tmpSelectedResources.value = (() => {\n          const ids: string[] = [];\n          const filteredResources = resourceFilter\n            ? resources.filter(resourceFilter)\n            : resources;\n          for (\n            let i = selection[0] as number;\n            i <= (selection[1] as number);\n            i++\n          ) {\n            if (filteredResources.includes(resources[i])) {\n              const id = resourceIDResolver(resources[i]);\n\n              if (\n                (isSelecting && !tmpSelectedResources.value.includes(id)) ||\n                (!isSelecting && tmpSelectedResources.value.includes(id))\n              ) {\n                ids.push(id);\n              }\n            }\n          }\n\n          return isSelecting\n            ? [...tmpSelectedResources.value, ...ids]\n            : tmpSelectedResources.value.filter((id) => !ids.includes(id));\n        })();\n\n        break;\n      case SelectionType.Range:\n        if (!selection) break;\n\n        tmpSelectedResources.value = (() => {\n          const filteredResources = resourceFilter\n            ? resources.filter(resourceFilter)\n            : resources;\n\n          const resourceIds = filteredResources.map(resourceIDResolver);\n\n          const selectedIds = resourceIds.slice(\n            Number(selection[0]),\n            Number(selection[1]) + 1,\n          );\n\n          const isIndeterminate = selectedIds.some((id) => {\n            return tmpSelectedResources.value.includes(id);\n          });\n\n          const isChecked = selectedIds.every((id) => {\n            return tmpSelectedResources.value.includes(id);\n          });\n\n          const isSelectingAllInRange =\n            !isChecked && (isSelecting || isIndeterminate);\n\n          const nextSelectedResources = isSelectingAllInRange\n            ? [\n                ...new Set([\n                  ...tmpSelectedResources.value,\n                  ...selectedIds,\n                ]).values(),\n              ]\n            : tmpSelectedResources.value.filter(\n                (id) => !selectedIds.includes(id),\n              );\n\n          return nextSelectedResources;\n        })();\n        break;\n    }\n  };\n\n  const clearSelection = () => {\n    tmpSelectedResources.value = [];\n    tmpAllResourcesSelected.value = false;\n  };\n\n  const removeSelectedResources = (removeResources: string[]) => {\n    const selectedResourcesCopy = [...tmpSelectedResources.value];\n\n    const newSelectedResources = selectedResourcesCopy.filter(\n      (resource) => !removeResources.includes(resource),\n    );\n\n    tmpSelectedResources.value = newSelectedResources;\n\n    if (newSelectedResources.length === 0) {\n      tmpAllResourcesSelected.value = false;\n    }\n  };\n\n  return {\n    selectedResources: tmpSelectedResources,\n    allResourcesSelected: tmpAllResourcesSelected,\n    handleSelectionChange,\n    clearSelection,\n    removeSelectedResources,\n  };\n}\n"],"names":[],"mappings":";;AAOA,SAAS,0BAA0B,UAAwC;AACzE,MAAI,QAAQ,UAAU;AACpB,WAAO,SAAS;AAAA,EAClB;AAEA,QAAM,IAAI;AAAA,IACR;AAAA,EAAA;AAEJ;AAEO,SAAS,sBACd,WACA;AAAA,EACE,mBAAmB,wBAAwB,CAAC;AAAA,EAC5C,sBAAsB,2BAA2B;AAAA,EACjD,qBAAqB;AAAA,EACrB,iBAAiB;AACnB,IAKI;AAAA,EACF,mBAAmB,CAAC;AAAA,EACpB,sBAAsB;AAAA,EACtB,oBAAoB;AAAA,EACpB,gBAAgB;AAClB,GACA;AACM,QAAA,uBAAuB,IAAI,qBAAqB;AAChD,QAAA,0BAA0B,IAAI,wBAAwB;AAE5D,QAAM,wBAAwB,CAC5B,eACA,aACA,WAEA,cACG;AACC,QAAA,kBAAkB,cAAc,KAAK;AACvC,8BAAwB,QAAQ;AAAA,IAAA,WACvB,wBAAwB,OAAO;AACxC,8BAAwB,QAAQ;AAAA,IAClC;AAEA,YAAQ,eAAe;AAAA,MACrB,KAAK,cAAc;AACjB,6BAAqB,QAAQ,cACvB,CAAC,GAAG,qBAAqB,OAAO,SAAmB,IACnD,qBAAqB,MAAM,OAAO,CAAC,OAAO,OAAO,SAAS;AAChE;AAAA,MACF,KAAK,cAAc;AAAA,MACnB,KAAK,cAAc;AACjB,YAAI,gBAAgB;AACZ,gBAAA,oBAAoB,UAAU,OAAO,cAAc;AACpC,+BAAA,QAAQ,eAAe,qBAAqB,MAAM,SAAS,kBAAkB,SAC9F,kBAAkB,IAAI,kBAAkB,IACxC,CAAA;AAAA,QAAC,OACA;AACL,+BAAqB,QAAQ,cAAc,UAAU,IAAI,kBAAkB,IAAI;QACjF;AAEA;AAAA,MACF,KAAK,cAAc;AACjB,YAAI,CAAC,UAAW;AAEhB,6BAAqB,SAAS,MAAM;AAClC,gBAAM,MAAgB,CAAA;AACtB,gBAAM,oBAAoB,iBACtB,UAAU,OAAO,cAAc,IAC/B;AAEE,mBAAA,IAAI,UAAU,CAAC,GACnB,KAAM,UAAU,CAAC,GACjB,KACA;AACA,gBAAI,kBAAkB,SAAS,UAAU,CAAC,CAAC,GAAG;AAC5C,oBAAM,KAAK,mBAAmB,UAAU,CAAC,CAAC;AAE1C,kBACG,eAAe,CAAC,qBAAqB,MAAM,SAAS,EAAE,KACtD,CAAC,eAAe,qBAAqB,MAAM,SAAS,EAAE,GACvD;AACA,oBAAI,KAAK,EAAE;AAAA,cACb;AAAA,YACF;AAAA,UACF;AAEA,iBAAO,cACH,CAAC,GAAG,qBAAqB,OAAO,GAAG,GAAG,IACtC,qBAAqB,MAAM,OAAO,CAAC,OAAO,CAAC,IAAI,SAAS,EAAE,CAAC;AAAA,QAAA;AAGjE;AAAA,MACF,KAAK,cAAc;AACjB,YAAI,CAAC,UAAW;AAEhB,6BAAqB,SAAS,MAAM;AAClC,gBAAM,oBAAoB,iBACtB,UAAU,OAAO,cAAc,IAC/B;AAEE,gBAAA,cAAc,kBAAkB,IAAI,kBAAkB;AAE5D,gBAAM,cAAc,YAAY;AAAA,YAC9B,OAAO,UAAU,CAAC,CAAC;AAAA,YACnB,OAAO,UAAU,CAAC,CAAC,IAAI;AAAA,UAAA;AAGzB,gBAAM,kBAAkB,YAAY,KAAK,CAAC,OAAO;AACxC,mBAAA,qBAAqB,MAAM,SAAS,EAAE;AAAA,UAAA,CAC9C;AAED,gBAAM,YAAY,YAAY,MAAM,CAAC,OAAO;AACnC,mBAAA,qBAAqB,MAAM,SAAS,EAAE;AAAA,UAAA,CAC9C;AAEK,gBAAA,wBACJ,CAAC,cAAc,eAAe;AAEhC,gBAAM,wBAAwB,wBAC1B;AAAA,YACE,wBAAO,IAAI;AAAA,cACT,GAAG,qBAAqB;AAAA,cACxB,GAAG;AAAA,YACJ,CAAA,GAAE,OAAO;AAAA,UAAA,IAEZ,qBAAqB,MAAM;AAAA,YACzB,CAAC,OAAO,CAAC,YAAY,SAAS,EAAE;AAAA,UAAA;AAG/B,iBAAA;AAAA,QAAA;AAET;AAAA,IACJ;AAAA,EAAA;AAGF,QAAM,iBAAiB,MAAM;AAC3B,yBAAqB,QAAQ;AAC7B,4BAAwB,QAAQ;AAAA,EAAA;AAG5B,QAAA,0BAA0B,CAAC,oBAA8B;AAC7D,UAAM,wBAAwB,CAAC,GAAG,qBAAqB,KAAK;AAE5D,UAAM,uBAAuB,sBAAsB;AAAA,MACjD,CAAC,aAAa,CAAC,gBAAgB,SAAS,QAAQ;AAAA,IAAA;AAGlD,yBAAqB,QAAQ;AAEzB,QAAA,qBAAqB,WAAW,GAAG;AACrC,8BAAwB,QAAQ;AAAA,IAClC;AAAA,EAAA;AAGK,SAAA;AAAA,IACL,mBAAmB;AAAA,IACnB,sBAAsB;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;"}