import { u as useId } from "./useId.js";
import { inject, computed, watchEffect, onUnmounted, ref } from "vue";
function useFocusManager({ trapping }) {
  const context = inject("focus-manager");
  const id = useId();
  if (!context) {
    throw new Error("No FocusManager was provided.");
  }
  const {
    trapFocusList,
    add: addFocusItem,
    remove: removeFocusItem
  } = context;
  const canSafelyFocus = computed(() => trapFocusList.value[0] === String(id));
  watchEffect(() => {
    if (!trapping) {
      return;
    }
    addFocusItem(String(id));
  });
  onUnmounted(() => {
    removeFocusItem(String(id));
  });
  return { canSafelyFocus };
}
function useFocusManagerContext() {
  const trapFocusList = ref([]);
  const add = (id) => {
    trapFocusList.value = [...trapFocusList.value, id];
  };
  const remove = (id) => {
    let removed = true;
    const clone = [...trapFocusList.value];
    const index = clone.indexOf(id);
    if (index === -1) {
      removed = false;
    } else {
      clone.splice(index, 1);
    }
    trapFocusList.value = clone;
    return removed;
  };
  return {
    add,
    remove,
    trapFocusList
  };
}
export {
  useFocusManager as a,
  useFocusManagerContext as u
};
//# sourceMappingURL=useFocusManager.js.map
