{"version":3,"file":"Link.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/Link/Link.vue"],"sourcesContent":["<template lang=\"pug\">\nrouter-link(\n  v-if=\"to\",\n  :to=\"to\",\n  :class=\"className\",\n  :aria-label=\"accessibilityLabel\",\n  :data-primary-link=\"dataPrimaryLink\",\n)\n  slot\n\nUnstyledLink(\n  v-else-if=\"url\",\n  :class=\"className\",\n  :url=\"url\",\n  :external=\"external\",\n  :target=\"target\",\n  :aria-label=\"accessibilityLabel\",\n  :data-primary-link=\"dataPrimaryLink ?? undefined\",\n  @click=\"emits('click')\",\n)\n  slot\n\nbutton(\n  v-else,\n  type=\"button\",\n  :class=\"className\",\n  :aria-label=\"accessibilityLabel\",\n  :data-primary-link=\"dataPrimaryLink ?? undefined\",\n  @click=\"emits('click')\",\n)\n  slot\n</template>\n\n<script setup lang=\"ts\">\nimport {\n  inject,\n  computed,\n} from 'vue';\nimport { UnstyledLink } from '@/components';\nimport { classNames } from '@/utilities/css';\nimport type {\n  Target,\n  VueNode,\n} from '@/utilities/types';\nimport type { RouteLocationRaw } from './types';\nimport styles from '@polaris/components/Link/Link.module.css';\n\nexport type LinkProps = {\n  /** ID for the link */\n  id?: string;\n  /** The url to link to */\n  url?: string;\n  /**\n   * Router link 'to' option, if this prop is provided router-link component will be render\n   * <a href=\"https://router.vuejs.org/api/interfaces/RouterLinkProps.html#to\" target=\"blank\"> details </a>\n   */\n  to?: RouteLocationRaw\n  /** Makes the link open in a new tab\n   * @deprecated use `target` set to `_blank` instead\n   */\n  external?: boolean;\n  /** Where to display the url */\n  target?: Target;\n  /** Makes the link color the same as the current text color and adds an underline */\n  monochrome?: boolean;\n  /** Removes text decoration underline to the link */\n  removeUnderline?: boolean;\n  /** Descriptive text to be read to screenreaders */\n  accessibilityLabel?: string;\n  /** Indicates whether or not the link is the primary navigation link when rendered inside of an `IndexTable.Row` */\n  dataPrimaryLink?: boolean;\n}\n\nconst bannerContext = inject('banner-context', false);\n\nconst props = defineProps<LinkProps>();\n\ndefineSlots<{\n  /** Content to display inside the link */\n  default: (_: VueNode) => null;\n}>();\n\nconst emits = defineEmits<{\n  /** Callback when a link is clicked */\n  click: [];\n}>();\n\nconst shouldBeMonochrome = computed(() => Boolean(props.monochrome || bannerContext));\n\nconst className = computed(() => classNames(\n  styles.Link,\n  shouldBeMonochrome.value && styles.monochrome,\n  props.removeUnderline && styles.removeUnderline,\n));\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEM,UAAA,gBAAgB,OAAO,kBAAkB,KAAK;AAEpD,UAAM,QAAQ;AAOd,UAAM,QAAQ;AAKd,UAAM,qBAAqB,SAAS,MAAM,QAAQ,MAAM,cAAc,aAAa,CAAC;AAE9E,UAAA,YAAY,SAAS,MAAM;AAAA,MAC/B,OAAO;AAAA,MACP,mBAAmB,SAAS,OAAO;AAAA,MACnC,MAAM,mBAAmB,OAAO;AAAA,IAAA,CACjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}