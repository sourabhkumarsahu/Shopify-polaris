import { defineComponent, inject, computed, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, renderSlot, unref, createElementBlock } from "vue";
import { c as classNames } from "../../utilities/css.js";
import { _ as _sfc_main$1 } from "../UnstyledLink/UnstyledLink.vue_vue_type_script_setup_true_lang.js";
const Link = "Polaris-Link";
const monochrome = "Polaris-Link--monochrome";
const removeUnderline = "Polaris-Link--removeUnderline";
const styles = {
  Link,
  monochrome,
  removeUnderline
};
const _hoisted_1 = ["aria-label", "data-primary-link"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Link",
  props: {
    id: {},
    url: {},
    to: {},
    external: { type: Boolean },
    target: {},
    monochrome: { type: Boolean },
    removeUnderline: { type: Boolean },
    accessibilityLabel: {},
    dataPrimaryLink: { type: Boolean }
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const bannerContext = inject("banner-context", false);
    const props = __props;
    const emits = __emit;
    const shouldBeMonochrome = computed(() => Boolean(props.monochrome || bannerContext));
    const className = computed(() => classNames(
      styles.Link,
      shouldBeMonochrome.value && styles.monochrome,
      props.removeUnderline && styles.removeUnderline
    ));
    return (_ctx, _cache) => {
      const _component_router_link = resolveComponent("router-link");
      return _ctx.to ? (openBlock(), createBlock(_component_router_link, {
        key: 0,
        to: _ctx.to,
        class: normalizeClass(className.value),
        "aria-label": _ctx.accessibilityLabel,
        "data-primary-link": _ctx.dataPrimaryLink
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["to", "class", "aria-label", "data-primary-link"])) : _ctx.url ? (openBlock(), createBlock(unref(_sfc_main$1), {
        key: 1,
        class: normalizeClass(className.value),
        url: _ctx.url,
        external: _ctx.external,
        target: _ctx.target,
        "aria-label": _ctx.accessibilityLabel,
        "data-primary-link": _ctx.dataPrimaryLink ?? void 0,
        onClick: _cache[0] || (_cache[0] = ($event) => emits("click"))
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "url", "external", "target", "aria-label", "data-primary-link"])) : (openBlock(), createElementBlock("button", {
        key: 2,
        type: "button",
        class: normalizeClass(className.value),
        "aria-label": _ctx.accessibilityLabel,
        "data-primary-link": _ctx.dataPrimaryLink ?? void 0,
        onClick: _cache[1] || (_cache[1] = ($event) => emits("click"))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 10, _hoisted_1));
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Link.vue_vue_type_script_setup_true_lang.js.map
