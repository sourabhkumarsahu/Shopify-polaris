import { defineComponent, useSlots, computed, openBlock, createElementBlock, normalizeClass, renderSlot, unref, Fragment, renderList, createBlock, resolveDynamicComponent, withCtx, createCommentVNode } from "vue";
import { u as useHasSlot } from "../../use/useHasSlot.js";
import { u as useExtractFragment } from "../../use/useExtractFragment.js";
import { c as classNames, v as variationName } from "../../utilities/css.js";
import { _ as _sfc_main$1 } from "./components/Item/Item.vue_vue_type_script_setup_true_lang.js";
import { i as isElementOfType } from "../../utilities/component.js";
const LegacyStack = "Polaris-LegacyStack";
const Item = "Polaris-LegacyStack__Item";
const noWrap = "Polaris-LegacyStack--noWrap";
const spacingNone = "Polaris-LegacyStack--spacingNone";
const spacingExtraTight = "Polaris-LegacyStack--spacingExtraTight";
const spacingTight = "Polaris-LegacyStack--spacingTight";
const spacingBaseTight = "Polaris-LegacyStack--spacingBaseTight";
const spacingLoose = "Polaris-LegacyStack--spacingLoose";
const spacingExtraLoose = "Polaris-LegacyStack--spacingExtraLoose";
const distributionLeading = "Polaris-LegacyStack--distributionLeading";
const distributionTrailing = "Polaris-LegacyStack--distributionTrailing";
const distributionCenter = "Polaris-LegacyStack--distributionCenter";
const distributionEqualSpacing = "Polaris-LegacyStack--distributionEqualSpacing";
const distributionFill = "Polaris-LegacyStack--distributionFill";
const distributionFillEvenly = "Polaris-LegacyStack--distributionFillEvenly";
const alignmentLeading = "Polaris-LegacyStack--alignmentLeading";
const alignmentTrailing = "Polaris-LegacyStack--alignmentTrailing";
const alignmentCenter = "Polaris-LegacyStack--alignmentCenter";
const alignmentFill = "Polaris-LegacyStack--alignmentFill";
const alignmentBaseline = "Polaris-LegacyStack--alignmentBaseline";
const vertical = "Polaris-LegacyStack--vertical";
const styles = {
  LegacyStack,
  Item,
  noWrap,
  spacingNone,
  spacingExtraTight,
  spacingTight,
  spacingBaseTight,
  spacingLoose,
  spacingExtraLoose,
  distributionLeading,
  distributionTrailing,
  distributionCenter,
  distributionEqualSpacing,
  distributionFill,
  distributionFillEvenly,
  alignmentLeading,
  alignmentTrailing,
  alignmentCenter,
  alignmentFill,
  alignmentBaseline,
  vertical,
  "Item-fill": "Polaris-LegacyStack__Item--fill"
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "LegacyStack",
  props: {
    wrap: { type: Boolean, default: true },
    vertical: { type: Boolean },
    spacing: {},
    alignment: {},
    distribution: {},
    noItemWrap: { type: Boolean }
  },
  setup(__props) {
    const slots = useSlots();
    const { hasContent } = useHasSlot();
    const { slotsElms } = useExtractFragment(slots.default);
    const props = __props;
    const className = computed(
      () => {
        return classNames(
          styles.LegacyStack,
          props.vertical && styles.vertical,
          props.spacing && styles[variationName("spacing", props.spacing)],
          props.distribution && styles[variationName("distribution", props.distribution)],
          props.alignment && styles[variationName("alignment", props.alignment)],
          props.wrap === false && styles.noWrap
        );
      }
    );
    const isChildContentWrappedByItem = computed(() => {
      var _a;
      const childContents = ((_a = slots.default) == null ? void 0 : _a.call(slots)) || [];
      if (!childContents.length) {
        return false;
      }
      const children = childContents[0].children && childContents[0].children.length ? childContents[0].children[0] : childContents[0];
      return isElementOfType(children, _sfc_main$1);
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        _ctx.noItemWrap ? renderSlot(_ctx.$slots, "default", { key: 0 }) : unref(slotsElms).length ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(unref(slotsElms), (item, _index) => {
          return openBlock(), createElementBlock(Fragment, { key: _index }, [
            isChildContentWrappedByItem.value && unref(hasContent)(item) ? (openBlock(), createBlock(resolveDynamicComponent(item), { key: 0 })) : unref(hasContent)(item) ? (openBlock(), createBlock(_sfc_main$1, { key: 1 }, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(item)))
              ]),
              _: 2
            }, 1024)) : createCommentVNode("", true)
          ], 64);
        }), 128)) : createCommentVNode("", true)
      ], 2);
    };
  }
});
export {
  _sfc_main as _,
  styles as s
};
//# sourceMappingURL=LegacyStack.vue_vue_type_script_setup_true_lang.js.map
