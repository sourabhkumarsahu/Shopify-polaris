import { defineComponent, computed, ref, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, createVNode, withCtx, createTextVNode, toDisplayString, createCommentVNode } from "vue";
import { _ as _sfc_main$1 } from "../Checkbox/Checkbox.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
const CheckableButton = "Polaris-CheckableButton";
const Checkbox = "Polaris-CheckableButton__Checkbox";
const Label = "Polaris-CheckableButton__Label";
const styles = {
  CheckableButton,
  Checkbox,
  Label
};
const _hoisted_1 = ["aria-live"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "CheckableButton",
  props: {
    accessibilityLabel: {},
    label: { default: "" },
    selected: { type: [Boolean, String] },
    disabled: { type: Boolean },
    ariaLive: {}
  },
  emits: ["toggle-all", "update:modelValue"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const model = computed({
      get() {
        return props.selected;
      },
      set(value) {
        emits("update:modelValue", value);
      }
    });
    const checkBoxRef = ref(null);
    function focus() {
      var _a;
      (_a = checkBoxRef.value) == null ? void 0 : _a.focus();
    }
    __expose({ focus });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles).CheckableButton),
        onClick: _cache[2] || (_cache[2] = ($event) => emits("toggle-all"))
      }, [
        createElementVNode("div", {
          class: normalizeClass(unref(styles).Checkbox)
        }, [
          createVNode(unref(_sfc_main$1), {
            modelValue: model.value,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
            ref_key: "checkBoxRef",
            ref: checkBoxRef,
            labelHidden: "",
            checked: _ctx.selected,
            label: _ctx.accessibilityLabel,
            disabled: _ctx.disabled,
            onChange: _cache[1] || (_cache[1] = ($event) => emits("toggle-all"))
          }, null, 8, ["modelValue", "checked", "label", "disabled"])
        ], 2),
        _ctx.label ? (openBlock(), createElementBlock("span", {
          key: 0,
          class: normalizeClass(unref(styles).Label),
          "aria-live": _ctx.ariaLive
        }, [
          createVNode(unref(_sfc_main$2), {
            as: "span",
            variant: "bodySm",
            "font-weight": "medium"
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ]),
            _: 1
          })
        ], 10, _hoisted_1)) : createCommentVNode("", true)
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=CheckableButton.vue_vue_type_script_setup_true_lang.js.map
