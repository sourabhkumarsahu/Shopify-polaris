import { defineComponent, useSlots, ref, computed, onMounted, watch, provide, openBlock, createElementBlock, Fragment, unref, normalizeClass, renderSlot, createCommentVNode, createElementVNode, createVNode, withCtx, createTextVNode, toDisplayString, normalizeStyle, mergeProps } from "vue";
import { v as CheckboxIcon, w as toPx, u as themeDefault } from "../../../vendor.js";
import { d as debounce } from "../../../polaris/polaris-react/src/utilities/debounce.js";
import { u as useEventListener } from "../../utilities/use-event-listener.js";
import { c as classNames } from "../../utilities/css.js";
import { u as useI18n } from "../../use/useI18n.js";
import { u as useExtractFragment } from "../../use/useExtractFragment.js";
import { u as useHasSlot } from "../../use/useHasSlot.js";
import { _ as _sfc_main$6 } from "../BulkActions/BulkActions.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$5 } from "../Button/Button.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../CheckableButton/CheckableButton.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$8 } from "../EmptySearchResult/EmptySearchResult.vue_vue_type_script_setup_true_lang.js";
import { S as SELECT_ALL_ITEMS } from "../IndexProvider/types.js";
import { _ as _sfc_main$9 } from "../Pagination/Pagination.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../Select/Select.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$7 } from "../Spinner/Spinner.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../Sticky/Sticky.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
const FiltersWrapper = "Polaris-ResourceList__FiltersWrapper";
const ResourceListWrapper = "Polaris-ResourceList__ResourceListWrapper";
const ResourceList = "Polaris-ResourceList";
const HeaderOuterWrapper = "Polaris-ResourceList__HeaderOuterWrapper";
const BulkActionsWrapper = "Polaris-ResourceList__BulkActionsWrapper";
const HeaderWrapper = "Polaris-ResourceList__HeaderWrapper";
const HeaderContentWrapper = "Polaris-ResourceList__HeaderContentWrapper";
const SortWrapper = "Polaris-ResourceList__SortWrapper";
const AlternateToolWrapper = "Polaris-ResourceList__AlternateToolWrapper";
const HeaderTitleWrapper = "Polaris-ResourceList__HeaderTitleWrapper";
const SelectAllActionsWrapper = "Polaris-ResourceList__SelectAllActionsWrapper";
const SelectAllActionsWrapperSticky = "Polaris-ResourceList__SelectAllActionsWrapperSticky";
const SelectAllActionsWrapperAtEnd = "Polaris-ResourceList__SelectAllActionsWrapperAtEnd";
const SelectAllActionsWrapperAtEndAppear = "Polaris-ResourceList__SelectAllActionsWrapperAtEndAppear";
const BulkActionsWrapperVisible = "Polaris-ResourceList__BulkActionsWrapperVisible";
const PaginationWrapper = "Polaris-ResourceList__PaginationWrapper";
const CheckableButtonWrapper = "Polaris-ResourceList__CheckableButtonWrapper";
const SelectButtonWrapper = "Polaris-ResourceList__SelectButtonWrapper";
const EmptySearchResultWrapper = "Polaris-ResourceList__EmptySearchResultWrapper";
const ItemWrapper = "Polaris-ResourceList__ItemWrapper";
const SpinnerContainer = "Polaris-ResourceList__SpinnerContainer";
const LoadingOverlay = "Polaris-ResourceList__LoadingOverlay";
const DisabledPointerEvents = "Polaris-ResourceList__DisabledPointerEvents";
const disableTextSelection = "Polaris-ResourceList--disableTextSelection";
const styles = {
  FiltersWrapper,
  ResourceListWrapper,
  ResourceList,
  HeaderOuterWrapper,
  BulkActionsWrapper,
  "HeaderWrapper-disabled": "Polaris-ResourceList__HeaderWrapper--disabled",
  "HeaderWrapper-overlay": "Polaris-ResourceList__HeaderWrapper--overlay",
  HeaderWrapper,
  "HeaderWrapper-isSticky": "Polaris-ResourceList__HeaderWrapper--isSticky",
  HeaderContentWrapper,
  "HeaderWrapper-inSelectMode": "Polaris-ResourceList__HeaderWrapper--inSelectMode",
  SortWrapper,
  AlternateToolWrapper,
  "HeaderWrapper-hasSelect": "Polaris-ResourceList__HeaderWrapper--hasSelect",
  "HeaderWrapper-hasAlternateTool": "Polaris-ResourceList__HeaderWrapper--hasAlternateTool",
  "HeaderWrapper-hasSort": "Polaris-ResourceList__HeaderWrapper--hasSort",
  HeaderTitleWrapper,
  SelectAllActionsWrapper,
  SelectAllActionsWrapperSticky,
  SelectAllActionsWrapperAtEnd,
  SelectAllActionsWrapperAtEndAppear,
  BulkActionsWrapperVisible,
  PaginationWrapper,
  CheckableButtonWrapper,
  SelectButtonWrapper,
  EmptySearchResultWrapper,
  ItemWrapper,
  "ItemWrapper-isLoading": "Polaris-ResourceList__ItemWrapper--isLoading",
  SpinnerContainer,
  LoadingOverlay,
  DisabledPointerEvents,
  disableTextSelection
};
const _hoisted_1 = ["className"];
const _hoisted_2 = ["aria-busy"];
const SMALL_SPINNER_HEIGHT = 28;
const LARGE_SPINNER_HEIGHT = 45;
const defaultTopPadding = 8;
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "ResourceList",
  props: {
    items: {},
    flushFilters: { type: Boolean },
    resourceName: {},
    promotedBulkActions: {},
    bulkActions: {},
    selectedItems: { default: [] },
    isFiltered: { type: Boolean },
    selectable: { type: Boolean },
    hasMoreItems: { type: Boolean },
    loading: { type: Boolean },
    showHeader: { type: Boolean, default: true },
    totalItemsCount: {},
    sortValue: {},
    sortOptions: {},
    headerContent: {},
    idForItem: {},
    resolveItemId: {},
    pagination: {}
  },
  emits: ["selection-change", "sort-change"],
  setup(__props, { emit: __emit }) {
    var _a;
    function getAllItemsOnPage(items2, idForItem) {
      return items2.map((item, index) => {
        return idForItem(item, index);
      });
    }
    const isBreakpointsXS = () => {
      return typeof window === "undefined" ? false : window.innerWidth < parseFloat(toPx(themeDefault.breakpoints["breakpoints-sm"]) ?? "");
    };
    function defaultIdForItem(item, index) {
      if (item.props.id) {
        return item.props.id;
      }
      return Object.prototype.hasOwnProperty.call(item, "id") ? item.id : index.toString();
    }
    const props = __props;
    const emits = __emit;
    const slots = useSlots();
    const i18n = useI18n();
    const { extractElement } = useExtractFragment();
    const { hasSlot } = useHasSlot();
    const selectMode = ref(Boolean(props.selectedItems && props.selectedItems.length > 0));
    const loadingPosition = ref(0);
    const lastSelected = ref();
    const smallScreen = ref(isBreakpointsXS());
    const checkableButtons = ref(/* @__PURE__ */ new Map());
    const isSticky = ref(false);
    const defaultResourceName = {
      singular: i18n.translate("Polaris.ResourceList.defaultItemSingular"),
      plural: i18n.translate("Polaris.ResourceList.defaultItemPlural")
    };
    const listRef = ref(null);
    const items = computed(() => {
      let tmpItems = [];
      if (slots.default) {
        const groups = slots.default().map((group) => {
          return extractElement(group);
        });
        tmpItems = groups.flat();
      }
      return tmpItems;
    });
    const selectedItemsCount = ref(props.selectedItems === SELECT_ALL_ITEMS ? `${items.value.length}+` : (_a = props.selectedItems) == null ? void 0 : _a.length);
    const sortValueSelect = computed(() => {
      return props.sortValue || "";
    });
    const isSelectable = computed(() => {
      return Boolean(
        props.promotedBulkActions && props.promotedBulkActions.length > 0 || props.bulkActions && props.bulkActions.length > 0 || props.selectable
      ) && !smallScreen.value;
    });
    const resourceName = computed(
      () => props.resourceName ? props.resourceName : defaultResourceName
    );
    const className = computed(() => classNames(
      styles.ItemWrapper,
      props.loading && styles["ItemWrapper-isLoading"]
    ));
    const resourceListClassName = computed(() => classNames(
      styles.ResourceList,
      // props.loading && styles.disabledPointerEvents,
      selectMode.value && styles.disableTextSelection
    ));
    const itemsExist = computed(() => items.value.length > 0);
    const needsHeader = computed(() => {
      return isSelectable.value || props.sortOptions && props.sortOptions.length > 0 || hasSlot(slots.alternateTool);
    });
    const showEmptyState = computed(() => hasSlot(slots.emptyState) && !itemsExist.value && !props.loading);
    const showEmptySearchState = computed(() => !showEmptyState.value && hasSlot(slots.filterControl) && !itemsExist.value && !props.loading);
    const showSortingSelect = computed(() => props.sortOptions && props.sortOptions.length > 0 && !hasSlot(slots.alternateTool));
    const showHeaderMarkup = computed(() => {
      return !showEmptyState.value && props.showHeader && !showEmptySearchState.value && (props.showHeader || needsHeader.value) && listRef.value;
    });
    const topPadding = computed(() => loadingPosition.value > 0 ? loadingPosition.value : defaultTopPadding);
    const spinnerStyle = computed(() => ({ paddingTop: `${topPadding.value}px` }));
    const spinnerSize = computed(() => items.value.length < 2 ? "small" : "large");
    const resourceListWrapperClassName = computed(() => classNames(
      styles.ResourceListWrapper,
      Boolean(isSelectable.value) && selectMode.value && !props.pagination && styles.ResourceListWrapperWithBulkActions
    ));
    const headerClassName = computed(() => {
      return classNames(
        styles.HeaderWrapper,
        props.sortOptions && props.sortOptions.length > 0 && !hasSlot(slots.alternateTool) && styles["HeaderWrapper-hasSort"],
        hasSlot(slots.alternateTool) && styles["HeaderWrapper-hasAlternateTool"],
        isSelectable.value && styles["HeaderWrapper-hasSelect"],
        props.loading && styles["HeaderWrapper-disabled"],
        isSelectable.value && selectMode.value && styles["HeaderWrapper-inSelectMode"],
        isSticky.value && styles["HeaderWrapper-isSticky"]
      );
    });
    const bulkActionClassNames = computed(() => classNames(
      styles.BulkActionsWrapper,
      selectMode.value && styles.BulkActionsWrapperVisible
    ));
    const headerTitle = computed(() => {
      const itemsCount = items.value.length;
      const resource = !props.loading && (!props.totalItemsCount && itemsCount === 1 || props.totalItemsCount === 1) ? resourceName.value.singular : resourceName.value.plural;
      if (props.loading) {
        return i18n.translate("Polaris.ResourceList.loading", { resource });
      } else if (props.totalItemsCount) {
        return i18n.translate("Polaris.ResourceList.showingTotalCount", {
          itemsCount,
          totalItemsCount: props.totalItemsCount,
          resource
        });
      } else {
        return i18n.translate("Polaris.ResourceList.showing", {
          itemsCount,
          resource
        });
      }
    });
    const selectAllActionsLabel = computed(() => i18n.translate("Polaris.ResourceList.selected", {
      selectedItemsCount: `${selectedItemsCount.value}`
    }));
    const bulkActionsAccessibilityLabel = computed(() => {
      var _a2;
      const selectedItemsCount2 = (_a2 = props.selectedItems) == null ? void 0 : _a2.length;
      const totalItemsCount = items.value.length;
      const allSelected = selectedItemsCount2 === totalItemsCount;
      if (totalItemsCount === 1 && allSelected) {
        return i18n.translate(
          "Polaris.ResourceList.a11yCheckboxDeselectAllSingle",
          {
            resourceNameSingular: resourceName.value.singular
          }
        );
      } else if (totalItemsCount === 1) {
        return i18n.translate(
          "Polaris.ResourceList.a11yCheckboxSelectAllSingle",
          {
            resourceNameSingular: resourceName.value.singular
          }
        );
      } else if (allSelected) {
        return i18n.translate(
          "Polaris.ResourceList.a11yCheckboxDeselectAllMultiple",
          {
            itemsLength: items.value.length,
            resourceNamePlural: resourceName.value.plural
          }
        );
      } else {
        return i18n.translate(
          "Polaris.ResourceList.a11yCheckboxSelectAllMultiple",
          {
            itemsLength: items.value.length,
            resourceNamePlural: resourceName.value.plural
          }
        );
      }
    });
    const handleStickyChange = (value) => {
      isSticky.value = value;
    };
    const selectAllSelectState = computed(() => {
      const { selectedItems, items: items2 } = props;
      let selectState = "indeterminate";
      if (!selectedItems || Array.isArray(selectedItems) && selectedItems.length === 0) {
        selectState = false;
      } else if (selectedItems === SELECT_ALL_ITEMS || Array.isArray(selectedItems) && selectedItems.length === items2.length) {
        selectState = true;
      }
      return selectState;
    });
    const paginatedSelectAllText = computed(() => {
      if (!isSelectable.value || !props.hasMoreItems) {
        return;
      }
      if (props.selectedItems === SELECT_ALL_ITEMS || Array.isArray(props.selectedItems) && props.selectedItems.length === items.value.length) {
        return i18n.translate(
          props.isFiltered ? "Polaris.ResourceList.allFilteredItemsSelected" : "Polaris.ResourceList.allItemsSelected",
          {
            itemsLength: items.value.length,
            resourceNamePlural: resourceName.value.plural
          }
        );
      }
      return "";
    });
    const paginatedSelectAllAction = computed(() => {
      if (!isSelectable.value || !props.hasMoreItems) {
        return;
      }
      const actionText = props.selectedItems === SELECT_ALL_ITEMS || Array.isArray(props.selectedItems) && props.selectedItems.length === items.value.length ? i18n.translate("Polaris.Common.undo") : i18n.translate(
        props.isFiltered ? "Polaris.ResourceList.selectAllFilteredItems" : "Polaris.ResourceList.selectAllItems",
        {
          itemsLength: items.value.length,
          resourceNamePlural: resourceName.value.plural
        }
      );
      return {
        content: actionText,
        onAction: handleSelectAllItemsInStore
      };
    });
    const generateItemId = (item, index) => {
      if (props.idForItem) {
        return props.idForItem(item, index);
      }
      return defaultIdForItem(item, index);
    };
    const emptySearchResultText = computed(() => ({
      title: i18n.translate("Polaris.ResourceList.emptySearchResultTitle", {
        resourceNamePlural: resourceName.value.plural
      }),
      description: i18n.translate(
        "Polaris.ResourceList.emptySearchResultDescription"
      )
    }));
    const handleSelectAllItemsInStore = () => {
      const newlySelectedItems = props.selectedItems === SELECT_ALL_ITEMS || Array.isArray(props.selectedItems) && props.selectedItems.length === items.value.length ? [] : getAllItemsOnPage(items.value, generateItemId);
      emits("selection-change", newlySelectedItems);
    };
    const handleSelectMode = (tmpSelectMode) => {
      selectMode.value = tmpSelectMode;
      if (!tmpSelectMode) {
        emits("selection-change", []);
      }
    };
    const handleResize = debounce(
      () => {
        const newSmallScreen = isBreakpointsXS();
        if (props.selectedItems && props.selectedItems.length === 0 && selectMode && !newSmallScreen) {
          handleSelectMode(false);
        }
        if (smallScreen.value !== newSmallScreen) {
          smallScreen.value = newSmallScreen;
        }
      },
      50,
      { leading: true, trailing: true, maxWait: 50 }
    );
    const setLoadingPosition = () => {
      if (listRef.value != null) {
        if (typeof window === "undefined") {
          return;
        }
        const overlay = listRef.value.getBoundingClientRect();
        const viewportHeight = Math.max(
          document.documentElement ? document.documentElement.clientHeight : 0,
          window.innerHeight || 0
        );
        const overflow = viewportHeight - overlay.height;
        const spinnerHeight = items.value.length === 1 ? SMALL_SPINNER_HEIGHT : LARGE_SPINNER_HEIGHT;
        const spinnerPosition = overflow > 0 ? (overlay.height - spinnerHeight) / 2 : (viewportHeight - overlay.top - spinnerHeight) / 2;
        loadingPosition.value = spinnerPosition;
      }
    };
    const handleMultiSelectionChange = (lastSelectedChange, currentSelected, resolveItemId) => {
      const min = Math.min(lastSelectedChange, currentSelected);
      const max = Math.max(lastSelectedChange, currentSelected);
      return items.value.slice(min, max + 1).map(resolveItemId);
    };
    const handleSelectionChange = (selected2, id, sortOrder, shiftKey) => {
      if (props.selectedItems === null) {
        return;
      }
      let newlySelectedItems = props.selectedItems === SELECT_ALL_ITEMS ? getAllItemsOnPage(items.value, generateItemId) : [...props.selectedItems];
      if (sortOrder !== void 0) {
        lastSelected.value = sortOrder;
      }
      const lastSelectedFromState = lastSelected.value;
      let selectedIds = [id];
      if (shiftKey && lastSelectedFromState != null && sortOrder !== void 0 && props.resolveItemId) {
        selectedIds = handleMultiSelectionChange(
          lastSelectedFromState,
          sortOrder,
          props.resolveItemId
        );
      }
      newlySelectedItems = [.../* @__PURE__ */ new Set([...newlySelectedItems, ...selectedIds])];
      if (!selected2) {
        for (const selectedId of selectedIds) {
          newlySelectedItems.splice(newlySelectedItems.indexOf(selectedId), 1);
        }
      }
      if (newlySelectedItems.length === 0 && !isBreakpointsXS()) {
        handleSelectMode(false);
      } else if (newlySelectedItems.length > 0) {
        handleSelectMode(true);
      }
      emits("selection-change", newlySelectedItems);
    };
    const onSortChange = (selected2) => {
      emits("sort-change", selected2);
    };
    const handleToggleAll = () => {
      let newlySelectedItems;
      if (Array.isArray(props.selectedItems) && props.selectedItems.length === items.value.length || props.selectedItems === SELECT_ALL_ITEMS) {
        newlySelectedItems = [];
      } else {
        newlySelectedItems = items.value.map((item, index) => {
          return generateItemId(item, index);
        });
      }
      if (newlySelectedItems.length === 0 && !isBreakpointsXS()) {
        handleSelectMode(false);
      } else if (newlySelectedItems.length > 0) {
        handleSelectMode(true);
      }
      let checkbox;
      if (isBreakpointsXS()) {
        checkbox = checkableButtons.value.get("bulkSm");
      } else if (newlySelectedItems.length === 0) {
        checkbox = checkableButtons.value.get("plain");
      } else {
        checkbox = checkableButtons.value.get("bulkLg");
      }
      emits("selection-change", newlySelectedItems);
      setTimeout(() => {
        checkbox && checkbox.focus();
      }, 0);
    };
    onMounted(() => {
      if (props.loading) {
        setLoadingPosition();
      }
      useEventListener("resize", handleResize);
    });
    watch(
      () => props.loading,
      (newLoading) => {
        if (newLoading) {
          setLoadingPosition();
        }
      }
    );
    watch(
      () => [props.selectedItems, selectMode.value],
      ([newSelectedItems, newSelectMode], [oldSelectedItems]) => {
        if (newSelectedItems !== oldSelectedItems) {
          if (newSelectedItems && newSelectedItems.length > 0 && !newSelectMode) {
            selectMode.value = true;
          }
          if ((!newSelectedItems || newSelectedItems.length === 0) && !isBreakpointsXS()) {
            selectMode.value = false;
          }
        }
      }
    );
    watch(
      () => props.selectedItems,
      (newSelectedItems) => {
        if (newSelectedItems && (newSelectedItems === SELECT_ALL_ITEMS || newSelectedItems.length > 0)) {
          selectedItemsCount.value = newSelectedItems === SELECT_ALL_ITEMS ? `${items.value.length}+` : newSelectedItems.length;
        }
      },
      {
        immediate: true
      }
    );
    const selected = computed(() => {
      return props.selectedItems || [];
    });
    provide("resource-list-context", {
      selectable: isSelectable,
      selectedItems: selected,
      selectMode,
      resourceName: props.resourceName,
      loading: props.loading,
      hasBulkActions: Boolean(props.bulkActions),
      onSelectionChange: handleSelectionChange
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        unref(hasSlot)(slots.filterControl) ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(classNames)(!_ctx.flushFilters && unref(styles).FiltersWrapper))
        }, [
          renderSlot(_ctx.$slots, "filterControl")
        ], 2)) : createCommentVNode("", true),
        createElementVNode("div", {
          class: normalizeClass(resourceListWrapperClassName.value)
        }, [
          showHeaderMarkup.value ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(styles).HeaderOuterWrapper)
          }, [
            createVNode(unref(_sfc_main$1), {
              "bounding-element": listRef.value,
              onStickyChange: handleStickyChange
            }, {
              default: withCtx(() => [
                createElementVNode("div", {
                  class: normalizeClass(headerClassName.value)
                }, [
                  _ctx.loading ? (openBlock(), createElementBlock("div", {
                    key: 0,
                    class: normalizeClass(unref(styles)["HeaderWrapper-overlay"])
                  }, null, 2)) : createCommentVNode("", true),
                  createElementVNode("div", {
                    class: normalizeClass(unref(styles).HeaderContentWrapper)
                  }, [
                    createElementVNode("div", {
                      class: normalizeClass(unref(styles).HeaderTitleWrapper)
                    }, [
                      createVNode(unref(_sfc_main$2), {
                        as: "span",
                        variant: "bodyMd"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(headerTitle.value), 1)
                        ]),
                        _: 1
                      })
                    ], 2),
                    isSelectable.value ? (openBlock(), createElementBlock("div", {
                      key: 0,
                      class: normalizeClass(unref(styles).CheckableButtonWrapper)
                    }, [
                      createVNode(unref(_sfc_main$3), {
                        accessibilityLabel: bulkActionsAccessibilityLabel.value,
                        label: headerTitle.value,
                        disabled: _ctx.loading,
                        selected: selectAllSelectState.value,
                        onToggleAll: handleToggleAll
                      }, null, 8, ["accessibilityLabel", "label", "disabled", "selected"])
                    ], 2)) : createCommentVNode("", true),
                    unref(hasSlot)(slots.alternateTool) && !showSortingSelect.value ? (openBlock(), createElementBlock("div", {
                      key: 1,
                      class: normalizeClass(unref(styles).AlternateToolWrapper)
                    }, [
                      renderSlot(_ctx.$slots, "alternateTool")
                    ], 2)) : createCommentVNode("", true),
                    showSortingSelect.value && _ctx.sortOptions ? (openBlock(), createElementBlock("div", {
                      key: 2,
                      className: unref(styles).SortWrapper
                    }, [
                      createVNode(unref(_sfc_main$4), {
                        value: sortValueSelect.value,
                        labelInline: !smallScreen.value,
                        labelHidden: smallScreen.value,
                        options: _ctx.sortOptions,
                        disabled: selectMode.value,
                        onChange: onSortChange
                      }, {
                        label: withCtx(() => [
                          createTextVNode(toDisplayString(unref(i18n).translate("Polaris.ResourceList.sortingLabel")), 1)
                        ]),
                        _: 1
                      }, 8, ["value", "labelInline", "labelHidden", "options", "disabled"])
                    ], 8, _hoisted_1)) : createCommentVNode("", true),
                    isSelectable.value ? (openBlock(), createElementBlock("div", {
                      key: 3,
                      class: normalizeClass(unref(styles).SelectButtonWrapper)
                    }, [
                      createVNode(unref(_sfc_main$5), {
                        disabled: selectMode.value,
                        icon: unref(CheckboxIcon),
                        onClick: _cache[0] || (_cache[0] = () => handleSelectMode(true))
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(unref(i18n).translate("Polaris.ResourceList.selectButtonText")), 1)
                        ]),
                        _: 1
                      }, 8, ["disabled", "icon"])
                    ], 2)) : createCommentVNode("", true)
                  ], 2),
                  isSelectable.value ? (openBlock(), createElementBlock("div", {
                    key: 1,
                    class: normalizeClass(bulkActionClassNames.value)
                  }, [
                    createVNode(unref(_sfc_main$6), {
                      ref: "CheckableButtonRef",
                      "button-size": "medium",
                      "paginated-select-all-action": paginatedSelectAllAction.value,
                      "paginated-select-all-text": paginatedSelectAllText.value,
                      "accessibility-label": bulkActionsAccessibilityLabel.value,
                      selected: selectAllSelectState.value,
                      promotedActions: _ctx.promotedBulkActions,
                      actions: _ctx.bulkActions,
                      disabled: _ctx.loading,
                      "select-mode": selectMode.value,
                      label: selectAllActionsLabel.value,
                      onToggleAll: handleToggleAll,
                      onSelectModeToggle: handleSelectMode
                    }, null, 8, ["paginated-select-all-action", "paginated-select-all-text", "accessibility-label", "selected", "promotedActions", "actions", "disabled", "select-mode", "label"])
                  ], 2)) : createCommentVNode("", true)
                ], 2)
              ]),
              _: 3
            }, 8, ["bounding-element"])
          ], 2)) : createCommentVNode("", true),
          itemsExist.value ? (openBlock(), createElementBlock("ul", {
            key: 1,
            class: normalizeClass(resourceListClassName.value),
            "aria-busy": _ctx.loading,
            ref_key: "listRef",
            ref: listRef,
            "aria-live": "polite"
          }, [
            _ctx.loading ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createElementVNode("li", {
                class: normalizeClass(unref(styles).SpinnerContainer),
                style: normalizeStyle(spinnerStyle.value)
              }, [
                createVNode(unref(_sfc_main$7), {
                  size: spinnerSize.value,
                  accessibilityLabel: "Items are loading"
                }, null, 8, ["size"])
              ], 6),
              createElementVNode("li", {
                class: normalizeClass(unref(styles).LoadingOverlay)
              }, null, 2)
            ], 64)) : createCommentVNode("", true),
            renderSlot(_ctx.$slots, "default")
          ], 10, _hoisted_2)) : createCommentVNode("", true),
          showEmptySearchState.value && unref(hasSlot)(slots.emptySearchState) ? renderSlot(_ctx.$slots, "emptySearchState", { key: 2 }) : showEmptySearchState.value ? (openBlock(), createElementBlock("div", {
            key: 3,
            class: normalizeClass(unref(styles).EmptySearchResultWrapper)
          }, [
            createVNode(unref(_sfc_main$8), mergeProps(emptySearchResultText.value, { "with-illustration": "" }), null, 16)
          ], 2)) : createCommentVNode("", true),
          showEmptyState.value ? renderSlot(_ctx.$slots, "emptyState", { key: 4 }) : createCommentVNode("", true),
          _ctx.loading && !itemsExist.value ? (openBlock(), createElementBlock("div", {
            key: 5,
            class: normalizeClass(className.value),
            tabindex: "-1"
          }, [
            _ctx.loading ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createElementVNode("li", {
                class: normalizeClass(unref(styles).SpinnerContainer),
                style: normalizeStyle(spinnerStyle.value)
              }, [
                createVNode(unref(_sfc_main$7), {
                  size: spinnerSize.value,
                  accessibilityLabel: "Items are loading"
                }, null, 8, ["size"])
              ], 6),
              createElementVNode("li", {
                class: normalizeClass(unref(styles).LoadingOverlay)
              }, null, 2)
            ], 64)) : createCommentVNode("", true)
          ], 2)) : createCommentVNode("", true),
          _ctx.pagination ? (openBlock(), createElementBlock("div", {
            key: 6,
            class: normalizeClass(unref(styles).PaginationWrapper)
          }, [
            createVNode(unref(_sfc_main$9), mergeProps({ type: "table" }, _ctx.pagination), null, 16)
          ], 2)) : createCommentVNode("", true)
        ], 2)
      ], 64);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=ResourceList.vue_vue_type_script_setup_true_lang.js.map
