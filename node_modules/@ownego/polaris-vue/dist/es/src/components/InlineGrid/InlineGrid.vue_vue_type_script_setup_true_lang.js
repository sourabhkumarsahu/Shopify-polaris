import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, renderSlot } from "vue";
import { a as getResponsiveValue, g as getResponsiveProps, s as sanitizeCustomProperties } from "../../utilities/css.js";
const InlineGrid = "Polaris-InlineGrid";
const styles = {
  InlineGrid
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "InlineGrid",
  props: {
    columns: {},
    gap: {},
    alignItems: {}
  },
  setup(__props) {
    const props = __props;
    const style = computed(() => {
      return {
        ...getResponsiveValue(
          "inline-grid",
          "grid-template-columns",
          formatInlineGrid(props.columns)
        ),
        ...getResponsiveProps("inline-grid", "gap", "space", props.gap),
        "--pc-inline-grid-align-items": props.alignItems
      };
    });
    function formatInlineGrid(columns) {
      if (typeof columns === "object" && columns !== null && !Array.isArray(columns)) {
        return Object.fromEntries(
          Object.entries(columns).map(([breakpointAlias, breakpointInlineGrid]) => [
            breakpointAlias,
            getColumnValue(breakpointInlineGrid)
          ])
        );
      }
      return getColumnValue(columns);
    }
    function getColumnValue(columns) {
      if (!columns) return void 0;
      if (typeof columns === "number" || !isNaN(Number(columns))) {
        return `repeat(${Number(columns)}, minmax(0, 1fr))`;
      }
      if (typeof columns === "string") return columns;
      return columns.map((column) => {
        switch (column) {
          case "oneThird":
            return "minmax(0, 1fr)";
          case "oneHalf":
            return "minmax(0, 1fr)";
          case "twoThirds":
            return "minmax(0, 2fr)";
        }
      }).join(" ");
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles).InlineGrid),
        style: normalizeStyle(unref(sanitizeCustomProperties)(style.value))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 6);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=InlineGrid.vue_vue_type_script_setup_true_lang.js.map
