{"version":3,"file":"BulkActionButton.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../../../src/components/BulkActions/components/BulkActionButton/BulkActionButton.vue"],"sourcesContent":["<template lang=\"pug\">\ndiv(:class=\"styles.BulkActionButton\", ref=\"bulkActionButton\")\n  template(v-if=\"isActivatorForMoreActionsPopover\")\n    Tooltip(\n      preferred-position=\"below\",\n      :content=\"content\",\n    )\n      Button(\n        :size=\"size\",\n        :external=\"external\",\n        :url=\"url\",\n        :tone=\"destructive ? 'critical' : undefined\",\n        :disclosure=\"disclosure && showContentInButton\",\n        :accessibility-label=\"isActivatorForMoreActionsPopover ? content : accessibilityLabel\",\n        :disabled=\"disabled\",\n        :icon=\"isActivatorForMoreActionsPopover ? MenuHorizontalIcon : undefined\",\n        @click=\"emits('action')\",\n      )\n  Button(\n    v-else,\n    :size=\"size\",\n    :external=\"external\",\n    :url=\"url\",\n    :tone=\"destructive ? 'critical' : undefined\",\n    :disclosure=\"disclosure && showContentInButton\",\n    :accessibility-label=\"isActivatorForMoreActionsPopover ? content : accessibilityLabel\",\n    :disabled=\"disabled\",\n    :icon=\"isActivatorForMoreActionsPopover ? MenuHorizontalIcon : undefined\",\n    @click=\"handleButtonClick\",\n  ) {{ isActivatorForMoreActionsPopover ? null : content }}\n  Indicator(v-if=\"indicator\")\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, ref, onMounted } from 'vue';\nimport {\n  Button,\n  Indicator,\n  Tooltip,\n} from '@/components';\nimport type { ButtonProps } from '@/components/Button/types';\nimport type { DestructableAction, DisableableAction } from '@/utilities/types';\nimport MenuHorizontalIcon from '@icons/MenuHorizontalIcon.svg';\nimport styles from '@polaris/components/BulkActions/BulkActions.module.css';\n\n\nexport type BulkActionButtonProps = {\n  disclosure?: boolean;\n  indicator?: boolean;\n  handleMeasurement?(width: number): void;\n  showContentInButton?: boolean;\n  size?: Extract<ButtonProps['size'], 'micro' | 'medium'>;\n} & DisableableAction & DestructableAction;\n\nconst props = defineProps<BulkActionButtonProps>();\nconst emits = defineEmits<{\n  'handle-measurement': [width: number],\n  'action': [],\n}>();\n\nconst bulkActionButton = ref<HTMLButtonElement | null>(null);\n\nconst isActivatorForMoreActionsPopover = computed(() => {\n  return props.disclosure && !props.showContentInButton;\n});\n\nconst handleButtonClick = () => {\n  emits('action');\n};\n\nonMounted(() => {\n  if (bulkActionButton.value) {\n    const width = bulkActionButton.value.getBoundingClientRect().width;\n    emits('handle-measurement', width);\n  }\n});\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA,UAAM,QAAQ;AACd,UAAM,QAAQ;AAKR,UAAA,mBAAmB,IAA8B,IAAI;AAErD,UAAA,mCAAmC,SAAS,MAAM;AAC/C,aAAA,MAAM,cAAc,CAAC,MAAM;AAAA,IAAA,CACnC;AAED,UAAM,oBAAoB,MAAM;AAC9B,YAAM,QAAQ;AAAA,IAAA;AAGhB,cAAU,MAAM;AACd,UAAI,iBAAiB,OAAO;AAC1B,cAAM,QAAQ,iBAAiB,MAAM,sBAAA,EAAwB;AAC7D,cAAM,sBAAsB,KAAK;AAAA,MACnC;AAAA,IAAA,CACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}