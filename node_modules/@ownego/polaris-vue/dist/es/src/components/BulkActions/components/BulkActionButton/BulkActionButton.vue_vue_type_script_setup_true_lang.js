import { defineComponent, ref, computed, onMounted, openBlock, createElementBlock, normalizeClass, unref, createBlock, withCtx, createVNode, createTextVNode, toDisplayString, createCommentVNode } from "vue";
import { M as MenuHorizontalIcon } from "../../../../../vendor.js";
import { s as styles } from "../../BulkActions.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../../../Button/Button.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../../../Indicator/Indicator.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../../Tooltip/Tooltip.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "BulkActionButton",
  props: {
    disclosure: { type: Boolean },
    indicator: { type: Boolean },
    handleMeasurement: { type: Function },
    showContentInButton: { type: Boolean },
    size: {},
    disabled: { type: Boolean },
    id: {},
    content: {},
    accessibilityLabel: {},
    url: {},
    external: { type: Boolean },
    target: {},
    onAction: { type: Function },
    onMouseEnter: { type: Function },
    onTouchStart: { type: Function },
    destructive: { type: Boolean }
  },
  emits: ["handle-measurement", "action"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const bulkActionButton = ref(null);
    const isActivatorForMoreActionsPopover = computed(() => {
      return props.disclosure && !props.showContentInButton;
    });
    const handleButtonClick = () => {
      emits("action");
    };
    onMounted(() => {
      if (bulkActionButton.value) {
        const width = bulkActionButton.value.getBoundingClientRect().width;
        emits("handle-measurement", width);
      }
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles).BulkActionButton),
        ref_key: "bulkActionButton",
        ref: bulkActionButton
      }, [
        isActivatorForMoreActionsPopover.value ? (openBlock(), createBlock(unref(_sfc_main$1), {
          key: 0,
          "preferred-position": "below",
          content: _ctx.content
        }, {
          default: withCtx(() => [
            createVNode(unref(_sfc_main$2), {
              size: _ctx.size,
              external: _ctx.external,
              url: _ctx.url,
              tone: _ctx.destructive ? "critical" : void 0,
              disclosure: _ctx.disclosure && _ctx.showContentInButton,
              "accessibility-label": isActivatorForMoreActionsPopover.value ? _ctx.content : _ctx.accessibilityLabel,
              disabled: _ctx.disabled,
              icon: isActivatorForMoreActionsPopover.value ? unref(MenuHorizontalIcon) : void 0,
              onClick: _cache[0] || (_cache[0] = ($event) => emits("action"))
            }, null, 8, ["size", "external", "url", "tone", "disclosure", "accessibility-label", "disabled", "icon"])
          ]),
          _: 1
        }, 8, ["content"])) : (openBlock(), createBlock(unref(_sfc_main$2), {
          key: 1,
          size: _ctx.size,
          external: _ctx.external,
          url: _ctx.url,
          tone: _ctx.destructive ? "critical" : void 0,
          disclosure: _ctx.disclosure && _ctx.showContentInButton,
          "accessibility-label": isActivatorForMoreActionsPopover.value ? _ctx.content : _ctx.accessibilityLabel,
          disabled: _ctx.disabled,
          icon: isActivatorForMoreActionsPopover.value ? unref(MenuHorizontalIcon) : void 0,
          onClick: handleButtonClick
        }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString(isActivatorForMoreActionsPopover.value ? null : _ctx.content), 1)
          ]),
          _: 1
        }, 8, ["size", "external", "url", "tone", "disclosure", "accessibility-label", "disabled", "icon"])),
        _ctx.indicator ? (openBlock(), createBlock(unref(_sfc_main$3), { key: 2 })) : createCommentVNode("", true)
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=BulkActionButton.vue_vue_type_script_setup_true_lang.js.map
