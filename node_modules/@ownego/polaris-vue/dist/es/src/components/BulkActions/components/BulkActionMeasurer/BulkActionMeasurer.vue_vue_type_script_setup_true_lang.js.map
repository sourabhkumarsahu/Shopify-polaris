{"version":3,"file":"BulkActionMeasurer.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../../../src/components/BulkActions/components/BulkActionMeasurer/BulkActionMeasurer.vue"],"sourcesContent":["<template lang=\"pug\">\ndiv(:class=\"styles.BulkActionsMeasurerLayout\" ref=\"containerNode\")\n  template(v-for=\"action, _index in promotedActions\", :key=\"_index\")\n    BulkActionButton(\n      v-if=\"instanceOfMenuGroupDescriptor(action)\",\n      disclosure,\n      show-content-in-button,\n      :size=\"buttonSize\",\n      :content=\"action.title\",\n    )\n    BulkActionButton(\n      v-else,\n      :disabled=\"disabled\",\n      :size=\"buttonSize\",\n      v-bind=\"action\",\n    )\n  BulkActionButton(\n    disclosure,\n    :content=\"activatorLabel\",\n  )\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, ref } from 'vue';\nimport useI18n from '@/use/useI18n';\nimport { useEventListener } from '@/utilities/use-event-listener';\nimport { BulkActionButton } from '../BulkActionButton';\nimport type { BulkActionsProps } from '../../types';\nimport { instanceOfMenuGroupDescriptor } from '../../utils';\n\nimport styles from '@polaris/components/BulkActions/BulkActions.module.css';\n\nexport type ActionsMeasurements = {\n  containerWidth: number;\n  disclosureWidth: number;\n  hiddenActionsWidths: number[];\n}\n\nexport type ActionsMeasurerProps = {\n  /** Collection of page-level action groups */\n  promotedActions?: BulkActionsProps['promotedActions'];\n  disabled?: BulkActionsProps['disabled'];\n  buttonSize?: BulkActionsProps['buttonSize'];\n  handleMeasurement(measurements: ActionsMeasurements): void;\n}\n\nconst ACTION_SPACING = 4;\n\nconst props = withDefaults(defineProps<ActionsMeasurerProps>(), {\n  promotedActions: () => [],\n});\n\nconst i18n = useI18n();\nconst containerNode = ref<HTMLDivElement | null>(null);\n\nconst activatorLabel = i18n.translate(\n  'Polaris.ResourceList.BulkActions.moreActionsActivatorLabel',\n);\n\nuseEventListener('resize', handleMeasurement);\n\nonMounted(() => {\n  handleMeasurement();\n});\n\nfunction handleMeasurement() {\n  if (!containerNode.value) {\n    return;\n  }\n\n  const containerWidth = containerNode.value.offsetWidth;\n  const hiddenActionNodes = containerNode.value.children;\n  const hiddenActionNodesArray = Array.from(hiddenActionNodes);\n  const hiddenActionsWidths = hiddenActionNodesArray.map((node) => {\n    const buttonWidth = Math.ceil(node.getBoundingClientRect().width);\n    return buttonWidth + ACTION_SPACING;\n  });\n  const disclosureWidth = hiddenActionsWidths.pop() || 0;\n\n  props.handleMeasurement({\n    containerWidth,\n    disclosureWidth,\n    hiddenActionsWidths,\n  });\n};\n</script>\n"],"names":[],"mappings":";;;;;;AA8CA,MAAM,iBAAiB;;;;;;;;;;AAEvB,UAAM,QAAQ;AAId,UAAM,OAAO;AACP,UAAA,gBAAgB,IAA2B,IAAI;AAErD,UAAM,iBAAiB,KAAK;AAAA,MAC1B;AAAA,IAAA;AAGF,qBAAiB,UAAU,iBAAiB;AAE5C,cAAU,MAAM;AACI;IAAA,CACnB;AAED,aAAS,oBAAoB;AACvB,UAAA,CAAC,cAAc,OAAO;AACxB;AAAA,MACF;AAEM,YAAA,iBAAiB,cAAc,MAAM;AACrC,YAAA,oBAAoB,cAAc,MAAM;AACxC,YAAA,yBAAyB,MAAM,KAAK,iBAAiB;AAC3D,YAAM,sBAAsB,uBAAuB,IAAI,CAAC,SAAS;AAC/D,cAAM,cAAc,KAAK,KAAK,KAAK,sBAAA,EAAwB,KAAK;AAChE,eAAO,cAAc;AAAA,MAAA,CACtB;AACK,YAAA,kBAAkB,oBAAoB,IAAA,KAAS;AAErD,YAAM,kBAAkB;AAAA,QACtB;AAAA,QACA;AAAA,QACA;AAAA,MAAA,CACD;AAAA,IACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}