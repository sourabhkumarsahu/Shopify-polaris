import { defineComponent, ref, onMounted, openBlock, createElementBlock, normalizeClass, unref, Fragment, renderList, createBlock, mergeProps, createVNode } from "vue";
import { u as useI18n } from "../../../../use/useI18n.js";
import { u as useEventListener } from "../../../../utilities/use-event-listener.js";
import { _ as _sfc_main$1 } from "../BulkActionButton/BulkActionButton.vue_vue_type_script_setup_true_lang.js";
import { i as instanceOfMenuGroupDescriptor } from "../../utils.js";
import { s as styles } from "../../BulkActions.vue_vue_type_script_setup_true_lang.js";
const ACTION_SPACING = 4;
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "BulkActionMeasurer",
  props: {
    promotedActions: { default: () => [] },
    disabled: { type: Boolean },
    buttonSize: {},
    handleMeasurement: {}
  },
  setup(__props) {
    const props = __props;
    const i18n = useI18n();
    const containerNode = ref(null);
    const activatorLabel = i18n.translate(
      "Polaris.ResourceList.BulkActions.moreActionsActivatorLabel"
    );
    useEventListener("resize", handleMeasurement);
    onMounted(() => {
      handleMeasurement();
    });
    function handleMeasurement() {
      if (!containerNode.value) {
        return;
      }
      const containerWidth = containerNode.value.offsetWidth;
      const hiddenActionNodes = containerNode.value.children;
      const hiddenActionNodesArray = Array.from(hiddenActionNodes);
      const hiddenActionsWidths = hiddenActionNodesArray.map((node) => {
        const buttonWidth = Math.ceil(node.getBoundingClientRect().width);
        return buttonWidth + ACTION_SPACING;
      });
      const disclosureWidth = hiddenActionsWidths.pop() || 0;
      props.handleMeasurement({
        containerWidth,
        disclosureWidth,
        hiddenActionsWidths
      });
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles).BulkActionsMeasurerLayout),
        ref_key: "containerNode",
        ref: containerNode
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.promotedActions, (action, _index) => {
          return openBlock(), createElementBlock(Fragment, { key: _index }, [
            unref(instanceOfMenuGroupDescriptor)(action) ? (openBlock(), createBlock(unref(_sfc_main$1), {
              key: 0,
              disclosure: "",
              "show-content-in-button": "",
              size: _ctx.buttonSize,
              content: action.title
            }, null, 8, ["size", "content"])) : (openBlock(), createBlock(unref(_sfc_main$1), mergeProps({
              key: 1,
              disabled: _ctx.disabled,
              size: _ctx.buttonSize,
              ref_for: true
            }, action), null, 16, ["disabled", "size"]))
          ], 64);
        }), 128)),
        createVNode(unref(_sfc_main$1), {
          disclosure: "",
          content: unref(activatorLabel)
        }, null, 8, ["content"])
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=BulkActionMeasurer.vue_vue_type_script_setup_true_lang.js.map
