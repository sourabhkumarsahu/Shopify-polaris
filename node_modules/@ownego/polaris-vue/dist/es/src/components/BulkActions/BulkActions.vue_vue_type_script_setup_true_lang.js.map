{"version":3,"file":"BulkActions.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/BulkActions/BulkActions.vue"],"sourcesContent":["<template lang=\"pug\">\ndiv(\n  :class=\"styles.BulkActions\",\n  :style=\"{ width: width ? `${width}px` : undefined }\",\n)\n  InlineStack(gap=\"400\", blockAlign=\"center\")\n    div(:class=\"styles.BulkActionsSelectAllWrapper\")\n      CheckableButton(\n        v-bind=\"checkableButtonProps\",\n        ref=\"checkableButtonRef\",\n        @toggle-all=\"emits('toggle-all')\",\n      )\n      //- paginatedSelectAllMarkup\n      UnstyledButton(\n        v-if=\"paginatedSelectAllAction\",\n        :class=\"styles.AllAction\",\n        size=\"slim\",\n        :disabled=\"disabled\",\n        @click=\"paginatedSelectAllAction.onAction\",\n      )\n        Text(\n          as=\"span\",\n          variant=\"bodyMd\",\n          font-weight=\"medium\",\n        ) {{ paginatedSelectAllAction.content }}\n\n    div(v-if=\"selectMode\", :class=\"styles.BulkActionsPromotedActionsWrapper\")\n      InlineStack(gap=\"100\", blockAlign=\"center\")\n        div(:class=\"styles.BulkActionsOuterLayout\")\n          //- measurerMarkup\n          BulkActionMeasurer(\n            :promotedActions=\"promotedActions\",\n            :disabled=\"disabled\",\n            :buttonSize=\"buttonSize\",\n            :handleMeasurement=\"handleMeasurement\",\n          )\n\n          div(:class=\"bulkActionLayoutClassName\")\n            //- promotedActionsMarkup\n            template(\n              v-if=\"promotedActions\",\n              v-for=\"action, _index in promotedActionsFiltered\",\n              :key=\"_index\",\n            )\n              BulkActionMenu(\n                v-if=\"instanceOfMenuGroupDescriptor(action)\",\n                v-bind=\"action\",\n                :isNewBadgeInBadgeActions=\"isNewBadgeInBadgeActions(actionSections)\",\n                :size=\"buttonSize\",\n              )\n              BulkActionButton(\n                v-else,\n                :disabled=\"disabled\",\n                v-bind=\"action\",\n                :size=\"buttonSize\",\n              )\n\n        //- actionsMarkup\n        Popover(\n          v-if=\"allHiddenActions.length > 0\",\n          :active=\"popoverActive\",\n          preferredAlignment=\"right\",\n          @close=\"togglePopover\",\n        )\n          template(#activator)\n            BulkActionButton(\n              disclosure,\n              :showContentInButton=\"!promotedActions\",\n              :disabled=\"disabled\",\n              :content=\"activatorLabel\",\n              :size=\"buttonSize\",\n              :indicator=\"isNewBadgeInBadgeActions(actionSections)\",\n              @action=\"togglePopover\",\n            )\n\n          ActionList(\n            :sections=\"actionListSections\",\n            @action-any-item=\"togglePopover\",\n          )\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, ref, watch } from 'vue';\nimport { classNames } from '@/utilities/css';\nimport useI18n from '@/use/useI18n';\nimport type { MenuGroupDescriptor } from '@/utilities/types';\nimport {\n  ActionList,\n  Popover,\n  InlineStack,\n  CheckableButton,\n  UnstyledButton,\n  Text,\n} from '@/components';\nimport type { CheckableButtonProps } from '@/components/CheckableButton';\nimport {\n  BulkActionButton,\n  BulkActionMenu,\n  BulkActionMeasurer,\n  type ActionsMeasurements,\n} from './components';\nimport type {\n  BulkActionsProps,\n  BulkActionsEvents,\n  BulkAction,\n  BulkActionListSection,\n} from './types';\nimport {\n  getVisibleAndHiddenActionsIndices,\n  isNewBadgeInBadgeActions,\n  instanceOfMenuGroupDescriptor,\n  instanceOfBulkActionListSection,\n  getActionSections,\n} from './utils';\nimport styles from '@polaris/components/BulkActions/BulkActions.module.css';\n\nconst i18n = useI18n();\n\nconst props = defineProps<BulkActionsProps>();\nconst emits = defineEmits<BulkActionsEvents>();\n\nconst popoverActive = ref<boolean>(false);\nconst disclosureWidth = ref<number>(0);\nconst containerWidth = ref<number>(Infinity);\nconst actionsWidths = ref<number[]>([]);\nconst visiblePromotedActions = ref<number[]>([]);\nconst hiddenPromotedActions = ref<number[]>([]);\nconst hasMeasured = ref<boolean>(false);\nconst checkableButtonRef = ref<InstanceType<typeof CheckableButton> | null>(null);\n\nconst setPromotedActions = () => {\n  if (\n    containerWidth.value === 0 ||\n    !props.promotedActions ||\n    props.promotedActions.length === 0\n  ) {\n    return;\n  }\n  const {\n    visiblePromotedActions: tmpVisiblePromotedActions,\n    hiddenPromotedActions: tmpHiddenPromotedActions,\n  } =\n    getVisibleAndHiddenActionsIndices(\n      props.promotedActions,\n      disclosureWidth.value,\n      actionsWidths.value,\n      containerWidth.value,\n    );\n\n  visiblePromotedActions.value = tmpVisiblePromotedActions;\n  hiddenPromotedActions.value = tmpHiddenPromotedActions;\n  hasMeasured.value = containerWidth.value !== Infinity;\n};\n\nconst activatorLabel = computed(() => (\n  !props.promotedActions || (props.promotedActions && visiblePromotedActions.value.length === 0)\n    ? i18n.translate('Polaris.ResourceList.BulkActions.actionsActivatorLabel')\n    : i18n.translate('Polaris.ResourceList.BulkActions.moreActionsActivatorLabel')\n));\n\nconst hasTextAndAction = computed(() => props.paginatedSelectAllText && props.paginatedSelectAllAction);\n\nconst ariaLive = computed(() => hasTextAndAction.value ? 'polite' : undefined);\n\nconst checkableButtonProps = computed<CheckableButtonProps>(() => ({\n  accessibilityLabel: props.accessibilityLabel,\n  label: hasTextAndAction.value ? props.paginatedSelectAllText : props.label,\n  selected: props.selected,\n  disabled: props.disabled,\n  ariaLive: ariaLive.value,\n}));\n\nconst bulkActionLayoutClassName = computed(() => (\n  classNames(\n    styles.BulkActionsLayout,\n    !hasMeasured.value && styles['BulkActionsLayout--measuring'],\n  )\n));\n\nconst actionSections = computed(() => getActionSections(props.actions));\n\nconst promotedActionsFiltered = computed(() => (\n  props.promotedActions?.filter((_, index) => visiblePromotedActions.value.includes(index)) || []\n));\n\nconst hiddenPromotedActionObjects = computed(() => (\n  hiddenPromotedActions.value.map((index) => props.promotedActions?.[index])\n));\n\nconst mergedHiddenPromotedActions = computed(() => (\n  hiddenPromotedActionObjects.value.reduce(\n    (memo, action) => {\n      if (!action) return memo;\n      if (instanceOfMenuGroupDescriptor(action)) {\n        return memo.concat(action.actions);\n      }\n      return memo.concat(action);\n    },\n    [] as (BulkAction | MenuGroupDescriptor)[],\n  )\n));\n\nconst hiddenPromotedSection = computed(() => ({\n  items: mergedHiddenPromotedActions.value,\n}));\n\nconst allHiddenActions = computed(() => {\n  if (actionSections.value) {\n    return actionSections.value;\n  }\n\n  if (!props.actions) {\n    return [];\n  }\n\n  let isAFlatArray = true;\n  return props.actions\n    .filter((action) => action)\n    .reduce(\n      (\n        memo: BulkActionListSection[],\n        action: BulkAction | BulkActionListSection,\n      ): BulkActionListSection[] => {\n        if (instanceOfBulkActionListSection(action)) {\n          isAFlatArray = false;\n          return memo.concat(action);\n        }\n        if (isAFlatArray) {\n          if (memo.length === 0) {\n            return [{items: [action]}];\n          }\n          const lastItem = memo[memo.length - 1];\n          memo.splice(memo.length - 1, 1, {\n            items: [...lastItem.items, action],\n          });\n          return memo;\n        }\n\n        isAFlatArray = true;\n\n        return memo.concat({items: [action]});\n      },\n      [],\n    );\n});\n\nconst actionListSections = computed(() => (\n  hiddenPromotedSection.value.items.length > 0\n    ? [hiddenPromotedSection.value, ...allHiddenActions.value]\n    : allHiddenActions.value\n));\n\nwatch(\n  () => props.promotedActions,\n  () => {\n    setPromotedActions();\n  },\n);\n\nconst togglePopover = () => {\n  emits('more-action-popover-toggle', popoverActive.value);\n  popoverActive.value = !popoverActive.value;\n};\n\nconst handleMeasurement = (measurements: ActionsMeasurements) => {\n  if (!props.promotedActions || props.promotedActions.length === 0) {\n    return;\n  }\n\n  const {\n    hiddenActionsWidths: tmpActionsWidths,\n    containerWidth: tmpContainerWidth,\n    disclosureWidth: tmpDisclosureWidth,\n  } = measurements;\n\n  const {\n    visiblePromotedActions: tmpVisiblePromotedActions,\n    hiddenPromotedActions: tmpHiddenPromotedActions,\n  } = getVisibleAndHiddenActionsIndices(\n    props.promotedActions,\n    tmpDisclosureWidth,\n    tmpActionsWidths,\n    tmpContainerWidth,\n  );\n\n  visiblePromotedActions.value = tmpVisiblePromotedActions;\n  hiddenPromotedActions.value = tmpHiddenPromotedActions;\n  containerWidth.value = tmpContainerWidth;\n  disclosureWidth.value = tmpDisclosureWidth;\n  actionsWidths.value = tmpActionsWidths;\n  hasMeasured.value = true;\n};\n\ndefineExpose({\n  checkableButtonRef,\n});\n</script>\n"],"names":[],"mappings":"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"}