import { defineComponent, ref, computed, watch, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, createVNode, withCtx, createElementVNode, mergeProps, createBlock, createTextVNode, toDisplayString, createCommentVNode, Fragment, renderList } from "vue";
import { c as classNames } from "../../utilities/css.js";
import { u as useI18n } from "../../use/useI18n.js";
import { _ as _sfc_main$9 } from "../ActionList/ActionList.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$7 } from "./components/BulkActionButton/BulkActionButton.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$6 } from "./components/BulkActionMenu/BulkActionMenu.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$5 } from "./components/BulkActionMeasurer/BulkActionMeasurer.vue_vue_type_script_setup_true_lang.js";
import { g as getActionSections, i as instanceOfMenuGroupDescriptor, a as instanceOfBulkActionListSection, b as isNewBadgeInBadgeActions, c as getVisibleAndHiddenActionsIndices } from "./utils.js";
import { _ as _sfc_main$3 } from "../UnstyledButton/UnstyledButton.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../CheckableButton/CheckableButton.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../InlineStack/InlineStack.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$8 } from "../Popover/Popover.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
const BulkActionsOuterLayout = "Polaris-BulkActions__BulkActionsOuterLayout";
const BulkActionsSelectAllWrapper = "Polaris-BulkActions__BulkActionsSelectAllWrapper";
const BulkActionsPromotedActionsWrapper = "Polaris-BulkActions__BulkActionsPromotedActionsWrapper";
const BulkActionsLayout = "Polaris-BulkActions__BulkActionsLayout";
const BulkActionsMeasurerLayout = "Polaris-BulkActions__BulkActionsMeasurerLayout";
const BulkActionButton = "Polaris-BulkActions__BulkActionButton";
const disabled = "Polaris-BulkActions--disabled";
const AllAction = "Polaris-BulkActions__AllAction";
const styles = {
  BulkActionsOuterLayout,
  BulkActionsSelectAllWrapper,
  BulkActionsPromotedActionsWrapper,
  BulkActionsLayout,
  "BulkActionsLayout--measuring": "Polaris-BulkActions--bulkActionsLayoutMeasuring",
  BulkActionsMeasurerLayout,
  BulkActionButton,
  disabled,
  AllAction
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "BulkActions",
  props: {
    accessibilityLabel: {},
    selected: { type: [Boolean, String] },
    paginatedSelectAllText: {},
    paginatedSelectAllAction: {},
    promotedActions: {},
    actions: {},
    disabled: { type: Boolean },
    buttonSize: {},
    label: {},
    selectMode: { type: Boolean },
    innerRef: {},
    isSticky: { type: Boolean },
    width: {}
  },
  emits: ["toggle-all", "more-action-popover-toggle", "select-mode-toggle"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const i18n = useI18n();
    const props = __props;
    const emits = __emit;
    const popoverActive = ref(false);
    const disclosureWidth = ref(0);
    const containerWidth = ref(Infinity);
    const actionsWidths = ref([]);
    const visiblePromotedActions = ref([]);
    const hiddenPromotedActions = ref([]);
    const hasMeasured = ref(false);
    const checkableButtonRef = ref(null);
    const setPromotedActions = () => {
      if (containerWidth.value === 0 || !props.promotedActions || props.promotedActions.length === 0) {
        return;
      }
      const {
        visiblePromotedActions: tmpVisiblePromotedActions,
        hiddenPromotedActions: tmpHiddenPromotedActions
      } = getVisibleAndHiddenActionsIndices(
        props.promotedActions,
        disclosureWidth.value,
        actionsWidths.value,
        containerWidth.value
      );
      visiblePromotedActions.value = tmpVisiblePromotedActions;
      hiddenPromotedActions.value = tmpHiddenPromotedActions;
      hasMeasured.value = containerWidth.value !== Infinity;
    };
    const activatorLabel = computed(() => !props.promotedActions || props.promotedActions && visiblePromotedActions.value.length === 0 ? i18n.translate("Polaris.ResourceList.BulkActions.actionsActivatorLabel") : i18n.translate("Polaris.ResourceList.BulkActions.moreActionsActivatorLabel"));
    const hasTextAndAction = computed(() => props.paginatedSelectAllText && props.paginatedSelectAllAction);
    const ariaLive = computed(() => hasTextAndAction.value ? "polite" : void 0);
    const checkableButtonProps = computed(() => ({
      accessibilityLabel: props.accessibilityLabel,
      label: hasTextAndAction.value ? props.paginatedSelectAllText : props.label,
      selected: props.selected,
      disabled: props.disabled,
      ariaLive: ariaLive.value
    }));
    const bulkActionLayoutClassName = computed(() => classNames(
      styles.BulkActionsLayout,
      !hasMeasured.value && styles["BulkActionsLayout--measuring"]
    ));
    const actionSections = computed(() => getActionSections(props.actions));
    const promotedActionsFiltered = computed(() => {
      var _a;
      return ((_a = props.promotedActions) == null ? void 0 : _a.filter((_, index) => visiblePromotedActions.value.includes(index))) || [];
    });
    const hiddenPromotedActionObjects = computed(() => hiddenPromotedActions.value.map((index) => {
      var _a;
      return (_a = props.promotedActions) == null ? void 0 : _a[index];
    }));
    const mergedHiddenPromotedActions = computed(() => hiddenPromotedActionObjects.value.reduce(
      (memo, action) => {
        if (!action) return memo;
        if (instanceOfMenuGroupDescriptor(action)) {
          return memo.concat(action.actions);
        }
        return memo.concat(action);
      },
      []
    ));
    const hiddenPromotedSection = computed(() => ({
      items: mergedHiddenPromotedActions.value
    }));
    const allHiddenActions = computed(() => {
      if (actionSections.value) {
        return actionSections.value;
      }
      if (!props.actions) {
        return [];
      }
      let isAFlatArray = true;
      return props.actions.filter((action) => action).reduce(
        (memo, action) => {
          if (instanceOfBulkActionListSection(action)) {
            isAFlatArray = false;
            return memo.concat(action);
          }
          if (isAFlatArray) {
            if (memo.length === 0) {
              return [{ items: [action] }];
            }
            const lastItem = memo[memo.length - 1];
            memo.splice(memo.length - 1, 1, {
              items: [...lastItem.items, action]
            });
            return memo;
          }
          isAFlatArray = true;
          return memo.concat({ items: [action] });
        },
        []
      );
    });
    const actionListSections = computed(() => hiddenPromotedSection.value.items.length > 0 ? [hiddenPromotedSection.value, ...allHiddenActions.value] : allHiddenActions.value);
    watch(
      () => props.promotedActions,
      () => {
        setPromotedActions();
      }
    );
    const togglePopover = () => {
      emits("more-action-popover-toggle", popoverActive.value);
      popoverActive.value = !popoverActive.value;
    };
    const handleMeasurement = (measurements) => {
      if (!props.promotedActions || props.promotedActions.length === 0) {
        return;
      }
      const {
        hiddenActionsWidths: tmpActionsWidths,
        containerWidth: tmpContainerWidth,
        disclosureWidth: tmpDisclosureWidth
      } = measurements;
      const {
        visiblePromotedActions: tmpVisiblePromotedActions,
        hiddenPromotedActions: tmpHiddenPromotedActions
      } = getVisibleAndHiddenActionsIndices(
        props.promotedActions,
        tmpDisclosureWidth,
        tmpActionsWidths,
        tmpContainerWidth
      );
      visiblePromotedActions.value = tmpVisiblePromotedActions;
      hiddenPromotedActions.value = tmpHiddenPromotedActions;
      containerWidth.value = tmpContainerWidth;
      disclosureWidth.value = tmpDisclosureWidth;
      actionsWidths.value = tmpActionsWidths;
      hasMeasured.value = true;
    };
    __expose({
      checkableButtonRef
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles).BulkActions),
        style: normalizeStyle({ width: _ctx.width ? `${_ctx.width}px` : void 0 })
      }, [
        createVNode(unref(_sfc_main$1), {
          gap: "400",
          blockAlign: "center"
        }, {
          default: withCtx(() => [
            createElementVNode("div", {
              class: normalizeClass(unref(styles).BulkActionsSelectAllWrapper)
            }, [
              createVNode(unref(_sfc_main$2), mergeProps(checkableButtonProps.value, {
                ref_key: "checkableButtonRef",
                ref: checkableButtonRef,
                onToggleAll: _cache[0] || (_cache[0] = ($event) => emits("toggle-all"))
              }), null, 16),
              _ctx.paginatedSelectAllAction ? (openBlock(), createBlock(unref(_sfc_main$3), {
                key: 0,
                class: normalizeClass(unref(styles).AllAction),
                size: "slim",
                disabled: _ctx.disabled,
                onClick: _ctx.paginatedSelectAllAction.onAction
              }, {
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$4), {
                    as: "span",
                    variant: "bodyMd",
                    "font-weight": "medium"
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(_ctx.paginatedSelectAllAction.content), 1)
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["class", "disabled", "onClick"])) : createCommentVNode("", true)
            ], 2),
            _ctx.selectMode ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(styles).BulkActionsPromotedActionsWrapper)
            }, [
              createVNode(unref(_sfc_main$1), {
                gap: "100",
                blockAlign: "center"
              }, {
                default: withCtx(() => [
                  createElementVNode("div", {
                    class: normalizeClass(unref(styles).BulkActionsOuterLayout)
                  }, [
                    createVNode(unref(_sfc_main$5), {
                      promotedActions: _ctx.promotedActions,
                      disabled: _ctx.disabled,
                      buttonSize: _ctx.buttonSize,
                      handleMeasurement
                    }, null, 8, ["promotedActions", "disabled", "buttonSize"]),
                    createElementVNode("div", {
                      class: normalizeClass(bulkActionLayoutClassName.value)
                    }, [
                      _ctx.promotedActions ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(promotedActionsFiltered.value, (action, _index) => {
                        return openBlock(), createElementBlock(Fragment, { key: _index }, [
                          unref(instanceOfMenuGroupDescriptor)(action) ? (openBlock(), createBlock(unref(_sfc_main$6), mergeProps({
                            key: 0,
                            ref_for: true
                          }, action, {
                            isNewBadgeInBadgeActions: unref(isNewBadgeInBadgeActions)(actionSections.value),
                            size: _ctx.buttonSize
                          }), null, 16, ["isNewBadgeInBadgeActions", "size"])) : (openBlock(), createBlock(unref(_sfc_main$7), mergeProps({
                            key: 1,
                            disabled: _ctx.disabled,
                            ref_for: true
                          }, action, { size: _ctx.buttonSize }), null, 16, ["disabled", "size"]))
                        ], 64);
                      }), 128)) : createCommentVNode("", true)
                    ], 2)
                  ], 2),
                  allHiddenActions.value.length > 0 ? (openBlock(), createBlock(unref(_sfc_main$8), {
                    key: 0,
                    active: popoverActive.value,
                    preferredAlignment: "right",
                    onClose: togglePopover
                  }, {
                    activator: withCtx(() => [
                      createVNode(unref(_sfc_main$7), {
                        disclosure: "",
                        showContentInButton: !_ctx.promotedActions,
                        disabled: _ctx.disabled,
                        content: activatorLabel.value,
                        size: _ctx.buttonSize,
                        indicator: unref(isNewBadgeInBadgeActions)(actionSections.value),
                        onAction: togglePopover
                      }, null, 8, ["showContentInButton", "disabled", "content", "size", "indicator"])
                    ]),
                    default: withCtx(() => [
                      createVNode(unref(_sfc_main$9), {
                        sections: actionListSections.value,
                        onActionAnyItem: togglePopover
                      }, null, 8, ["sections"])
                    ]),
                    _: 1
                  }, 8, ["active"])) : createCommentVNode("", true)
                ]),
                _: 1
              })
            ], 2)) : createCommentVNode("", true)
          ]),
          _: 1
        })
      ], 6);
    };
  }
});
export {
  _sfc_main as _,
  styles as s
};
//# sourceMappingURL=BulkActions.vue_vue_type_script_setup_true_lang.js.map
