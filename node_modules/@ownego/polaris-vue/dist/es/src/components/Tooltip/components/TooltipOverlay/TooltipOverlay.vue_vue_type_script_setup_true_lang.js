import { defineComponent, ref, computed, openBlock, createBlock, unref, withCtx, createElementVNode, mergeProps, createElementBlock, normalizeClass, normalizeStyle, renderSlot, createCommentVNode } from "vue";
import { l as layer } from "../../../../../polaris/polaris-react/src/components/shared.js";
import { u as useI18n } from "../../../../use/useI18n.js";
import { c as classNames } from "../../../../utilities/css.js";
import { _ as _sfc_main$1 } from "../../../PositionedOverlay/PositionedOverlay.vue_vue_type_script_setup_true_lang.js";
import { T as TailDownPathsVue } from "./TailDownPaths.js";
import { T as TailUpPaths } from "./TailUpPaths.js";
const TooltipOverlay = "Polaris-Tooltip-TooltipOverlay";
const Tail = "Polaris-Tooltip-TooltipOverlay__Tail";
const positionedAbove = "Polaris-Tooltip-TooltipOverlay--positionedAbove";
const measuring = "Polaris-Tooltip-TooltipOverlay--measuring";
const measured = "Polaris-Tooltip-TooltipOverlay--measured";
const instant = "Polaris-Tooltip-TooltipOverlay--instant";
const Content = "Polaris-Tooltip-TooltipOverlay__Content";
const wide = "Polaris-Tooltip-TooltipOverlay--wide";
const styles = {
  TooltipOverlay,
  Tail,
  positionedAbove,
  measuring,
  measured,
  instant,
  Content,
  "default": "Polaris-Tooltip-TooltipOverlay--default",
  wide
};
const _hoisted_1 = ["id", "aria-label"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "TooltipOverlay",
  props: {
    id: {},
    active: { type: Boolean },
    activator: {},
    accessibilityLabel: {},
    width: {},
    padding: {},
    borderRadius: {},
    zIndexOverride: {},
    onClose: {},
    instant: { type: Boolean },
    preventInteraction: { type: Boolean },
    preferredPosition: { default: "above" }
  },
  setup(__props) {
    const i18n = useI18n();
    const props = __props;
    const overlayRef = ref(null);
    const overlayDetails = computed(() => {
      var _a;
      return (_a = overlayRef.value) == null ? void 0 : _a.overlayDetails;
    });
    const containerClassName = computed(() => {
      var _a, _b, _c;
      return classNames(
        styles.TooltipOverlay,
        ((_a = overlayDetails.value) == null ? void 0 : _a.measuring) && styles.measuring,
        !((_b = overlayDetails.value) == null ? void 0 : _b.measuring) && styles.measured,
        props.instant && styles.instant,
        ((_c = overlayDetails.value) == null ? void 0 : _c.positioning) === "above" && styles.positionedAbove
      );
    });
    const contentClassName = computed(() => classNames(
      styles.Content,
      props.width && styles[props.width]
    ));
    const contentStyles = computed(() => {
      var _a, _b;
      return ((_a = overlayDetails.value) == null ? void 0 : _a.measuring) ? void 0 : { minHeight: (_b = overlayDetails.value) == null ? void 0 : _b.desiredHeight };
    });
    const style = computed(() => {
      var _a;
      return {
        "--pc-tooltip-chevron-x-pos": `${(_a = overlayDetails.value) == null ? void 0 : _a.chevronOffset}px`,
        "--pc-tooltip-border-radius": props.borderRadius ? `var(--p-border-radius-${props.borderRadius})` : void 0,
        "--pc-tooltip-padding": props.padding && props.padding === "default" ? "var(--p-space-100) var(--p-space-200)" : `var(--p-space-${props.padding})`
      };
    });
    return (_ctx, _cache) => {
      return _ctx.active ? (openBlock(), createBlock(unref(_sfc_main$1), {
        key: 0,
        ref_key: "overlayRef",
        ref: overlayRef,
        active: _ctx.active,
        activator: _ctx.activator,
        "preferred-position": _ctx.preferredPosition,
        "prevent-interaction": _ctx.preventInteraction,
        "z-index-override": _ctx.zIndexOverride
      }, {
        default: withCtx(() => {
          var _a;
          return [
            createElementVNode("div", mergeProps({
              style: style.value,
              class: containerClassName.value
            }, unref(layer).props), [
              (openBlock(), createElementBlock("svg", {
                class: normalizeClass(unref(styles).Tail),
                width: "19",
                height: "11",
                fill: "none"
              }, [
                ((_a = overlayDetails.value) == null ? void 0 : _a.positioning) === "above" ? (openBlock(), createBlock(TailDownPathsVue, { key: 0 })) : (openBlock(), createBlock(TailUpPaths, { key: 1 }))
              ], 2)),
              createElementVNode("div", {
                id: _ctx.id,
                role: "tooltip",
                class: normalizeClass(contentClassName.value),
                style: normalizeStyle({ ...contentStyles.value, ...style.value }),
                "aria-label": _ctx.accessibilityLabel && unref(i18n).translate("Polaris.Tooltip.overlayLabel", { label: _ctx.accessibilityLabel })
              }, [
                renderSlot(_ctx.$slots, "default")
              ], 14, _hoisted_1)
            ], 16)
          ];
        }),
        _: 3
      }, 8, ["active", "activator", "preferred-position", "prevent-interaction", "z-index-override"])) : createCommentVNode("", true);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=TooltipOverlay.vue_vue_type_script_setup_true_lang.js.map
