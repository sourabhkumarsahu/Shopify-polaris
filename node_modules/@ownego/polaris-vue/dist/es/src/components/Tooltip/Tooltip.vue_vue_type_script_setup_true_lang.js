import { defineComponent, useSlots, ref, computed, onMounted, watch, openBlock, createBlock, resolveDynamicComponent, normalizeClass, unref, withCtx, renderSlot, createVNode, createTextVNode, toDisplayString, createCommentVNode } from "vue";
import { c as classNames } from "../../utilities/css.js";
import { e as findFirstFocusableNode } from "../../utilities/focus.js";
import { u as useEphemeralPresenceManagerContext } from "../../use/useEphemeralPresenceManager.js";
import { u as useId } from "../../use/useId.js";
import { u as useToggle } from "../../use/useToggle.js";
import { _ as _sfc_main$1 } from "../Portal/Portal.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "./components/TooltipOverlay/TooltipOverlay.vue_vue_type_script_setup_true_lang.js";
const TooltipContainer = "Polaris-Tooltip__TooltipContainer";
const HasUnderline = "Polaris-Tooltip__HasUnderline";
const styles = {
  TooltipContainer,
  HasUnderline
};
const HOVER_OUT_TIMEOUT = 150;
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Tooltip",
  props: {
    content: {},
    active: { type: Boolean, default: void 0 },
    hoverDelay: {},
    dismissOnMouseOut: {},
    preferredPosition: { default: "above" },
    activatorWrapper: { default: "span" },
    accessibilityLabel: {},
    width: { default: "default" },
    padding: { default: "default" },
    borderRadius: {},
    zIndexOverride: {},
    hasUnderline: { type: Boolean },
    persistOnClick: { type: Boolean }
  },
  emits: ["open", "close"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const slots = useSlots();
    const { presenceList, addPresence, removePresence } = useEphemeralPresenceManagerContext();
    const id = useId();
    const {
      value: active,
      setTrue: setActiveTrue,
      setFalse: handleBlur
    } = useToggle(Boolean(props.active));
    const {
      value: persist,
      toggle: togglePersisting
    } = useToggle(Boolean(props.active) && Boolean(props.persistOnClick));
    const activatorNode = ref(null);
    const activatorContainer = ref(null);
    const mouseEntered = ref(false);
    const shouldAnimate = ref(!props.active);
    const hoverDelayTimeout = ref(void 0);
    const hoverOutTimeout = ref(void 0);
    const wrapperClassName = computed(
      () => classNames(
        props.activatorWrapper === "div" && styles.TooltipContainer,
        props.hasUnderline && styles.hasUnderline
      )
    );
    const handleFocus = () => {
      if (props.active !== false) {
        setActiveTrue();
      }
    };
    const handleOpen = () => {
      shouldAnimate.value = !presenceList.value.tooltip && active.value;
      emits("open");
      addPresence("tooltip");
    };
    const handleClose = () => {
      emits("close");
      shouldAnimate.value = false;
      hoverOutTimeout.value = setTimeout(() => {
        removePresence("tooltip");
      }, HOVER_OUT_TIMEOUT);
    };
    const handleKeyUp = (event) => {
      if (event.key !== "Escape") return;
      emits("close");
      handleBlur();
      props.persistOnClick && togglePersisting();
    };
    function setActivator(node) {
      const activatorContainerRef = activatorContainer;
      if (node == null) {
        activatorContainerRef.current = null;
        activatorNode.value = null;
        return;
      }
      if (node.firstElementChild) {
        activatorNode.value = node.firstElementChild;
      }
      activatorContainerRef.current = node;
    }
    function handleMouseEnter() {
      mouseEntered.value = true;
      if (props.hoverDelay && !presenceList.value.tooltip) {
        hoverDelayTimeout.value = setTimeout(() => {
          handleOpen();
          handleFocus();
        }, props.hoverDelay);
      } else {
        handleOpen();
        handleFocus();
      }
    }
    function handleMouseLeave() {
      if (hoverDelayTimeout.value) {
        clearTimeout(hoverDelayTimeout.value);
        hoverDelayTimeout.value = void 0;
      }
      mouseEntered.value = false;
      handleClose();
      if (!persist.value) {
        handleBlur();
      }
    }
    function handleMouseEnterFix() {
      !mouseEntered.value && handleMouseEnter();
    }
    onMounted(
      () => {
        setActivator(activatorContainer.value);
        const firstFocusable = activatorContainer.value ? findFirstFocusableNode(activatorContainer.value) : null;
        const accessibilityNode = firstFocusable || activatorContainer.value;
        if (!accessibilityNode) return;
        accessibilityNode.tabIndex = 0;
        accessibilityNode.setAttribute("aria-describedby", String(id));
        accessibilityNode.setAttribute("data-polaris-tooltip-activator", "true");
        if (hoverDelayTimeout.value) {
          clearTimeout(hoverDelayTimeout.value);
          hoverDelayTimeout.value = void 0;
        }
        if (hoverOutTimeout.value) {
          clearTimeout(hoverOutTimeout.value);
          hoverOutTimeout.value = void 0;
        }
      }
    );
    watch(
      () => [props.active, active.value],
      () => {
        if (props.active === false && active.value) {
          handleClose();
          handleBlur();
        }
      }
    );
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.activatorWrapper), {
        ref_key: "activatorContainer",
        ref: activatorContainer,
        class: normalizeClass(wrapperClassName.value),
        onFocus: _cache[0] || (_cache[0] = () => {
          handleOpen();
          handleFocus();
        }),
        onBlur: _cache[1] || (_cache[1] = () => {
          unref(handleBlur)();
          handleClose();
        }),
        onMouseleave: handleMouseLeave,
        onMouseenter: handleMouseEnterFix,
        onMousedown: _cache[2] || (_cache[2] = ($event) => _ctx.persistOnClick ? unref(togglePersisting)() : void 0),
        onKeyup: handleKeyUp
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default"),
          activatorNode.value ? (openBlock(), createBlock(unref(_sfc_main$1), {
            key: 0,
            "id-prefix": "tooltip"
          }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$2), {
                id: String(unref(id)),
                topBarOffset: "",
                preferredPosition: _ctx.preferredPosition,
                activator: activatorNode.value,
                active: unref(active),
                accessibilityLabel: _ctx.accessibilityLabel,
                preventInteraction: _ctx.dismissOnMouseOut,
                width: _ctx.width,
                padding: _ctx.padding,
                borderRadius: _ctx.borderRadius,
                zIndexOverride: _ctx.zIndexOverride,
                instant: !shouldAnimate.value
              }, {
                default: withCtx(() => [
                  slots.content ? renderSlot(_ctx.$slots, "content", { key: 0 }) : (openBlock(), createBlock(unref(_sfc_main$3), {
                    key: 1,
                    as: "span",
                    variant: "bodyMd"
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(_ctx.content), 1)
                    ]),
                    _: 1
                  }))
                ]),
                _: 3
              }, 8, ["id", "preferredPosition", "activator", "active", "accessibilityLabel", "preventInteraction", "width", "padding", "borderRadius", "zIndexOverride", "instant"])
            ]),
            _: 3
          })) : createCommentVNode("", true)
        ]),
        _: 3
      }, 40, ["class"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Tooltip.vue_vue_type_script_setup_true_lang.js.map
