{"version":3,"file":"Tooltip.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/Tooltip/Tooltip.vue"],"sourcesContent":["<template lang=\"pug\">\ncomponent(\n  ref=\"activatorContainer\",\n  :is=\"activatorWrapper\",\n  :class=\"wrapperClassName\",\n  @focus=\"() => { handleOpen(); handleFocus(); }\",\n  @blur=\"() => { handleBlur(); handleClose(); }\",\n  @mouseleave=\"handleMouseLeave\",\n  @mouseenter=\"handleMouseEnterFix\",\n  @mousedown=\"persistOnClick ? togglePersisting() : undefined\",\n  @keyup=\"handleKeyUp\",\n)\n  slot\n  Portal(v-if=\"activatorNode\", id-prefix=\"tooltip\")\n    TooltipOverlay(\n      :id=\"(String(id))\",topBarOffset\n      :preferredPosition=\"preferredPosition\"\n      :activator=\"activatorNode\"\n      :active=\"active\"\n      :accessibilityLabel=\"accessibilityLabel\"\n      :preventInteraction=\"dismissOnMouseOut\"\n      :width=\"width\"\n      :padding=\"padding\"\n      :borderRadius=\"borderRadius\"\n      :zIndexOverride=\"zIndexOverride\"\n      :instant=\"!shouldAnimate\",\n    )\n      slot(v-if=\"slots.content\", name=\"content\")\n      template(v-else)\n        Text(\n          as=\"span\",\n          variant=\"bodyMd\",\n        ) {{ content }}\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, onMounted, ref, watch } from 'vue';\nimport { classNames } from '@/utilities/css';\nimport { findFirstFocusableNode } from '@/utilities/focus';\nimport { useEphemeralPresenceManagerContext } from '@/use/useEphemeralPresenceManager';\nimport useId from '@/use/useId';\nimport { useToggle } from '@/use/useToggle';\nimport { Text } from '@/components';\nimport { Portal } from '../Portal';\nimport { TooltipOverlay } from './components';\nimport type { VueNode } from '@/utilities/types';\nimport type { TooltipOverlayProps } from './components/TooltipOverlay/utils';\nimport type { Width, Padding, BorderRadius } from './types';\nimport styles from '@polaris/components/Tooltip/Tooltip.module.css';\n\nconst HOVER_OUT_TIMEOUT = 150;\n\nexport interface TooltipProps {\n  /** Content to display within the tooltip */\n  content?: string;\n  /** Toggle whether the tooltip is visible */\n  active?: boolean;\n  /** Delay in milliseconds while hovering over an element before the tooltip is visible */\n  hoverDelay?: number;\n  /** Dismiss tooltip when not interacting with its children */\n  dismissOnMouseOut?: TooltipOverlayProps['preventInteraction'];\n  /**\n   * The direction the tooltip tries to display\n   * @default 'above'\n   */\n  preferredPosition?: TooltipOverlayProps['preferredPosition'];\n  /**\n   * The element type to wrap the activator in\n   * @default 'span'\n   */\n  activatorWrapper?: string;\n  /** Visually hidden text for screen readers */\n  accessibilityLabel?: string;\n  /**\n   * Width of content\n   * @default 'default'\n   */\n  width?: Width;\n  /**\n   * Padding of content\n   * @default 'default'\n   */\n  padding?: Padding;\n  /**\n   * Border radius of the tooltip\n   * @default '200'\n   */\n  borderRadius?: BorderRadius;\n  /** Override on the default z-index of 400 */\n  zIndexOverride?: number;\n  /** Whether to render a dotted underline underneath the tooltip's activator */\n  hasUnderline?: boolean;\n  /** Whether the tooltip's content remains open after clicking the activator */\n  persistOnClick?: boolean;\n}\n\nconst props = withDefaults(defineProps<TooltipProps>(), {\n  preferredPosition: 'above',\n  activatorWrapper: 'span',\n  width: 'default',\n  padding: 'default',\n  active: undefined,\n});\n\nconst emits = defineEmits<{\n  /* Callback fired when the tooltip is activated */\n  open: [];\n  /* Callback fired when the tooltip is dismissed */\n  close: [];\n}>();\n\nconst slots = defineSlots<{\n  /** The element to activate the tooltip */\n  default: (_?: VueNode) => any;\n  /** Content to display within the tooltip */\n  content?: (_?: VueNode) => any;\n}>();\n\nconst { presenceList, addPresence, removePresence } = useEphemeralPresenceManagerContext();\nconst id = useId();\nconst {\n  value: active,\n  setTrue: setActiveTrue,\n  setFalse: handleBlur,\n} = useToggle(Boolean(props.active));\n\nconst {\n  value: persist,\n  toggle: togglePersisting\n} = useToggle(Boolean(props.active) && Boolean(props.persistOnClick));\n\nconst activatorNode = ref<HTMLElement | null>(null);\nconst activatorContainer = ref<HTMLElement | null>(null);\nconst mouseEntered = ref(false);\nconst shouldAnimate = ref(!props.active);\nconst hoverDelayTimeout = ref<ReturnType<typeof setTimeout> | undefined>(undefined);\nconst hoverOutTimeout = ref<ReturnType<typeof setTimeout> | undefined>(undefined);\n\nconst wrapperClassName = computed(() =>\n  classNames(\n    props.activatorWrapper === 'div' && styles.TooltipContainer,\n    props.hasUnderline && styles.hasUnderline,\n  ),\n);\n\nconst handleFocus = () => {\n  if (props.active !== false) {\n    setActiveTrue();\n  }\n};\n\nconst handleOpen = () => {\n  shouldAnimate.value = !presenceList.value.tooltip && active.value;\n  emits('open');\n  addPresence('tooltip');\n};\n\nconst handleClose = () => {\n  emits('close');\n  shouldAnimate.value = false;\n  hoverOutTimeout.value = setTimeout(() => {\n    removePresence('tooltip');\n  }, HOVER_OUT_TIMEOUT);\n};\n\nconst handleKeyUp = (event: KeyboardEvent) => {\n  if (event.key !== 'Escape') return;\n  emits('close');\n  handleBlur();\n  props.persistOnClick && togglePersisting();\n};\n\nfunction setActivator(node: HTMLElement | null) {\n  const activatorContainerRef: any = activatorContainer;\n\n  if (node == null) {\n    activatorContainerRef.current = null;\n    activatorNode.value = null;\n    return;\n  }\n\n  if (node.firstElementChild) {\n    activatorNode.value = node.firstElementChild as HTMLElement;\n  }\n  activatorContainerRef.current = node;\n}\n\nfunction handleMouseEnter() {\n  mouseEntered.value = true;\n\n  if (props.hoverDelay && !presenceList.value.tooltip) {\n    hoverDelayTimeout.value = setTimeout(() => {\n      handleOpen();\n      handleFocus();\n    }, props.hoverDelay);\n  } else {\n    handleOpen();\n    handleFocus();\n  }\n}\n\nfunction handleMouseLeave() {\n  if (hoverDelayTimeout.value) {\n    clearTimeout(hoverDelayTimeout.value);\n    hoverDelayTimeout.value = undefined;\n  }\n\n  mouseEntered.value = false;\n  handleClose();\n\n  if (!persist.value) {\n    handleBlur();\n  }\n}\n\n// https://github.com/facebook/react/issues/10109\n// Mouseenter event not triggered when cursor moves from disabled button\nfunction handleMouseEnterFix() {\n  !mouseEntered.value && handleMouseEnter();\n}\n\nonMounted(\n  () => {\n    setActivator(activatorContainer.value);\n\n    // Set accesibility attributes on activator\n    const firstFocusable = activatorContainer.value\n      ? findFirstFocusableNode(activatorContainer.value)\n      : null;\n    const accessibilityNode = firstFocusable || activatorContainer.value;\n\n    if (!accessibilityNode) return;\n\n    accessibilityNode.tabIndex = 0;\n    accessibilityNode.setAttribute('aria-describedby', String(id));\n    accessibilityNode.setAttribute('data-polaris-tooltip-activator', 'true');\n\n    // Clear timeouts\n    if (hoverDelayTimeout.value) {\n      clearTimeout(hoverDelayTimeout.value);\n      hoverDelayTimeout.value = undefined;\n    }\n    if (hoverOutTimeout.value) {\n      clearTimeout(hoverOutTimeout.value);\n      hoverOutTimeout.value = undefined;\n    }\n  }\n);\n\nwatch(\n  () => [props.active, active.value],\n  () => {\n    if (props.active === false && active.value) {\n      handleClose();\n      handleBlur();\n    }\n  }\n);\n</script>\n"],"names":["_useSlots"],"mappings":"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"}