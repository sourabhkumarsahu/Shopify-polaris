import { defineComponent, useSlots, computed, openBlock, createElementBlock, normalizeClass, createBlock, unref, withCtx, renderSlot, normalizeStyle } from "vue";
import { c as classNames } from "../../../../utilities/css.js";
import { _ as _sfc_main$1 } from "../Section/Section.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../../../Scrollable/Scrollable.vue_vue_type_script_setup_true_lang.js";
const Popover = "Polaris-Popover";
const PopoverOverlay = "Polaris-Popover__PopoverOverlay";
const measuring = "Polaris-Popover--measuring";
const fullWidth = "Polaris-Popover--fullWidth";
const Content = "Polaris-Popover__Content";
const positionedAbove = "Polaris-Popover--positionedAbove";
const positionedCover = "Polaris-Popover--positionedCover";
const ContentContainer = "Polaris-Popover__ContentContainer";
const Pane = "Polaris-Popover__Pane";
const Section = "Polaris-Popover__Section";
const FocusTracker = "Polaris-Popover__FocusTracker";
const styles = {
  Popover,
  PopoverOverlay,
  "PopoverOverlay-noAnimation": "Polaris-Popover__PopoverOverlay--noAnimation",
  "PopoverOverlay-entering": "Polaris-Popover__PopoverOverlay--entering",
  "PopoverOverlay-open": "Polaris-Popover__PopoverOverlay--open",
  measuring,
  "PopoverOverlay-exiting": "Polaris-Popover__PopoverOverlay--exiting",
  fullWidth,
  Content,
  positionedAbove,
  positionedCover,
  ContentContainer,
  "Content-fullHeight": "Polaris-Popover__Content--fullHeight",
  "Content-fluidContent": "Polaris-Popover__Content--fluidContent",
  Pane,
  "Pane-fixed": "Polaris-Popover__Pane--fixed",
  "Pane-subdued": "Polaris-Popover__Pane--subdued",
  "Pane-captureOverscroll": "Polaris-Popover__Pane--captureOverscroll",
  Section,
  FocusTracker,
  "PopoverOverlay-hideOnPrint": "Polaris-Popover__PopoverOverlay--hideOnPrint"
};
const _hoisted_1 = ["styles"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Pane",
  props: {
    fixed: { type: Boolean },
    sectioned: { type: Boolean },
    height: {},
    maxHeight: {},
    minHeight: {},
    captureOverscroll: { type: Boolean, default: false },
    subdued: { type: Boolean }
  },
  emits: ["scrolled-to-bottom"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    useSlots();
    const className = computed(() => classNames(
      styles.Pane,
      props.fixed && styles["Pane-fixed"],
      props.subdued && styles["Pane-subdued"],
      props.captureOverscroll && styles["Pane-captureOverscroll"]
    ));
    const style = computed(() => {
      return {
        height: `${props.height}px`,
        maxHeight: `${props.maxHeight}px`,
        minHeight: `${props.minHeight}px`
      };
    });
    return (_ctx, _cache) => {
      return _ctx.fixed ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(className.value),
        styles: style.value
      }, [
        _ctx.sectioned ? (openBlock(), createBlock(unref(_sfc_main$1), { key: 0 }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        })) : renderSlot(_ctx.$slots, "default", { key: 1 })
      ], 10, _hoisted_1)) : (openBlock(), createBlock(unref(_sfc_main$2), {
        key: 1,
        shadow: "",
        style: normalizeStyle(style.value),
        class: normalizeClass(className.value),
        "scrollbar-width": "thin",
        onScrolledToBottom: _cache[0] || (_cache[0] = ($event) => emits("scrolled-to-bottom"))
      }, {
        default: withCtx(() => [
          _ctx.sectioned ? (openBlock(), createBlock(unref(_sfc_main$1), { key: 0 }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          })) : renderSlot(_ctx.$slots, "default", { key: 1 })
        ]),
        _: 3
      }, 8, ["style", "class"]));
    };
  }
});
export {
  _sfc_main as _,
  styles as s
};
//# sourceMappingURL=Pane.vue_vue_type_script_setup_true_lang.js.map
