{"version":3,"file":"Popover.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/Popover/Popover.vue"],"sourcesContent":["<template lang=\"pug\">\ncomponent(\n  :is=\"activatorWrapper\",\n  ref=\"activatorContainer\",\n)\n  slot(name=\"activator\")\n  Portal(\n    v-if=\"activatorNode && isDisplayed\",\n    id-prefix=\"popover\",\n  )\n    PopoverOverlay(\n      ref=\"overlayRef\",\n      v-bind=\"props\",\n      :id=\"String(id)\",\n      :activator=\"activatorNode\",\n      :preferInputActivator=\"preferInputActivator\",\n      :active=\"active\",\n      :fixed=\"fixed\",\n      :z-index-override=\"zIndexOverride\",\n      @close=\"handleClose\",\n    )\n      slot\n</template>\n\n<script setup lang=\"ts\">\nimport {\n  onMounted,\n  onBeforeUnmount,\n  ref,\n  watch,\n} from 'vue';\nimport { findFirstFocusableNodeIncludingDisabled, focusNextFocusableNode } from '@/utilities/focus';\nimport { Portal, PopoverOverlay } from '@/components';\nimport { portal } from '@polaris/components/shared';\nimport { setActivatorAttributes } from './set-activator-attributes';\nimport { PopoverCloseSource } from './components/PopoverOverlay/types';\nimport useId from '@/use/useId';\nimport type { VueNode } from '@/utilities/types';\nimport type { PopoverProps } from './types';\n\nconst props = withDefaults(defineProps<PopoverProps>(), {\n  activatorWrapper: 'div',\n  preferInputActivator: true,\n});\n\nconst emits = defineEmits<{\n  /** Callback when popover is closed */\n  'close': [event: PopoverCloseSource];\n}>();\n\nconst slots = defineSlots<{\n  /** The content to display inside the popover */\n  default?: (_?: VueNode) => any;\n  /** The content to display as the activator */\n  activator?: (_?: VueNode) => any;\n}>();\n\nconst id = useId();\n\nconst observer = ref<ResizeObserver | null>(null);\nconst isDisplayed = ref<boolean>(false);\nconst activatorNode = ref<HTMLElement | null>(null);\nconst activatorContainer = ref<HTMLElement | null>(null);\nconst overlayRef = ref<InstanceType<typeof PopoverOverlay> | HTMLElement | null>(null);\n\nwatch(\n  () => props.active,\n  () => {\n    setAccessibilityAttributes();\n  },\n)\n\nconst forceUpdatePosition = () => {\n  (overlayRef.value as InstanceType<typeof PopoverOverlay>).forceUpdatePosition();\n}\n\nconst setAccessibilityAttributes = () => {\n  if (activatorContainer.value == null) {\n    return;\n  }\n\n  const firstFocusable = findFirstFocusableNodeIncludingDisabled(activatorContainer.value);\n  const focusableActivator: HTMLElement & {\n    disabled?: boolean;\n  } = firstFocusable || activatorContainer.value;\n\n  const activatorDisabled = 'disabled' in focusableActivator\n    && Boolean(focusableActivator.disabled);\n\n  setActivatorAttributes(focusableActivator, {\n    id: String(id),\n    active: props.active,\n    ariaHaspopup: props.ariaHaspopup,\n    activatorDisabled,\n  });\n}\n\nconst handleClose = (source: PopoverCloseSource) => {\n  emits('close', source);\n\n  if (activatorContainer.value == null || props.preventFocusOnClose) {\n    return;\n  }\n\n  if (source === PopoverCloseSource.FocusOut && activatorNode.value) {\n    const focusableActivator = findFirstFocusableNodeIncludingDisabled(activatorNode.value)\n      || findFirstFocusableNodeIncludingDisabled(activatorContainer.value)\n      || activatorContainer.value;\n\n    if (!focusNextFocusableNode(focusableActivator, isInPortal)) {\n      focusableActivator.focus();\n    }\n  } else if (source === PopoverCloseSource.EscapeKeypress && activatorNode.value) {\n    const focusableActivator = findFirstFocusableNodeIncludingDisabled(activatorNode.value)\n      || findFirstFocusableNodeIncludingDisabled(activatorContainer.value)\n      || activatorContainer.value;\n\n    if (focusableActivator) {\n      focusableActivator.focus();\n    } else {\n      focusNextFocusableNode(focusableActivator, isInPortal);\n    }\n  }\n};\n\nonMounted(() => {\n  if (!activatorNode.value && activatorContainer.value) {\n    activatorNode.value = activatorContainer.value.firstElementChild as HTMLElement;\n  } else if (\n    activatorNode.value\n    && activatorContainer.value\n    && !activatorContainer.value.contains(activatorNode.value)\n  ) {\n    activatorNode.value = activatorContainer.value.firstElementChild as HTMLElement;\n  }\n\n  if (activatorNode.value && activatorContainer.value) {\n    activatorNode.value = activatorContainer.value.firstElementChild as HTMLElement;\n  }\n\n  if (!activatorNode.value) {\n    return;\n  }\n\n  observer.value = new ResizeObserver(() => {\n    setDisplayState();\n  });\n\n  observer.value.observe(activatorNode.value);\n\n  setDisplayState();\n\n  setAccessibilityAttributes();\n});\n\nonBeforeUnmount(() => {\n  observer.value?.disconnect();\n});\n\nfunction isInPortal(element: Element) {\n  let { parentElement } = element;\n\n  while (parentElement) {\n    if (parentElement.matches(portal.selector)) {return false;}\n    parentElement = parentElement.parentElement;\n  }\n\n  return true;\n};\n\nfunction setDisplayState() {\n  /**\n   * This is a workaround to prevent rendering the Popover when the content is moved into\n   * a React portal that hasn't been rendered. We don't want to render the Popover in this\n   * case because the auto-focus logic will break. We wait until the activatorContainer is\n   * displayed, which is when it has an offsetParent, or if the activatorContainer is the\n   * body, if it has a clientWidth bigger than 0.\n   * See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent\n   */\n  isDisplayed.value = Boolean(\n    activatorContainer.value\n    && (activatorContainer.value.offsetParent !== null\n      || (activatorContainer.value === activatorContainer.value.ownerDocument.body\n        && activatorContainer.value.clientWidth > 0)),\n  );\n}\n\ndefineExpose({\n  forceUpdatePosition,\n  close: (target = 'activator') => {\n    const source =\n      target === 'activator'\n        ? PopoverCloseSource.EscapeKeypress\n        : PopoverCloseSource.FocusOut;\n\n    handleClose(source);\n  },\n});\n</script>\n"],"names":["_useSlots"],"mappings":"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"}