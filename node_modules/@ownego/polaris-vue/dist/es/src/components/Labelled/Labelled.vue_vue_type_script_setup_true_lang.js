import { defineComponent, useSlots, computed, openBlock, createElementBlock, normalizeClass, unref, createVNode, mergeProps, withCtx, renderSlot, createCommentVNode } from "vue";
import { c as classNames } from "../../utilities/css.js";
import { u as useHasSlot } from "../../use/useHasSlot.js";
import { _ as _sfc_main$2 } from "../Button/ButtonFrom.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../InlineError/InlineError.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../Label/Label.vue_vue_type_script_setup_true_lang.js";
import { h as helpTextID } from "./utils.js";
import { _ as _sfc_main$4 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
const hidden = "Polaris-Labelled--hidden";
const LabelWrapper = "Polaris-Labelled__LabelWrapper";
const disabled = "Polaris-Labelled--disabled";
const HelpText = "Polaris-Labelled__HelpText";
const readOnly = "Polaris-Labelled--readOnly";
const Action = "Polaris-Labelled__Action";
const styles = {
  hidden,
  LabelWrapper,
  disabled,
  HelpText,
  readOnly,
  "Error": "Polaris-Labelled__Error",
  Action
};
const _hoisted_1 = ["id", "aria-disabled"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Labelled",
  props: {
    id: {},
    error: { type: [String, Array, Boolean] },
    action: {},
    labelHidden: { type: Boolean },
    requiredIndicator: { type: Boolean },
    disabled: { type: Boolean },
    readOnly: { type: Boolean }
  },
  setup(__props) {
    const { hasSlot } = useHasSlot();
    const props = __props;
    const slots = useSlots();
    const className = computed(() => {
      return classNames(
        props.labelHidden && styles.hidden,
        props.disabled && styles.disabled,
        props.readOnly && styles.readOnly
      );
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        unref(hasSlot)(slots.label) ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(styles).LabelWrapper)
        }, [
          createVNode(unref(_sfc_main$1), mergeProps(props, {
            id: _ctx.id,
            "required-indicator": _ctx.requiredIndicator,
            hidden: false
          }), {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "label")
            ]),
            _: 3
          }, 16, ["id", "required-indicator"]),
          _ctx.action ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(styles).Action)
          }, [
            createVNode(unref(_sfc_main$2), {
              action: _ctx.action,
              overrides: { variant: "plain" }
            }, null, 8, ["action"])
          ], 2)) : createCommentVNode("", true)
        ], 2)) : createCommentVNode("", true),
        renderSlot(_ctx.$slots, "default"),
        _ctx.error && typeof _ctx.error !== "boolean" ? (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(unref(styles).Error)
        }, [
          createVNode(unref(_sfc_main$3), {
            message: _ctx.error,
            "field-id": _ctx.id
          }, null, 8, ["message", "field-id"])
        ], 2)) : createCommentVNode("", true),
        unref(hasSlot)(slots.helpText) ? (openBlock(), createElementBlock("div", {
          key: 2,
          class: normalizeClass(unref(styles).HelpText),
          id: unref(helpTextID)(_ctx.id),
          "aria-disabled": _ctx.disabled
        }, [
          createVNode(unref(_sfc_main$4), {
            "break-word": "",
            as: "span",
            tone: "subdued",
            variant: "bodyMd"
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "helpText")
            ]),
            _: 3
          })
        ], 10, _hoisted_1)) : createCommentVNode("", true)
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Labelled.vue_vue_type_script_setup_true_lang.js.map
