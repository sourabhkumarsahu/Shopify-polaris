import { defineComponent, useSlots, computed, openBlock, createElementBlock, normalizeClass, createElementVNode, unref, createVNode, withCtx, renderSlot } from "vue";
import { c as classNames } from "../../utilities/css.js";
import { l as labelId } from "./utils.js";
import { _ as _sfc_main$1 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
const Label = "Polaris-Label";
const hidden = "Polaris-Label--hidden";
const Text = "Polaris-Label__Text";
const RequiredIndicator = "Polaris-Label__RequiredIndicator";
const styles = {
  Label,
  hidden,
  Text,
  RequiredIndicator
};
const _hoisted_1 = ["id", "for"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Label",
  props: {
    id: {},
    hidden: { type: Boolean },
    requiredIndicator: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    useSlots();
    const className = computed(() => {
      return classNames(
        styles.Label,
        props.hidden && styles.hidden
      );
    });
    const requiredIndicator = computed(() => classNames(
      styles.Text,
      props.requiredIndicator && styles.requiredIndicator
    ));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        createElementVNode("label", {
          id: unref(labelId)(_ctx.id),
          for: _ctx.id,
          class: normalizeClass(requiredIndicator.value)
        }, [
          createVNode(unref(_sfc_main$1), {
            as: "span",
            variant: "bodyMd"
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          })
        ], 10, _hoisted_1)
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Label.vue_vue_type_script_setup_true_lang.js.map
