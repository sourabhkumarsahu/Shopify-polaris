import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, createVNode, unref, mergeProps, withCtx, renderSlot } from "vue";
import { c as classNames } from "../../../../utilities/css.js";
import { _ as _sfc_main$1 } from "../../../Box/Box.vue_vue_type_script_setup_true_lang.js";
const Section = "Polaris-Modal-Section";
const titleHidden = "Polaris-Modal-Section--titleHidden";
const styles = {
  Section,
  titleHidden
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Section",
  props: {
    flush: { type: Boolean, default: false },
    subdued: { type: Boolean, default: false },
    titleHidden: { type: Boolean, default: false }
  },
  setup(__props) {
    const props = __props;
    const className = computed(() => classNames(
      styles.Section,
      props.titleHidden && styles.titleHidden
    ));
    const additionalAttrs = computed(() => {
      const attrs = {};
      if (props.titleHidden) {
        attrs["padding-inline-end"] = "0";
      }
      if (props.subdued) {
        attrs["background"] = "bg-surface-tertiary";
      }
      return attrs;
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        createVNode(unref(_sfc_main$1), mergeProps({
          as: "section",
          padding: _ctx.flush ? "0" : "400"
        }, additionalAttrs.value), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, ["padding"])
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Section.vue_vue_type_script_setup_true_lang.js.map
