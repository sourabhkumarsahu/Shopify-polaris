import { defineComponent, ref, computed, onMounted, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, unref, createVNode, withCtx, createElementVNode, renderSlot } from "vue";
import { c as classNames, v as variationName } from "../../../../utilities/css.js";
import { f as focusFirstFocusableNode } from "../../../../utilities/focus.js";
import { K as Key } from "../../../../utilities/types.js";
import { _ as _sfc_main$2 } from "../../../KeypressListener/KeypressListener.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../../TrapFocus/TrapFocus.vue_vue_type_script_setup_true_lang.js";
const Container = "Polaris-Modal-Dialog__Container";
const Dialog = "Polaris-Modal-Dialog";
const Modal = "Polaris-Modal-Dialog__Modal";
const limitHeight = "Polaris-Modal-Dialog--limitHeight";
const sizeSmall = "Polaris-Modal-Dialog--sizeSmall";
const sizeLarge = "Polaris-Modal-Dialog--sizeLarge";
const sizeFullScreen = "Polaris-Modal-Dialog--sizeFullScreen";
const animateFadeUp = "Polaris-Modal-Dialog--animateFadeUp";
const entering = "Polaris-Modal-Dialog--entering";
const exiting = "Polaris-Modal-Dialog--exiting";
const exited = "Polaris-Modal-Dialog--exited";
const entered = "Polaris-Modal-Dialog--entered";
const styles = {
  Container,
  Dialog,
  Modal,
  limitHeight,
  sizeSmall,
  sizeLarge,
  sizeFullScreen,
  animateFadeUp,
  entering,
  exiting,
  exited,
  entered
};
const _hoisted_1 = ["aria-label", "aria-labelledby"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Dialog",
  props: {
    labelledBy: {},
    limitHeight: { type: Boolean },
    size: {},
    in: { type: Boolean },
    hasToasts: { type: Boolean }
  },
  emits: ["close", "closing", "entered", "exited"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const dialogNode = ref(null);
    const closing = ref(false);
    const classes = computed(() => {
      return classNames(
        styles.Modal,
        props.size && styles[variationName("size", props.size)],
        props.limitHeight && styles.limitHeight
      );
    });
    onMounted(() => {
      if (dialogNode.value && dialogNode.value.contains(document.activeElement)) {
        focusFirstFocusableNode(dialogNode.value);
      }
      emit("entered");
    });
    onBeforeUnmount(() => {
      emit("exited");
    });
    const handleKeyDown = () => {
      closing.value = true;
      emit("closing", true);
    };
    const handleKeyUp = () => {
      closing.value = false;
      emit("closing", false);
      emit("close");
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref: "containerNode",
        "data-polaris-layer": "",
        "data-polaris-overlay": "",
        class: normalizeClass(unref(styles).Container)
      }, [
        createVNode(unref(_sfc_main$1), null, {
          default: withCtx(() => [
            createElementVNode("div", {
              role: "dialog",
              tabindex: "-1",
              "aria-modal": "",
              "aria-label": _ctx.labelledBy,
              "aria-labelledby": _ctx.labelledBy,
              class: normalizeClass(unref(styles).Dialog)
            }, [
              createElementVNode("div", {
                class: normalizeClass(classes.value)
              }, [
                createVNode(unref(_sfc_main$2), {
                  "key-event": "keydown",
                  "key-code": unref(Key).Escape,
                  handler: handleKeyDown
                }, null, 8, ["key-code"]),
                createVNode(unref(_sfc_main$2), {
                  "key-code": unref(Key).Escape,
                  handler: handleKeyUp
                }, null, 8, ["key-code"]),
                renderSlot(_ctx.$slots, "default")
              ], 2)
            ], 10, _hoisted_1)
          ]),
          _: 3
        })
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Dialog.vue_vue_type_script_setup_true_lang.js.map
