{"version":3,"file":"Modal.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/Modal/Modal.vue"],"sourcesContent":["<template lang=\"pug\">\n<!-- activator markup -->\ntemplate(v-if=\"hasSlot(slots.activator)\")\n  Box(ref=\"activatorRef\")\n    slot(name=\"activator\")\n\nPortal(\n  v-if=\"open\",\n  id-prefix=\"modal\",\n)\n  Dialog(\n    :labelled-by=\"headerId\",\n    :size=\"size\",\n    :limit-height=\"limitHeight\",\n    @close=\"emits('close')\",\n    @closing=\"setClosing\",\n    @entered=\"handleEntered\",\n    @exited=\"handleExited\",\n  )\n    Header(\n      :title-hidden=\"titleHidden\",\n      :id=\"headerId\",\n      :closing=\"closing\",\n      @close=\"emits('close')\",\n    )\n      slot(name=\"title\")\n\n    <!-- body markup -->\n    iframe(\n      v-if=\"src\",\n      :name=\"iframeName\",\n      :title=\"iframeTitle\",\n      :src=\"src\",\n      :class=\"styles.Iframe\",\n      :style=\"{ height: `${iframeHeight}px` }\",\n      @load=\"handleIframeLoad\",\n    )\n    div(\n      v-else-if=\"noScroll\",\n      :class=\"styles.noScrollBody\",\n    )\n      Box(\n        width=\"100%\",\n        overflow-x=\"hidden\",\n        overflow-y=\"hidden\",\n      )\n        <!-- body -->\n        Box(\n          v-if=\"loading\",\n          padding=\"400\",\n        )\n          InlineStack(\n            gap=\"400\",\n            align=\"center\",\n            block-align=\"center\",\n          )\n            Spinner\n        template(v-else)\n          Section(\n            v-if=\"sectioned\",\n            :title-hidden=\"titleHidden\",\n          )\n            slot\n          slot(v-else)\n    Scrollable(\n      v-else,\n      shadow,\n      :class=\"styles.Body\",\n      @scrolled-to-bottom=\"emits('scrolled-to-bottom')\",\n    )\n      <!-- body -->\n      Box(\n        v-if=\"loading\",\n        padding=\"400\",\n      )\n        InlineStack(\n          gap=\"400\",\n          align=\"center\",\n          block-align=\"center\",\n        )\n          Spinner\n      template(v-else)\n        Section(\n          v-if=\"sectioned\",\n          :title-hidden=\"titleHidden\",\n        )\n          slot\n        slot(v-else)\n\n    <!-- footer markup -->\n    Footer(\n      v-if=\"hasSlot(slots.footer)  || primaryAction || secondaryActions\",\n      :primary-action=\"primaryAction\",\n      :secondary-actions=\"secondaryActions\",\n    )\n      slot(name=\"footer\")\n\n  Backdrop(\n    @closing=\"setClosing\",\n    @click=\"clickOutsideToClose ? emits('close') : undefined\",\n  )\n</template>\n\n<script setup lang=\"ts\">\nimport {\n  ref,\n  useSlots,\n  provide,\n} from 'vue';\nimport useId from '@/use/useId';\nimport useI18n from '@/use/useI18n';\nimport { useHasSlot } from '@/use/useHasSlot';\nimport { focusFirstFocusableNode } from '@/utilities/focus';\nimport styles from '@polaris/components/Modal/Modal.module.css';\nimport {\n  Portal,\n  Spinner,\n  Backdrop,\n  Scrollable,\n  Box,\n  InlineStack,\n} from '@/components';\nimport {\n  Dialog,\n  Header,\n  ModalSection as Section,\n  Footer,\n} from './components';\nimport {\n  type VueNode,\n  type ComplexAction,\n} from '@/utilities/types';\nimport { type ModalSize } from './utils';\n\nconst IFRAME_LOADING_HEIGHT = 200;\nconst DEFAULT_IFRAME_CONTENT_HEIGHT = 400;\n\ninterface ModalProps {\n  /** Whether the modal is open or not */\n  open: boolean;\n  /** The url that will be loaded as the content of the modal */\n  src?: string;\n  /** The name of the modal content iframe */\n  iframeName?: string;\n  /**\n   * Hide the title in the modal\n   * @default false\n   */\n  titleHidden?: boolean;\n  /** Automatically adds sections to modal */\n  sectioned?: boolean;\n  /** The size of the modal */\n  size?: ModalSize;\n  /** Limits modal height on large screens with scrolling */\n  limitHeight?: boolean;\n  /** Replaces modal content with a spinner while a background action is being performed */\n  loading?: boolean;\n  /** Removes Scrollable container from the modal content */\n  noScroll?: boolean;\n  /** Click or tap the area outside to close the modal */\n  clickOutsideToClose?: boolean;\n  /** Primary action */\n  primaryAction?: ComplexAction;\n  /** Collection of secondary actions */\n  secondaryActions?: ComplexAction[];\n}\n\nexport type ModalSlots = {\n  /** The element or the RefObject that activates the Modal */\n  activator: (_VueNode: VueNode) => null;\n  /** The content for the title of the modal */\n  title: (_: VueNode) => null;\n  /** The content to display inside modal */\n  default: (_: VueNode) => null;\n  /** Inner content of the footer */\n  footer: (_: VueNode) => null;\n}\n\nexport type ModalEvents = {\n  /** Callback when iframe has loaded */\n  'iframe-load': [source: Event],\n  /** Callback when modal transition animation has ended */\n  'transition-end': [],\n  /** Callback when the bottom of the modal content is reached */\n  'scrolled-to-bottom': [],\n  /** Callback when the modal is closed */\n  'close': [],\n}\n\nwithDefaults(defineProps<ModalProps>(), {\n  titleHidden: false,\n  clickOutsideToClose: true,\n});\n\ndefineSlots<ModalSlots>();\n\nconst emits = defineEmits<ModalEvents>();\n\nconst slots = useSlots();\nconst { hasSlot } = useHasSlot();\nconst i18n = useI18n();\n\nconst headerId = String(useId());\nconst iframeTitle = i18n.translate('Polaris.Modal.iframeTitle');\n\nconst activatorNode = ref<HTMLElement | null>(null);\n\nconst iframeHeight = ref<number>(IFRAME_LOADING_HEIGHT);\nconst closing = ref<boolean>(false);\n\nconst handleIframeLoad = (evt: Event) => {\n  const iframe = evt.target as HTMLIFrameElement;\n\n  if (iframe && iframe.contentWindow) {\n    try {\n      iframeHeight.value = iframe.contentWindow.document.body.scrollHeight;\n    } catch (_error) {\n      iframeHeight.value = DEFAULT_IFRAME_CONTENT_HEIGHT;\n    }\n  }\n\n  emits('iframe-load', evt);\n}\n\nconst handleEntered = () => {\n  emits('transition-end');\n}\n\nconst handleExited = () => {\n  iframeHeight.value = IFRAME_LOADING_HEIGHT;\n\n  const node = activatorNode.value;\n\n  if (node) {\n    requestAnimationFrame(() => focusFirstFocusableNode(node));\n  }\n};\n\nconst setClosing = (newVal: boolean) => {\n  closing.value = newVal;\n};\n\nprovide('within-content-context', true);\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsIA,MAAM,wBAAwB;AAC9B,MAAM,gCAAgC;;;;;;;;;;;;;;;;;;;AA6DtC,UAAM,QAAQ;AAEd,UAAM,QAAQ;AACR,UAAA,EAAE,YAAY;AACpB,UAAM,OAAO;AAEP,UAAA,WAAW,OAAO,MAAA,CAAO;AACzB,UAAA,cAAc,KAAK,UAAU,2BAA2B;AAExD,UAAA,gBAAgB,IAAwB,IAAI;AAE5C,UAAA,eAAe,IAAY,qBAAqB;AAChD,UAAA,UAAU,IAAa,KAAK;AAE5B,UAAA,mBAAmB,CAAC,QAAe;AACvC,YAAM,SAAS,IAAI;AAEf,UAAA,UAAU,OAAO,eAAe;AAC9B,YAAA;AACF,uBAAa,QAAQ,OAAO,cAAc,SAAS,KAAK;AAAA,iBACjD,QAAQ;AACf,uBAAa,QAAQ;AAAA,QACvB;AAAA,MACF;AAEA,YAAM,eAAe,GAAG;AAAA,IAAA;AAG1B,UAAM,gBAAgB,MAAM;AAC1B,YAAM,gBAAgB;AAAA,IAAA;AAGxB,UAAM,eAAe,MAAM;AACzB,mBAAa,QAAQ;AAErB,YAAM,OAAO,cAAc;AAE3B,UAAI,MAAM;AACc,8BAAA,MAAM,wBAAwB,IAAI,CAAC;AAAA,MAC3D;AAAA,IAAA;AAGI,UAAA,aAAa,CAAC,WAAoB;AACtC,cAAQ,QAAQ;AAAA,IAAA;AAGlB,YAAQ,0BAA0B,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}