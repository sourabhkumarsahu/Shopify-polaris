import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, createBlock, unref } from "vue";
import { c as classNames, v as variationName } from "../../utilities/css.js";
import { _ as _sfc_main$2 } from "../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../Image/Image.vue_vue_type_script_setup_true_lang.js";
const Thumbnail = "Polaris-Thumbnail";
const sizeExtraSmall = "Polaris-Thumbnail--sizeExtraSmall";
const sizeSmall = "Polaris-Thumbnail--sizeSmall";
const sizeMedium = "Polaris-Thumbnail--sizeMedium";
const sizeLarge = "Polaris-Thumbnail--sizeLarge";
const transparent = "Polaris-Thumbnail--transparent";
const styles = {
  Thumbnail,
  sizeExtraSmall,
  sizeSmall,
  sizeMedium,
  sizeLarge,
  transparent
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Thumbnail",
  props: {
    size: { default: "medium" },
    source: {},
    alt: {},
    transparent: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const className = computed(
      () => classNames(
        styles.Thumbnail,
        props.size && styles[variationName("size", props.size)],
        props.transparent && styles.transparent
      )
    );
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", {
        class: normalizeClass(className.value)
      }, [
        typeof _ctx.source === "string" ? (openBlock(), createBlock(unref(_sfc_main$1), {
          key: 0,
          alt: _ctx.alt,
          source: _ctx.source
        }, null, 8, ["alt", "source"])) : (openBlock(), createBlock(unref(_sfc_main$2), {
          key: 1,
          accessibilityLabel: _ctx.alt,
          source: _ctx.source
        }, null, 8, ["accessibilityLabel", "source"]))
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Thumbnail.vue_vue_type_script_setup_true_lang.js.map
