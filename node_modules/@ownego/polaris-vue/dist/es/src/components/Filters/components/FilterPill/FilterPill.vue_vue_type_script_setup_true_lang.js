import { defineComponent, ref, computed, onMounted, watch, openBlock, createElementBlock, createBlock, unref, withCtx, createElementVNode, normalizeClass, createVNode, createCommentVNode, createTextVNode, toDisplayString, resolveDynamicComponent } from "vue";
import { c as classNames } from "../../../../utilities/css.js";
import { u as useI18n } from "../../../../use/useI18n.js";
import { _ as _sfc_main$8 } from "../../../BlockStack/BlockStack.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../../../Box/Box.vue_vue_type_script_setup_true_lang.js";
import { u as useToggle } from "../../../../use/useToggle.js";
import { _ as _sfc_main$9 } from "../../../Button/Button.vue_vue_type_script_setup_true_lang.js";
import { g as ChevronDownIcon, h as XSmallIcon } from "../../../../../vendor.js";
import { _ as _sfc_main$6 } from "../../../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../../../InlineStack/InlineStack.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../../Popover/Popover.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$7 } from "../../../Popover/components/Section/Section.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$5 } from "../../../Text/Text.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../../../UnstyledButton/UnstyledButton.vue_vue_type_script_setup_true_lang.js";
const FilterButton = "Polaris-Filters-FilterPill__FilterButton";
const focusedFilterButton = "Polaris-Filters-FilterPill--focusedFilterButton";
const ActiveFilterButton = "Polaris-Filters-FilterPill__ActiveFilterButton";
const PlainButton = "Polaris-Filters-FilterPill__PlainButton";
const ToggleButton = "Polaris-Filters-FilterPill__ToggleButton";
const clearButton = "Polaris-Filters-FilterPill--clearButton";
const IconWrapper = "Polaris-Filters-FilterPill__IconWrapper";
const PopoverWrapper = "Polaris-Filters-FilterPill__PopoverWrapper";
const ClearButtonWrapper = "Polaris-Filters-FilterPill__ClearButtonWrapper";
const styles = {
  FilterButton,
  focusedFilterButton,
  ActiveFilterButton,
  PlainButton,
  ToggleButton,
  clearButton,
  IconWrapper,
  PopoverWrapper,
  ClearButtonWrapper
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "FilterPill",
  props: {
    filterKey: {},
    selected: { type: Boolean },
    initialActive: { type: Boolean },
    disabled: { type: Boolean },
    closeOnChildOverlayClick: { type: Boolean },
    unsavedChanges: { type: Boolean, default: false },
    disclosureZIndexOverride: {},
    name: {},
    label: {},
    filter: { type: [String, Number, Boolean, Function, Object, null] },
    shortcut: { type: Boolean },
    pinned: { type: Boolean },
    hideClearButton: { type: Boolean },
    onAction: {},
    suffix: { type: [String, Number, Boolean, Function, Object, null] },
    section: {},
    hidden: { type: Boolean }
  },
  emits: ["click", "remove"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const {
      value: focused,
      setTrue: setFocusedTrue,
      setFalse: setFocusedFalse
    } = useToggle(false);
    const popoverActive = ref(props.initialActive);
    const elementRef = ref(null);
    const buttonClasses = computed(() => classNames(
      styles.FilterButton,
      props.selected && styles.ActiveFilterButton,
      popoverActive.value && styles.FocusFilterButton,
      focused.value && styles.FocusFilterButton
    ));
    const clearButtonClassNames = computed(() => classNames(
      styles.PlainButton,
      styles.clearButton
    ));
    const toggleButtonClassNames = computed(() => classNames(
      styles.PlainButton,
      styles.ToggleButton
    ));
    const togglePopoverActive = () => {
      if (props.filter) {
        popoverActive.value = !popoverActive.value;
      }
      emits("click", props.filterKey);
    };
    const handlePopoverClose = () => {
      togglePopoverActive();
      if (!props.selected) {
        emits("remove", props.filterKey);
      }
    };
    const handleClear = () => {
      emits("remove", props.filterKey);
      popoverActive.value = false;
    };
    const handleScroll = () => {
      var _a, _b;
      const node = elementRef.value;
      if (!node || !popoverActive.value) {
        return;
      }
      const parent = (_a = node.parentElement) == null ? void 0 : _a.parentElement;
      if (!parent) {
        return;
      }
      (_b = parent.scroll) == null ? void 0 : _b.call(parent, {
        left: node.offsetLeft
      });
    };
    onMounted(() => {
      handleScroll();
    });
    watch(
      () => popoverActive.value,
      () => {
        handleScroll();
      }
    );
    return (_ctx, _cache) => {
      return !_ctx.disabled ? (openBlock(), createElementBlock("div", {
        key: 0,
        ref_key: "elementRef",
        ref: elementRef
      }, [
        (openBlock(), createBlock(unref(_sfc_main$1), {
          active: popoverActive.value,
          key: _ctx.filterKey,
          "z-index-override": _ctx.disclosureZIndexOverride,
          "prevent-close-on-child-overlay-click": !_ctx.closeOnChildOverlayClick,
          "preferred-alignment": "left",
          onClose: handlePopoverClose
        }, {
          activator: withCtx(() => [
            createElementVNode("div", {
              class: normalizeClass(buttonClasses.value)
            }, [
              createVNode(unref(_sfc_main$2), {
                gap: "0",
                wrap: false
              }, {
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$3), {
                    type: "button",
                    class: normalizeClass(toggleButtonClassNames.value),
                    accessibilityLabel: _ctx.unsavedChanges ? unref(i18n).translate("Polaris.FilterPill.unsavedChanges", { label: _ctx.label }) : _ctx.label,
                    onClick: togglePopoverActive,
                    onFocus: unref(setFocusedTrue),
                    onBlur: unref(setFocusedFalse)
                  }, {
                    default: withCtx(() => [
                      createVNode(unref(_sfc_main$2), {
                        align: "center",
                        "block-align": "center",
                        gap: "0",
                        wrap: false
                      }, {
                        default: withCtx(() => [
                          _ctx.unsavedChanges ? (openBlock(), createBlock(unref(_sfc_main$4), {
                            key: 0,
                            "padding-inline-end": "150"
                          }, {
                            default: withCtx(() => [
                              createVNode(unref(_sfc_main$4), {
                                background: "bg-fill-emphasis",
                                "border-radius": "050",
                                width: "6px",
                                "min-height": "6px"
                              })
                            ]),
                            _: 1
                          })) : createCommentVNode("", true),
                          createVNode(unref(_sfc_main$4), {
                            "padding-inline-start": _ctx.unsavedChanges ? "0" : "050"
                          }, {
                            default: withCtx(() => [
                              createVNode(unref(_sfc_main$2), null, {
                                default: withCtx(() => [
                                  createVNode(unref(_sfc_main$5), {
                                    as: "span",
                                    variant: "bodySm"
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(_ctx.label), 1)
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["padding-inline-start"]),
                          !_ctx.selected ? (openBlock(), createElementBlock("div", {
                            key: 1,
                            class: normalizeClass(unref(styles).IconWrapper)
                          }, [
                            createVNode(unref(_sfc_main$6), {
                              source: unref(ChevronDownIcon),
                              tone: "base"
                            }, null, 8, ["source"])
                          ], 2)) : createCommentVNode("", true)
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  }, 8, ["class", "accessibilityLabel", "onFocus", "onBlur"]),
                  _ctx.selected ? (openBlock(), createBlock(unref(_sfc_main$3), {
                    key: 0,
                    type: "button",
                    className: clearButtonClassNames.value,
                    "aria-label": unref(i18n).translate("Polaris.FilterPill.clear"),
                    onClick: handleClear
                  }, {
                    default: withCtx(() => [
                      createElementVNode("div", {
                        class: normalizeClass(unref(styles).IconWrapper)
                      }, [
                        createVNode(unref(_sfc_main$6), {
                          source: unref(XSmallIcon),
                          tone: "base"
                        }, null, 8, ["source"])
                      ], 2)
                    ]),
                    _: 1
                  }, 8, ["className", "aria-label"])) : createCommentVNode("", true)
                ]),
                _: 1
              })
            ], 2)
          ]),
          default: withCtx(() => [
            createElementVNode("div", {
              class: normalizeClass(unref(styles).PopoverWrapper)
            }, [
              createVNode(unref(_sfc_main$7), null, {
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$8), { gap: "100" }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.filter))),
                      !_ctx.hideClearButton ? (openBlock(), createElementBlock("div", {
                        key: 0,
                        class: normalizeClass(unref(styles).ClearButtonWrapper)
                      }, [
                        createVNode(unref(_sfc_main$9), {
                          variant: "plain",
                          disabled: !_ctx.selected,
                          textAlign: "left",
                          onClick: handleClear
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(i18n).translate("Polaris.FilterPill.clear")), 1)
                          ]),
                          _: 1
                        }, 8, ["disabled"])
                      ], 2)) : createCommentVNode("", true)
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              })
            ], 2)
          ]),
          _: 1
        }, 8, ["active", "z-index-override", "prevent-close-on-child-overlay-click"]))
      ], 512)) : createCommentVNode("", true);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=FilterPill.vue_vue_type_script_setup_true_lang.js.map
