import { defineComponent, mergeModels, useModel, computed, openBlock, createBlock, unref, createSlots, withCtx, createVNode, createTextVNode, toDisplayString } from "vue";
import { u as useBreakpoints } from "../../../../use/useBreakpoints.js";
import { S as SearchIcon } from "../../../../../vendor.js";
import { u as useI18n } from "../../../../use/useI18n.js";
import { u as useId } from "../../../../use/useId.js";
import { _ as _sfc_main$2 } from "../../../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../../../Text/Text.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../../TextField/TextField.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "SearchField",
  props: /* @__PURE__ */ mergeModels({
    focused: { type: Boolean },
    placeholder: {},
    disabled: { type: Boolean },
    borderlessQueryField: { type: Boolean },
    loading: { type: Boolean },
    selectedViewName: {}
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["change", "clear", "focus", "blur"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const model = useModel(__props, "modelValue");
    const i18n = useI18n();
    const id = useId();
    const breakpoints = useBreakpoints();
    const showSuffix = computed(() => {
      return model.value && props.selectedViewName && breakpoints.value.mdUp;
    });
    function handleChange(value) {
      emits("change", value);
    }
    function handleClear() {
      emits("clear");
      emits("change", "");
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        id: String(unref(id)),
        modelValue: model.value,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
        "label-hidden": "",
        "clear-button": "",
        size: "slim",
        "auto-complete": "off",
        placeholder: _ctx.placeholder,
        disabled: _ctx.disabled,
        variant: _ctx.borderlessQueryField ? "borderless" : "inherit",
        focused: _ctx.focused,
        label: _ctx.placeholder,
        "auto-size": Boolean(showSuffix.value),
        loading: _ctx.loading,
        onChange: _cache[1] || (_cache[1] = (eventValue) => handleChange(eventValue ?? model.value)),
        onClearButtonClick: handleClear,
        onFocus: _cache[2] || (_cache[2] = ($event) => emits("focus")),
        onBlur: _cache[3] || (_cache[3] = ($event) => emits("blur"))
      }, createSlots({ _: 2 }, [
        unref(breakpoints).mdUp ? {
          name: "prefix",
          fn: withCtx(() => [
            createVNode(unref(_sfc_main$2), { source: unref(SearchIcon) }, null, 8, ["source"])
          ]),
          key: "0"
        } : void 0,
        showSuffix.value ? {
          name: "suffix",
          fn: withCtx(() => [
            createVNode(unref(_sfc_main$3), {
              as: "span",
              variant: "bodyMd",
              tone: "subdued"
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Filters.searchInView", { viewName: _ctx.selectedViewName || "" })), 1)
              ]),
              _: 1
            })
          ]),
          key: "1"
        } : void 0
      ]), 1032, ["id", "modelValue", "placeholder", "disabled", "variant", "focused", "label", "auto-size", "loading"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=SearchField.vue_vue_type_script_setup_true_lang.js.map
