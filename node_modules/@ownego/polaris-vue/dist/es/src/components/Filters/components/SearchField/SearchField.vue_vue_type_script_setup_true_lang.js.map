{"version":3,"file":"SearchField.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../../../src/components/Filters/components/SearchField/SearchField.vue"],"sourcesContent":["<template lang=\"pug\">\nTextField(\n  :id=\"String(id)\",\n  v-model=\"model\",\n  label-hidden,\n  clear-button,\n  size=\"slim\",\n  auto-complete=\"off\",\n  :placeholder=\"placeholder\",\n  :disabled=\"disabled\",\n  :variant=\"borderlessQueryField ? 'borderless' : 'inherit'\",\n  :focused=\"focused\",\n  :label=\"placeholder\",\n  :auto-size=\"Boolean(showSuffix)\",\n  :loading=\"loading\",\n  @change=\"(eventValue) => handleChange(eventValue ?? model)\",\n  @clear-button-click=\"handleClear\",\n  @focus=\"emits('focus')\",\n  @blur=\"emits('blur')\",\n)\n  template(\n    v-if=\"breakpoints.mdUp\",\n    #prefix,\n  )\n    Icon(:source=\"SearchIcon\")\n  template(\n    v-if=\"showSuffix\",\n    #suffix,\n  )\n    Text(\n      as=\"span\",\n      variant=\"bodyMd\",\n      tone=\"subdued\",\n    ) {{ i18n.translate('Polaris.Filters.searchInView', { viewName: selectedViewName || '' }) }}\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue';\nimport {\n  Text,\n  Icon,\n  TextField,\n} from '@/components';\nimport { useBreakpoints } from '@/use/useBreakpoints';\nimport useId from '@/use/useId';\nimport useI18n from '@/use/useI18n';\nimport SearchIcon from '@icons/SearchIcon.svg';\n\ninterface SearchFieldProps {\n  focused?: boolean;\n  placeholder?: string;\n  disabled?: boolean;\n  borderlessQueryField?: boolean;\n  /** Show a loading spinner to the right of the input */\n  loading?: boolean;\n  /** @deprecated If present, will show as a suffix in the text field when entering a search term */\n  selectedViewName?: string;\n}\n\ntype SearchFieldEvents = {\n  'change': [string];\n  'clear': [];\n  'focus': [];\n  'blur': [];\n};\n\nconst props = defineProps<SearchFieldProps>();\nconst emits = defineEmits<SearchFieldEvents>();\n\nconst model = defineModel<string>();\n\nconst i18n = useI18n();\nconst id = useId();\nconst breakpoints = useBreakpoints();\n\nconst showSuffix = computed(() => {\n  return model.value && props.selectedViewName && breakpoints.value.mdUp;\n})\n\nfunction handleChange(value:string) {\n  emits('change', value);\n}\n\nfunction handleClear() {\n  emits('clear');\n  emits('change', '');\n}\n</script>\n"],"names":["_useModel"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA,UAAM,QAAQ;AACd,UAAM,QAAQ;AAER,UAAA,QAAQA,SAAoB,SAAA,YAAA;AAElC,UAAM,OAAO;AACb,UAAM,KAAK;AACX,UAAM,cAAc;AAEd,UAAA,aAAa,SAAS,MAAM;AAChC,aAAO,MAAM,SAAS,MAAM,oBAAoB,YAAY,MAAM;AAAA,IAAA,CACnE;AAED,aAAS,aAAa,OAAc;AAClC,YAAM,UAAU,KAAK;AAAA,IACvB;AAEA,aAAS,cAAc;AACrB,YAAM,OAAO;AACb,YAAM,UAAU,EAAE;AAAA,IACpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}