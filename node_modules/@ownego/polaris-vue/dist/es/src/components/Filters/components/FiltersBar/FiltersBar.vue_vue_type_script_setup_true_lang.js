import { defineComponent, ref, computed, onMounted, watch, openBlock, createElementBlock, normalizeClass, createElementVNode, unref, Fragment, renderList, createBlock, mergeProps, createVNode, withCtx, createTextVNode, toDisplayString, createCommentVNode, renderSlot } from "vue";
import { _ as _sfc_main$5 } from "../../../ActionList/ActionList.vue_vue_type_script_setup_true_lang.js";
import { c as classNames } from "../../../../utilities/css.js";
import { u as useI18n } from "../../../../use/useI18n.js";
import { _ as _sfc_main$7 } from "../../../Box/Box.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$6 } from "../../../Button/Button.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../FilterPill/FilterPill.vue_vue_type_script_setup_true_lang.js";
import { P as PlusIcon } from "../../../../../vendor.js";
import { s as styles } from "../../Filters.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$8 } from "../../../InlineStack/InlineStack.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../../../Popover/Popover.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../../../Text/Text.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../../../UnstyledButton/UnstyledButton.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "FiltersBar",
  props: {
    queryValue: {},
    queryPlaceholder: {},
    focused: { type: Boolean },
    filters: {},
    appliedFilters: {},
    disabled: { type: Boolean },
    hideQueryField: { type: Boolean },
    disableFilters: { type: Boolean },
    closeOnChildOverlayClick: { type: Boolean }
  },
  emits: ["clear-all", "add-filter-click"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const popoverActive = ref(false);
    const hasMounted = ref(false);
    const togglePopoverActive = () => {
      popoverActive.value = !popoverActive.value;
    };
    const handleAddFilterClick = () => {
      emits("add-filter-click");
      togglePopoverActive();
    };
    const activatorButtonDisabled = computed(() => {
      return props.disabled || unsectionedFilters.value.length === 0 && sectionedFilters.value.length === 0 || props.disableFilters;
    });
    const appliedFilterKeys = computed(() => {
      var _a;
      return ((_a = props.appliedFilters) == null ? void 0 : _a.map((filter) => filter.name)) || [];
    });
    const pinnedFiltersFromPropsAndAppliedFilters = computed(() => {
      return props.filters.filter((filter) => {
        const isPinnedOrApplied = Boolean(filter.pinned || appliedFilterKeys.value.includes(filter.name));
        return isPinnedOrApplied;
      });
    });
    const localPinnedFilters = ref(
      pinnedFiltersFromPropsAndAppliedFilters.value.map((filter) => filter.name)
    );
    const pinnedFilters = computed(() => {
      return localPinnedFilters.value.map((key) => props.filters.find((filter) => filter.name === key)).reduce(
        (acc, filter) => filter ? [...acc, filter] : acc,
        []
      );
    });
    const onFilterClick = (filter) => {
      setTimeout(() => {
        var _a;
        localPinnedFilters.value = [
          .../* @__PURE__ */ new Set([...localPinnedFilters.value, filter.name])
        ];
        (_a = filter.onAction) == null ? void 0 : _a.call(filter);
        togglePopoverActive();
      }, 0);
    };
    const filterToActionItem = (filter) => {
      const serialFilters = {
        disabled: filter.disabled,
        suffix: filter.suffix
      };
      return {
        ...serialFilters,
        content: filter.label,
        onAction: () => {
          onFilterClick(filter);
        }
      };
    };
    const unpinnedFilters = computed(() => props.filters.filter(
      (filter) => !pinnedFilters.value.some(({ name }) => name === filter.name)
    ));
    const unsectionedFilters = computed(() => unpinnedFilters.value.filter((filter) => !filter.section && !filter.hidden).map(filterToActionItem));
    const sectionedFilters = computed(() => unpinnedFilters.value.filter((filter) => filter.section).reduce(
      (acc, filter) => {
        const filterActionItem = filterToActionItem(filter);
        const sectionIndex = acc.findIndex(
          (section) => section.title === filter.section
        );
        if (sectionIndex === -1) {
          acc.push({
            title: filter.section,
            items: [filterActionItem]
          });
        } else {
          acc[sectionIndex].items.push(filterActionItem);
        }
        return acc;
      },
      []
    ));
    const hasOneOrMorePinnedFilters = computed(() => pinnedFilters.value.length >= 1);
    const shouldShowAddButton = computed(() => props.filters.some((filter) => !filter.pinned) || props.filters.length !== localPinnedFilters.value.length);
    const filterWrapperClass = computed(() => classNames(
      styles.FiltersWrapper,
      shouldShowAddButton.value && hasOneOrMorePinnedFilters.value && styles.FilterWrapperWithAddButton
    ));
    const addButtonClassName = computed(() => classNames(
      styles.AddFilterActivator,
      hasOneOrMorePinnedFilters.value && styles.AddFilterActivatorMultiple
    ));
    const clearAllClassName = computed(() => classNames(
      styles.ClearAll,
      hasOneOrMorePinnedFilters.value && shouldShowAddButton.value && styles.MultiplePinnedFilterClearAll
    ));
    const pinnedFromPropsKeys = computed(() => props.filters.filter(({ pinned }) => pinned).map(({ name }) => name));
    const appliedFilter = (filterKey) => {
      var _a;
      return (_a = props.appliedFilters) == null ? void 0 : _a.find((filter) => filter.name === filterKey);
    };
    const handleFilterPillRemove = (filterKey) => {
      const appliedFiltered = appliedFilter(filterKey);
      localPinnedFilters.value = localPinnedFilters.value.filter((name) => name !== filterKey);
      localPinnedFilters.value.filter((name) => {
        const isMatchedFilters = name === filterKey;
        const isPinnedFilterFromProps = pinnedFromPropsKeys.value.includes(name);
        return !isMatchedFilters || isPinnedFilterFromProps;
      }), appliedFiltered == null ? void 0 : appliedFiltered.onRemove(filterKey);
    };
    const handleClearAllFilters = () => {
      localPinnedFilters.value = [];
      emits("clear-all");
    };
    onMounted(() => {
      hasMounted.value = true;
    });
    watch(
      () => props.filters.length,
      () => {
        localPinnedFilters.value = pinnedFiltersFromPropsAndAppliedFilters.value.map((filter) => filter.name);
      }
    );
    return (_ctx, _cache) => {
      var _a;
      return openBlock(), createElementBlock("div", {
        "aria-live": "polite",
        class: normalizeClass(filterWrapperClass.value)
      }, [
        createElementVNode("div", {
          class: normalizeClass(unref(classNames)(unref(styles).FiltersInner))
        }, [
          createElementVNode("div", {
            class: normalizeClass(unref(classNames)(unref(styles).FiltersStickyArea))
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(pinnedFilters.value, (filter) => {
              var _a2, _b, _c;
              return openBlock(), createBlock(_sfc_main$1, mergeProps({
                key: filter.key,
                ref_for: true
              }, filter, {
                "initial-active": hasMounted.value && !filter.pinned && !appliedFilter(filter.name),
                label: ((_a2 = appliedFilter(filter.name)) == null ? void 0 : _a2.label) || filter.label,
                "filter-key": filter.name,
                disabled: filter.disabled || _ctx.disableFilters,
                "close-on-child-overlay-click": _ctx.closeOnChildOverlayClick,
                selected: (_b = appliedFilterKeys.value) == null ? void 0 : _b.includes(filter.name),
                "unsaved-changes": (_c = appliedFilter(filter.name)) == null ? void 0 : _c.unsavedChanges,
                onRemove: ($event) => handleFilterPillRemove(filter.name)
              }), null, 16, ["initial-active", "label", "filter-key", "disabled", "close-on-child-overlay-click", "selected", "unsaved-changes", "onRemove"]);
            }), 128)),
            shouldShowAddButton.value ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(addButtonClassName.value)
            }, [
              createVNode(unref(_sfc_main$2), {
                active: popoverActive.value && !_ctx.disabled,
                onClose: togglePopoverActive
              }, {
                activator: withCtx(() => [
                  createElementVNode("div", null, [
                    createVNode(unref(_sfc_main$3), {
                      type: "button",
                      class: normalizeClass(unref(styles).AddFilter),
                      "aria-label": unref(i18n).translate("Polaris.Filters.addFilter"),
                      disabled: activatorButtonDisabled.value,
                      "aria-disabled": activatorButtonDisabled.value,
                      onClick: handleAddFilterClick
                    }, {
                      default: withCtx(() => [
                        createVNode(unref(_sfc_main$4), {
                          variant: "bodySm",
                          as: "span",
                          tone: _ctx.disabled ? "disabled" : "base"
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Filters.addFilter")) + toDisplayString(" "), 1)
                          ]),
                          _: 1
                        }, 8, ["tone"]),
                        createVNode(unref(PlusIcon))
                      ]),
                      _: 1
                    }, 8, ["class", "aria-label", "disabled", "aria-disabled"])
                  ])
                ]),
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$5), {
                    "action-role": "menuitem",
                    items: unsectionedFilters.value,
                    sections: sectionedFilters.value
                  }, null, 8, ["items", "sections"])
                ]),
                _: 1
              }, 8, ["active"])
            ], 2)) : createCommentVNode("", true),
            ((_a = _ctx.appliedFilters) == null ? void 0 : _a.length) ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass(clearAllClassName.value)
            }, [
              createVNode(unref(_sfc_main$6), {
                size: "micro",
                variant: "monochromePlain",
                onClick: handleClearAllFilters
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Filters.clearFilters")), 1)
                ]),
                _: 1
              })
            ], 2)) : createCommentVNode("", true)
          ], 2)
        ], 2),
        _ctx.hideQueryField ? (openBlock(), createBlock(unref(_sfc_main$7), {
          key: 0,
          "padding-inline-end": "300",
          "padding-block-end": "200",
          "padding-block-start": "200"
        }, {
          default: withCtx(() => [
            createVNode(unref(_sfc_main$8), {
              align: "start",
              "block-align": "center",
              gap: { xs: "400", md: "300" }
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            })
          ]),
          _: 3
        })) : createCommentVNode("", true)
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=FiltersBar.vue_vue_type_script_setup_true_lang.js.map
