import { defineComponent, useSlots, computed, openBlock, createElementBlock, normalizeClass, normalizeStyle, unref, createVNode, withCtx, createElementVNode, renderSlot, createCommentVNode, createBlock } from "vue";
import { c as classNames } from "../../utilities/css.js";
import { _ as _sfc_main$1 } from "../Box/Box.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "./components/SearchField/SearchField.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "./components/FiltersBar/FiltersBar.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../InlineStack/InlineStack.vue_vue_type_script_setup_true_lang.js";
const Container = "Polaris-Filters__Container";
const SearchField = "Polaris-Filters__SearchField";
const FiltersWrapper = "Polaris-Filters__FiltersWrapper";
const hideQueryField = "Polaris-Filters--hideQueryField";
const FiltersInner = "Polaris-Filters__FiltersInner";
const AddFilter = "Polaris-Filters__AddFilter";
const FiltersWrapperWithAddButton = "Polaris-Filters__FiltersWrapperWithAddButton";
const AddFilterActivatorMultiple = "Polaris-Filters__AddFilterActivatorMultiple";
const FiltersStickyArea = "Polaris-Filters__FiltersStickyArea";
const ClearAll = "Polaris-Filters__ClearAll";
const MultiplePinnedFilterClearAll = "Polaris-Filters__MultiplePinnedFilterClearAll";
const styles = {
  Container,
  SearchField,
  FiltersWrapper,
  hideQueryField,
  FiltersInner,
  AddFilter,
  FiltersWrapperWithAddButton,
  AddFilterActivatorMultiple,
  FiltersStickyArea,
  ClearAll,
  MultiplePinnedFilterClearAll
};
const TRANSITION_DURATION = "var(--p-motion-duration-150)";
const TRANSITION_MARGIN = "-36px";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Filters",
  props: {
    queryValue: {},
    queryPlaceholder: {},
    focused: { type: Boolean },
    filters: {},
    appliedFilters: {},
    disabled: { type: Boolean },
    hideFilters: { type: Boolean },
    hideQueryField: { type: Boolean },
    disableQueryField: { type: Boolean },
    disableFilters: { type: Boolean },
    borderlessQueryField: { type: Boolean },
    loading: { type: Boolean },
    mountedState: {},
    closeOnChildOverlayClick: { type: Boolean },
    selectedViewName: {}
  },
  emits: ["query-change", "query-clear", "clear-all", "query-blur", "query-focus", "add-filter-click"],
  setup(__props, { emit: __emit }) {
    const defaultStyle = {
      transition: `opacity ${TRANSITION_DURATION} var(--p-motion-ease)`,
      opacity: 0
    };
    const transitionStyles = {
      entering: { opacity: 1 },
      entered: { opacity: 1 },
      exiting: { opacity: 0 },
      exited: { opacity: 0 },
      unmounted: { opacity: 0 }
    };
    const defaultFilterStyles = {
      transition: `opacity ${TRANSITION_DURATION} var(--p-motion-ease), margin ${TRANSITION_DURATION} var(--p-motion-ease)`,
      opacity: 0,
      marginTop: TRANSITION_MARGIN
    };
    const transitionFilterStyles = {
      entering: {
        opacity: 1,
        marginTop: 0
      },
      entered: {
        opacity: 1,
        marginTop: 0
      },
      exiting: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      },
      exited: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      },
      unmounted: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      }
    };
    const props = __props;
    const emits = __emit;
    useSlots();
    const modelValue = computed({
      get: () => props.queryValue || "",
      set: (value) => emits("query-change", value)
    });
    const filtersClassName = computed(() => classNames(
      styles.Filters,
      props.hideQueryField && styles.hideQueryField
    ));
    const searchFieldStyle = computed(() => {
      if (props.mountedState === "entered") {
        return void 0;
      }
      return props.mountedState ? {
        ...defaultStyle,
        ...transitionStyles[props.mountedState]
      } : void 0;
    });
    const mountedStateStyles = computed(() => {
      return props.mountedState && !props.hideQueryField ? {
        ...defaultFilterStyles,
        ...transitionFilterStyles[props.mountedState]
      } : void 0;
    });
    const hideFilterBar = computed(() => props.hideFilters || props.filters.length === 0);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref: "containerRef",
        class: normalizeClass(filtersClassName.value),
        style: normalizeStyle(searchFieldStyle.value)
      }, [
        !_ctx.hideQueryField ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(styles).Container)
        }, [
          createVNode(unref(_sfc_main$1), { padding: "200" }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$2), {
                align: "start",
                "block-align": "center",
                gap: { xs: "400", md: "300" }
              }, {
                default: withCtx(() => [
                  createElementVNode("div", {
                    class: normalizeClass(unref(styles).SearchField)
                  }, [
                    createVNode(unref(_sfc_main$3), {
                      modelValue: modelValue.value,
                      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => modelValue.value = $event),
                      placeholder: _ctx.queryPlaceholder,
                      focused: _ctx.focused,
                      loading: _ctx.loading,
                      disabled: _ctx.disabled || _ctx.disableQueryField,
                      "borderless-query-field": _ctx.borderlessQueryField,
                      "selected-view-name": _ctx.selectedViewName,
                      onClear: _cache[1] || (_cache[1] = ($event) => emits("query-clear")),
                      onFocus: _cache[2] || (_cache[2] = ($event) => emits("query-focus")),
                      onBlur: _cache[3] || (_cache[3] = ($event) => emits("query-blur"))
                    }, null, 8, ["modelValue", "placeholder", "focused", "loading", "disabled", "borderless-query-field", "selected-view-name"])
                  ], 2),
                  renderSlot(_ctx.$slots, "default")
                ]),
                _: 3
              })
            ]),
            _: 3
          })
        ], 2)) : createCommentVNode("", true),
        !hideFilterBar.value ? (openBlock(), createBlock(unref(_sfc_main$4), {
          key: 1,
          "applied-filters": _ctx.appliedFilters,
          filters: _ctx.filters,
          disabled: _ctx.disabled,
          "hide-query-field": _ctx.hideQueryField,
          "disable-filters": _ctx.disableFilters,
          "close-on-child-overlay-click": _ctx.closeOnChildOverlayClick,
          style: normalizeStyle(mountedStateStyles.value),
          onAddFilterClick: _cache[4] || (_cache[4] = ($event) => emits("add-filter-click")),
          onClearAll: _cache[5] || (_cache[5] = ($event) => emits("clear-all"))
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["applied-filters", "filters", "disabled", "hide-query-field", "disable-filters", "close-on-child-overlay-click", "style"])) : createCommentVNode("", true)
      ], 6);
    };
  }
});
export {
  _sfc_main as _,
  styles as s
};
//# sourceMappingURL=Filters.vue_vue_type_script_setup_true_lang.js.map
