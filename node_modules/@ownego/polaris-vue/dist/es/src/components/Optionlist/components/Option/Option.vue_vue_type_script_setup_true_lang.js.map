{"version":3,"file":"Option.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../../../src/components/Optionlist/components/Option/Option.vue"],"sourcesContent":["<template lang=\"pug\">\nli(\n  :key=\"id\",\n  :class=\"styles.Option\",\n  :tabIndex=\"-1\"\n  @pointer-enter=\"handlePointerEnter\",\n)\n  ScrollTo(v-if=\"active\")\n  label(\n    v-if=\"allowMultiple\"\n    :htmlFor=\"id\"\n    :class=\"multiSelectClassName\",\n  )\n    div(:class=\"styles.Checkbox\")\n      PolarisCheckbox(\n        label=\"\",\n        :ariaDescribedBy=\"`${id}-label`\",\n        :id=\"id\",\n        :checked=\"select\",\n        :disabled=\"disabled\",\n        :model-value=\"select\",\n        @change=\"handleClick\"\n      )\n    div(\n      v-if=\"media\",\n      :class=\"styles.Media\",\n    )\n      component(:is=\"media\")\n    span(:id=\"`${id}-label`\")\n      slot(name=\"label\")\n  button(\n    v-else,\n    :id=\"id\",\n    type=\"button\",\n    :class=\"singleSelectClassName\",\n    :disabled=\"disabled\",\n    :aria-pressed=\"active || select\",\n    @click=\"handleClick\",\n    @focus=\"handleFocus\",\n    @blur=\"toggleFocused\",\n  )\n    InlineStack(:wrap=\"false\", :block-align=\"verticalAlignToBlockAlign(verticalAlign)\")\n      div(\n        v-if=\"media\",\n        :class=\"styles.Media\",\n      )\n        component(:is=\"media\")\n      span(:id=\"`${id}-label`\")\n        slot(name=\"label\")\n    span(\n      v-if=\"select || active\",\n      :class=\"styles.Icon\",\n    )\n      Icon(:source=\"CheckIcon\")\n</template>\n\n<script setup lang=\"ts\">\nimport { type VNode, computed } from 'vue';\nimport { classNames, variationName } from '@/utilities/css';\nimport { type VueNode } from '@/utilities/types';\nimport { useToggle } from '@/use/useToggle';\nimport {\n  ScrollTo,\n  InlineStack,\n  Icon,\n  Checkbox as PolarisCheckbox,\n} from '@/components';\nimport type { InlineStackProps } from '@/components/InlineStack/types';\nimport CheckIcon from '@icons/CheckIcon.svg';\nimport styles from '@polaris/components/OptionList/components/Option/Option.module.css';\n\ntype Alignment = 'top' | 'center' | 'bottom';\n\nexport interface OptionProps {\n  id: string;\n  value: string;\n  section: number;\n  index: number;\n  media?: VueNode;\n  disabled?: boolean;\n  active?: boolean;\n  select?: boolean;\n  allowMultiple?: boolean;\n  verticalAlign?: Alignment;\n}\n\ntype OptionEvents = {\n  'click': [section: number, option: number];\n  /** Callback when pointer enters the option */\n  'pointer-enter': [section: number, option: number];\n  /** Callback when option is focused */\n  'focus': [section: number, option: number];\n};\n\nconst props = defineProps<OptionProps>();\nconst emits = defineEmits<OptionEvents>();\nconst slots = defineSlots<{\n  label?: (_?: VueNode) => VNode[];\n}>();\n\nconst {\n  value: focused,\n  toggle: toggleFocused,\n} = useToggle(false);\n\nconst singleSelectClassName = computed(() => {\n  return classNames(\n    styles.SingleSelectOption,\n    focused.value && styles.focused,\n    props.disabled && styles.disabled,\n    props.select && styles.select,\n    props.active && styles.active,\n    props.verticalAlign && styles[variationName('verticalAlign', props.verticalAlign)],\n  );\n});\nconst multiSelectClassName = computed(() => {\n  return classNames(\n    styles.Label,\n    props.disabled && styles.disabled,\n    props.active && styles.active,\n    props.select && styles.select,\n    props.verticalAlign && styles[variationName('verticalAlign', props.verticalAlign)],\n    props.allowMultiple && styles.CheckboxLabel,\n    props.allowMultiple && styles.MultiSelectOption,\n  );\n});\n\nconst handleClick = () => {\n  if (props.disabled) return;\n  emits('click', props.section, props.index);\n};\n\nconst handlePointerEnter = () => {\n  if (props.disabled) return;\n  emits('pointer-enter', props.section, props.index);\n};\n\nconst handleFocus = () => {\n  toggleFocused();\n\n  emits('focus', props.section, props.index);\n}\n\nfunction verticalAlignToBlockAlign(\n  verticalAlign?: Alignment,\n): InlineStackProps['blockAlign'] {\n  switch (verticalAlign) {\n    case 'top':\n      return 'start';\n    case 'center':\n      return 'center';\n    case 'bottom':\n      return 'end';\n    default:\n      return 'start';\n  }\n}\n</script>\n"],"names":["_useSlots","focused"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA,UAAM,QAAQ;AACd,UAAM,QAAQ;AACAA;AAIR,UAAA;AAAA,MACJ,OAAOC;AAAA,MACP,QAAQ;AAAA,IAAA,IACN,UAAU,KAAK;AAEb,UAAA,wBAAwB,SAAS,MAAM;AACpC,aAAA;AAAA,QACL,OAAO;AAAA,QACPA,SAAQ,SAAS,OAAO;AAAA,QACxB,MAAM,YAAY,OAAO;AAAA,QACzB,MAAM,UAAU,OAAO;AAAA,QACvB,MAAM,UAAU,OAAO;AAAA,QACvB,MAAM,iBAAiB,OAAO,cAAc,iBAAiB,MAAM,aAAa,CAAC;AAAA,MAAA;AAAA,IACnF,CACD;AACK,UAAA,uBAAuB,SAAS,MAAM;AACnC,aAAA;AAAA,QACL,OAAO;AAAA,QACP,MAAM,YAAY,OAAO;AAAA,QACzB,MAAM,UAAU,OAAO;AAAA,QACvB,MAAM,UAAU,OAAO;AAAA,QACvB,MAAM,iBAAiB,OAAO,cAAc,iBAAiB,MAAM,aAAa,CAAC;AAAA,QACjF,MAAM,iBAAiB,OAAO;AAAA,QAC9B,MAAM,iBAAiB,OAAO;AAAA,MAAA;AAAA,IAChC,CACD;AAED,UAAM,cAAc,MAAM;AACxB,UAAI,MAAM,SAAU;AACpB,YAAM,SAAS,MAAM,SAAS,MAAM,KAAK;AAAA,IAAA;AAG3C,UAAM,qBAAqB,MAAM;AAC/B,UAAI,MAAM,SAAU;AACpB,YAAM,iBAAiB,MAAM,SAAS,MAAM,KAAK;AAAA,IAAA;AAGnD,UAAM,cAAc,MAAM;AACV;AAEd,YAAM,SAAS,MAAM,SAAS,MAAM,KAAK;AAAA,IAAA;AAG3C,aAAS,0BACP,eACgC;AAChC,cAAQ,eAAe;AAAA,QACrB,KAAK;AACI,iBAAA;AAAA,QACT,KAAK;AACI,iBAAA;AAAA,QACT,KAAK;AACI,iBAAA;AAAA,QACT;AACS,iBAAA;AAAA,MACX;AAAA,IACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}