{"version":3,"file":"OptionList.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/Optionlist/OptionList.vue"],"sourcesContent":["<template lang=\"pug\">\nBox(\n  as=\"ul\",\n  :role=\"role\",\n  padding=\"150\",\n)\n  template(v-if=\"optionsExist\")\n    template(\n      v-for=\"{title, options}, sectionIndex in normalizedOptions\",\n      :key=\"title || `noTitle-${sectionIndex}`\",\n    )\n      Box(\n        as=\"li\",\n        :padding-block-start=\"sectionIndex === 0 ? (title ? '100' : '0') : (title ? '050' : '0')\",\n      )\n        BlockStack(\n          :gap=\"sectionIndex === 0 && sections ? undefined : '0'\",\n        )\n          Box(\n            v-if=\"title\",\n            :padding-block-start=\"sectionIndex === 0 ? '050' : '300'\",\n            padding-inline-start=\"150\",\n            padding-block-end=\"100\",\n            padding-inline-end=\"150\",\n            border-secondary=\"border-secondary\",\n          )\n            Text(\n              :as=\"sectionIndex === 0 ? 'h2' : 'h3'\",\n              variant=\"headingSm\",\n            ) {{ title }}\n          Box(\n            as=\"ul\",\n            :id=\"`${id}-${sectionIndex}`\",\n            :role=\"role\"\n          )\n            template(v-if=\"options\")\n              OptionItem(\n                v-for=\"option, optionIndex in options\",\n                v-bind=\"option\",\n                :key=\"option.id || `${uniqueId}-${sectionIndex}-${optionIndex}`\",\n                :id=\"option.id || `${uniqueId}-${sectionIndex}-${optionIndex}`\",\n                :section=\"sectionIndex\",\n                :index=\"optionIndex\",\n                :select=\"selected.includes(option.value)\",\n                :allow-multiple=\"allowMultiple\",\n                :vertical-align=\"verticalAlign\",\n                @click=\"handleClick\",\n                @pointer-enter=\"handlePointerEnter\",\n                @focus=\"handleFocus\",\n              )\n                template(#label)\n                  slot(\n                    v-if=\"slots[`option-label-${option.id}`]\"\n                    :name=\"`option-label-${option.id}`\"\n                  )\n                  template(v-else) {{ option.label }}\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch, type VNode } from 'vue';\nimport {\n  Box,\n  Text,\n  BlockStack,\n} from '@/components';\nimport type { BoxProps } from '@/components/Box/types';\nimport { Option as OptionItem } from './components/Option';\nimport type {\n  OptionDescriptor,\n  SectionDescriptor,\n  VueNode,\n} from '@/utilities/types';\nimport useId from '@/use/useId';\n\ntype Alignment = 'top' | 'center' | 'bottom';\n\ninterface OptionListProps {\n  /** A unique identifier for the option list */\n  id?: string;\n  /** List title */\n  title?: string;\n  /** Collection of options to be listed */\n  options?: OptionDescriptor[];\n  /** Defines a specific role attribute for the list itself */\n  role?: 'listbox' | 'combobox' | BoxProps['role'];\n  /** Defines a specific role attribute for each option in the list */\n  optionRole?: string;\n  /** Sections containing a header and related options */\n  sections?: SectionDescriptor[];\n  /** The selected options */\n  selected: string[];\n  /** Allow more than one option to be selected */\n  allowMultiple?: boolean;\n  /** Vertically align child content to the center, top, or bottom.  */\n  verticalAlign?: Alignment;\n}\n\ntype OptionListEvents = {\n  /** Callback when an option is changed */\n  'change': [selected: string[]];\n  /** Callback when pointer enters the option */\n  'pointer-enter-option': [selected: string];\n  /** Callback when option is focused */\n  'focus-option': [selected: string];\n};\n\nconst props = defineProps<OptionListProps>();\nconst emits = defineEmits<OptionListEvents>();\nconst slots = defineSlots<{\n  [key: string]: (_?: VueNode) => VNode[];\n}>();\n\nconst uniqueId = useId();\n\nconst normalizedOptions = ref<SectionDescriptor[]>(createNormalizedOptions(props.options, props.sections, props.title));\n\nconst id = computed(() => props.id || String(uniqueId));\nconst optionsExist = computed(() => normalizedOptions.value.length > 0);\n\nconst handleClick = (sectionIndex: number, optionIndex: number) => {\n  const selectedValue =\n    normalizedOptions.value[sectionIndex].options[optionIndex].value;\n  const foundIndex = props.selected?.indexOf(selectedValue);\n  if (props.allowMultiple) {\n    const newSelection =\n      foundIndex === -1\n        ? [selectedValue, ...(props.selected || [])]\n        : [\n            ...(props.selected?.slice(0, foundIndex) || []),\n            ...props.selected?.slice((foundIndex || 0) + 1, props.selected?.length) || [],\n          ];\n    emits('change', newSelection);\n    return;\n  }\n\n  emits('change', [selectedValue]);\n};\n\nconst handlePointerEnter = (sectionIndex: number, optionIndex: number) => {\n  const selectedValue =\n    normalizedOptions.value[sectionIndex].options[optionIndex].value;\n\n  emits('pointer-enter-option', selectedValue);\n};\n\nconst handleFocus = (sectionIndex: number, optionIndex: number) => {\n  const selectedValue =\n    normalizedOptions.value[sectionIndex].options[optionIndex].value;\n\n  emits('focus-option', selectedValue);\n};\n\nfunction createNormalizedOptions(\n  options?: OptionDescriptor[],\n  sections?: SectionDescriptor[],\n  title?: string,\n): SectionDescriptor[] {\n  if (!options || !options.length) {\n    const section = title ? [{options: [], title}] : [];\n    return (!sections || !sections.length) ? [] : [...section, ...sections];\n  }\n  if (!sections || !sections.length) {\n    return [\n      {\n        title,\n        options,\n      },\n    ];\n  }\n\n  return [\n    {\n      title,\n      options,\n    },\n    ...sections,\n  ];\n}\n\nwatch(\n  () => [props.options, props.sections, props.title],\n  (newVal, oldVal) => {\n    if (newVal !== oldVal) {\n      normalizedOptions.value = createNormalizedOptions(props.options || [], props.sections || [], props.title);\n    }\n  },\n);\n</script>\n"],"names":["_useSlots"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0GA,UAAM,QAAQ;AACd,UAAM,QAAQ;AACd,UAAM,QAAQA;AAId,UAAM,WAAW;AAEX,UAAA,oBAAoB,IAAyB,wBAAwB,MAAM,SAAS,MAAM,UAAU,MAAM,KAAK,CAAC;AAEtH,UAAM,KAAK,SAAS,MAAM,MAAM,MAAM,OAAO,QAAQ,CAAC;AACtD,UAAM,eAAe,SAAS,MAAM,kBAAkB,MAAM,SAAS,CAAC;AAEhE,UAAA,cAAc,CAAC,cAAsB,gBAAwB;;AACjE,YAAM,gBACJ,kBAAkB,MAAM,YAAY,EAAE,QAAQ,WAAW,EAAE;AAC7D,YAAM,cAAa,WAAM,aAAN,mBAAgB,QAAQ;AAC3C,UAAI,MAAM,eAAe;AACjB,cAAA,eACJ,eAAe,KACX,CAAC,eAAe,GAAI,MAAM,YAAY,CAAA,CAAG,IACzC;AAAA,UACE,KAAI,WAAM,aAAN,mBAAgB,MAAM,GAAG,gBAAe,CAAC;AAAA,UAC7C,KAAG,WAAM,aAAN,mBAAgB,OAAO,cAAc,KAAK,IAAG,WAAM,aAAN,mBAAgB,YAAW,CAAC;AAAA,QAAA;AAEpF,cAAM,UAAU,YAAY;AAC5B;AAAA,MACF;AAEM,YAAA,UAAU,CAAC,aAAa,CAAC;AAAA,IAAA;AAG3B,UAAA,qBAAqB,CAAC,cAAsB,gBAAwB;AACxE,YAAM,gBACJ,kBAAkB,MAAM,YAAY,EAAE,QAAQ,WAAW,EAAE;AAE7D,YAAM,wBAAwB,aAAa;AAAA,IAAA;AAGvC,UAAA,cAAc,CAAC,cAAsB,gBAAwB;AACjE,YAAM,gBACJ,kBAAkB,MAAM,YAAY,EAAE,QAAQ,WAAW,EAAE;AAE7D,YAAM,gBAAgB,aAAa;AAAA,IAAA;AAG5B,aAAA,wBACP,SACA,UACA,OACqB;AACrB,UAAI,CAAC,WAAW,CAAC,QAAQ,QAAQ;AACzB,cAAA,UAAU,QAAQ,CAAC,EAAC,SAAS,CAAA,GAAI,MAAA,CAAM,IAAI;AACzC,eAAA,CAAC,YAAY,CAAC,SAAS,SAAU,CAAC,IAAI,CAAC,GAAG,SAAS,GAAG,QAAQ;AAAA,MACxE;AACA,UAAI,CAAC,YAAY,CAAC,SAAS,QAAQ;AAC1B,eAAA;AAAA,UACL;AAAA,YACE;AAAA,YACA;AAAA,UACF;AAAA,QAAA;AAAA,MAEJ;AAEO,aAAA;AAAA,QACL;AAAA,UACE;AAAA,UACA;AAAA,QACF;AAAA,QACA,GAAG;AAAA,MAAA;AAAA,IAEP;AAEA;AAAA,MACE,MAAM,CAAC,MAAM,SAAS,MAAM,UAAU,MAAM,KAAK;AAAA,MACjD,CAAC,QAAQ,WAAW;AAClB,YAAI,WAAW,QAAQ;AACH,4BAAA,QAAQ,wBAAwB,MAAM,WAAW,CAAA,GAAI,MAAM,YAAY,CAAA,GAAI,MAAM,KAAK;AAAA,QAC1G;AAAA,MACF;AAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}