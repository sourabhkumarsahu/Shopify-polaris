import { defineComponent, useSlots, computed, openBlock, createElementBlock, normalizeClass, unref, createBlock, createCommentVNode, createElementVNode, createVNode, resolveDynamicComponent, renderSlot, withCtx } from "vue";
import { c as classNames, v as variationName } from "../../../../utilities/css.js";
import { u as useToggle } from "../../../../use/useToggle.js";
import { C as CheckIcon } from "../../../../../vendor.js";
import { _ as _sfc_main$2 } from "../../../Checkbox/Checkbox.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../../../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../../../InlineStack/InlineStack.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../../Scrollable/components/ScrollTo/ScrollTo.vue_vue_type_script_setup_true_lang.js";
const Option = "Polaris-OptionList-Option";
const SingleSelectOption = "Polaris-OptionList-Option__SingleSelectOption";
const focused = "Polaris-OptionList-Option--focused";
const active = "Polaris-OptionList-Option--active";
const disabled = "Polaris-OptionList-Option--disabled";
const select = "Polaris-OptionList-Option--select";
const Media = "Polaris-OptionList-Option__Media";
const Label = "Polaris-OptionList-Option__Label";
const MultiSelectOption = "Polaris-OptionList-Option__MultiSelectOption";
const CheckboxLabel = "Polaris-OptionList-Option__CheckboxLabel";
const verticalAlignTop = "Polaris-OptionList-Option--verticalAlignTop";
const verticalAlignCenter = "Polaris-OptionList-Option--verticalAlignCenter";
const verticalAlignBottom = "Polaris-OptionList-Option--verticalAlignBottom";
const Icon = "Polaris-OptionList-Option__Icon";
const Checkbox = "Polaris-OptionList-Option__Checkbox";
const styles = {
  Option,
  SingleSelectOption,
  focused,
  active,
  disabled,
  select,
  Media,
  Label,
  MultiSelectOption,
  CheckboxLabel,
  verticalAlignTop,
  verticalAlignCenter,
  verticalAlignBottom,
  Icon,
  Checkbox
};
const _hoisted_1 = ["htmlFor"];
const _hoisted_2 = ["id"];
const _hoisted_3 = ["id", "disabled", "aria-pressed"];
const _hoisted_4 = ["id"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Option",
  props: {
    id: {},
    value: {},
    section: {},
    index: {},
    media: { type: [String, Number, Boolean, Function, Object, null] },
    disabled: { type: Boolean },
    active: { type: Boolean },
    select: { type: Boolean },
    allowMultiple: { type: Boolean },
    verticalAlign: {}
  },
  emits: ["click", "pointer-enter", "focus"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    useSlots();
    const {
      value: focused2,
      toggle: toggleFocused
    } = useToggle(false);
    const singleSelectClassName = computed(() => {
      return classNames(
        styles.SingleSelectOption,
        focused2.value && styles.focused,
        props.disabled && styles.disabled,
        props.select && styles.select,
        props.active && styles.active,
        props.verticalAlign && styles[variationName("verticalAlign", props.verticalAlign)]
      );
    });
    const multiSelectClassName = computed(() => {
      return classNames(
        styles.Label,
        props.disabled && styles.disabled,
        props.active && styles.active,
        props.select && styles.select,
        props.verticalAlign && styles[variationName("verticalAlign", props.verticalAlign)],
        props.allowMultiple && styles.CheckboxLabel,
        props.allowMultiple && styles.MultiSelectOption
      );
    });
    const handleClick = () => {
      if (props.disabled) return;
      emits("click", props.section, props.index);
    };
    const handlePointerEnter = () => {
      if (props.disabled) return;
      emits("pointer-enter", props.section, props.index);
    };
    const handleFocus = () => {
      toggleFocused();
      emits("focus", props.section, props.index);
    };
    function verticalAlignToBlockAlign(verticalAlign) {
      switch (verticalAlign) {
        case "top":
          return "start";
        case "center":
          return "center";
        case "bottom":
          return "end";
        default:
          return "start";
      }
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("li", {
        key: _ctx.id,
        class: normalizeClass(unref(styles).Option),
        tabIndex: -1,
        onPointerEnter: handlePointerEnter
      }, [
        _ctx.active ? (openBlock(), createBlock(unref(_sfc_main$1), { key: 0 })) : createCommentVNode("", true),
        _ctx.allowMultiple ? (openBlock(), createElementBlock("label", {
          key: 1,
          htmlFor: _ctx.id,
          class: normalizeClass(multiSelectClassName.value)
        }, [
          createElementVNode("div", {
            class: normalizeClass(unref(styles).Checkbox)
          }, [
            createVNode(unref(_sfc_main$2), {
              label: "",
              ariaDescribedBy: `${_ctx.id}-label`,
              id: _ctx.id,
              checked: _ctx.select,
              disabled: _ctx.disabled,
              "model-value": _ctx.select,
              onChange: handleClick
            }, null, 8, ["ariaDescribedBy", "id", "checked", "disabled", "model-value"])
          ], 2),
          _ctx.media ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(styles).Media)
          }, [
            (openBlock(), createBlock(resolveDynamicComponent(_ctx.media)))
          ], 2)) : createCommentVNode("", true),
          createElementVNode("span", {
            id: `${_ctx.id}-label`
          }, [
            renderSlot(_ctx.$slots, "label")
          ], 8, _hoisted_2)
        ], 10, _hoisted_1)) : (openBlock(), createElementBlock("button", {
          key: 2,
          id: _ctx.id,
          type: "button",
          class: normalizeClass(singleSelectClassName.value),
          disabled: _ctx.disabled,
          "aria-pressed": _ctx.active || _ctx.select,
          onClick: handleClick,
          onFocus: handleFocus,
          onBlur: _cache[0] || (_cache[0] = //@ts-ignore
          (...args) => unref(toggleFocused) && unref(toggleFocused)(...args))
        }, [
          createVNode(unref(_sfc_main$3), {
            wrap: false,
            "block-align": verticalAlignToBlockAlign(_ctx.verticalAlign)
          }, {
            default: withCtx(() => [
              _ctx.media ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(unref(styles).Media)
              }, [
                (openBlock(), createBlock(resolveDynamicComponent(_ctx.media)))
              ], 2)) : createCommentVNode("", true),
              createElementVNode("span", {
                id: `${_ctx.id}-label`
              }, [
                renderSlot(_ctx.$slots, "label")
              ], 8, _hoisted_4)
            ]),
            _: 3
          }, 8, ["block-align"]),
          _ctx.select || _ctx.active ? (openBlock(), createElementBlock("span", {
            key: 0,
            class: normalizeClass(unref(styles).Icon)
          }, [
            createVNode(unref(_sfc_main$4), { source: unref(CheckIcon) }, null, 8, ["source"])
          ], 2)) : createCommentVNode("", true)
        ], 42, _hoisted_3))
      ], 34);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Option.vue_vue_type_script_setup_true_lang.js.map
