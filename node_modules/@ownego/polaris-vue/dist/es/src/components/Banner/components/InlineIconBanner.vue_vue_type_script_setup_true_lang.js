import { defineComponent, ref, onMounted, watch, onBeforeUnmount, openBlock, createBlock, unref, withCtx, createVNode, createElementBlock, resolveDynamicComponent, createCommentVNode, renderSlot, createElementVNode, normalizeClass } from "vue";
import { s as styles } from "../Banner.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../../BlockStack/BlockStack.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../Box/Box.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../../InlineStack/InlineStack.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "InlineIconBanner",
  props: {
    backgroundColor: {},
    textColor: {},
    bannerIcon: { type: [String, Number, Boolean, Function, Object, null] },
    actionButtons: { type: [String, Number, Boolean, Function, Object, null] },
    dismissButton: { type: [String, Number, Boolean, Function, Object, null] }
  },
  setup(__props) {
    const blockAlign = ref("center");
    const contentNode = ref(null);
    const iconNode = ref(null);
    const dismissIconNode = ref(null);
    const handleResize = () => {
      var _a, _b, _c;
      const contentHeight = (_a = contentNode.value) == null ? void 0 : _a.offsetHeight;
      const iconBoxHeight = ((_b = iconNode.value) == null ? void 0 : _b.offsetHeight) || ((_c = dismissIconNode.value) == null ? void 0 : _c.offsetHeight);
      if (!contentHeight || !iconBoxHeight) return;
      contentHeight > iconBoxHeight ? blockAlign.value = "start" : blockAlign.value = "center";
    };
    onMounted(() => {
      handleResize();
      watch(handleResize, () => handleResize());
      window.addEventListener("resize", handleResize);
    });
    onBeforeUnmount(() => {
      window.removeEventListener("resize", handleResize);
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        width: "100%",
        borderRadius: "300",
        padding: "300"
      }, {
        default: withCtx(() => [
          createVNode(unref(_sfc_main$2), {
            align: "space-between",
            blockAlign: blockAlign.value,
            wrap: false
          }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$1), { width: "100%" }, {
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$2), {
                    gap: "200",
                    wrap: false,
                    blockAlign: blockAlign.value
                  }, {
                    default: withCtx(() => [
                      _ctx.bannerIcon ? (openBlock(), createElementBlock("div", {
                        key: 0,
                        ref_key: "iconNode",
                        ref: iconNode
                      }, [
                        createVNode(unref(_sfc_main$1), {
                          borderRadius: "200",
                          background: _ctx.backgroundColor,
                          padding: "100"
                        }, {
                          default: withCtx(() => [
                            (openBlock(), createBlock(resolveDynamicComponent(_ctx.bannerIcon)))
                          ]),
                          _: 1
                        }, 8, ["background"])
                      ], 512)) : createCommentVNode("", true),
                      createVNode(unref(_sfc_main$1), {
                        ref_key: "contentNode",
                        ref: contentNode,
                        width: "100%"
                      }, {
                        default: withCtx(() => [
                          createVNode(unref(_sfc_main$3), { gap: "200" }, {
                            default: withCtx(() => [
                              renderSlot(_ctx.$slots, "default"),
                              _ctx.actionButtons ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.actionButtons), { key: 0 })) : createCommentVNode("", true)
                            ]),
                            _: 3
                          })
                        ]),
                        _: 3
                      }, 512)
                    ]),
                    _: 3
                  }, 8, ["blockAlign"])
                ]),
                _: 3
              }),
              createElementVNode("div", {
                ref_key: "dismissIconNode",
                ref: dismissIconNode,
                class: normalizeClass(unref(styles).DismissIcon)
              }, [
                _ctx.dismissButton ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.dismissButton), { key: 0 })) : createCommentVNode("", true)
              ], 2)
            ]),
            _: 3
          }, 8, ["blockAlign"])
        ]),
        _: 3
      });
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=InlineIconBanner.vue_vue_type_script_setup_true_lang.js.map
