{"version":3,"file":"types.js","sources":["../../../../../src/components/Banner/types.ts"],"sourcesContent":["import type {\n  ColorBackgroundAlias,\n  ColorIconAlias,\n  ColorTextAlias,\n} from '@shopify/polaris-tokens';\nimport type {\n  Action,\n  DisableableAction,\n  LoadableAction,\n  IconSource,\n} from '@/utilities/types';\nimport AlertDiamondIcon from '@icons/AlertDiamondIcon.svg';\nimport InfoIcon from '@icons/InfoIcon.svg';\nimport AlertTriangleIcon from '@icons/AlertTriangleIcon.svg';\nimport CheckIcon from '@icons/CheckIcon.svg';\nimport { BoxProps } from '../Box/types';\n\ninterface BannerColorAliases {\n  background: ColorBackgroundAlias;\n  text: ColorTextAlias;\n  icon: ColorIconAlias | ColorTextAlias;\n}\n\ninterface BannerAttributes {\n  withinPage: BannerColorAliases;\n  withinContentContainer: BannerColorAliases;\n  icon: IconSource;\n}\n\nexport type BannerTone = 'success' | 'info' | 'warning' | 'critical';\n\nexport interface BannerProps {\n  /** Title content for the banner. */\n  title?: string;\n  /** Status icon to display in the banner. Use only major icons */\n  icon?: IconSource;\n  /** Renders the banner without a status icon. */\n  hideIcon?: boolean;\n  /** Sets the status of the banner. */\n  tone?: BannerTone;\n  /** Action for banner */\n  action?: DisableableAction & LoadableAction;\n  /** Action | Displays a secondary action */\n  secondaryAction?: Action;\n  /** Disables screen reader announcements when changing the content of the banner */\n  stopAnnouncements?: boolean;\n}\n\nexport interface BannerLayoutProps {\n  backgroundColor: BoxProps['background'];\n  textColor: ColorTextAlias;\n}\n\nexport const bannerAttributes: {[key in BannerTone]: BannerAttributes} = {\n  success: {\n    withinPage: {\n      background: 'bg-fill-success',\n      text: 'text-success-on-bg-fill',\n      icon: 'text-success-on-bg-fill',\n    },\n    withinContentContainer: {\n      background: 'bg-surface-success',\n      text: 'text-success',\n      icon: 'text-success',\n    },\n    icon: CheckIcon,\n  },\n  warning: {\n    withinPage: {\n      background: 'bg-fill-warning',\n      text: 'text-warning-on-bg-fill',\n      icon: 'text-warning-on-bg-fill',\n    },\n    withinContentContainer: {\n      background: 'bg-surface-warning',\n      text: 'text-warning',\n      icon: 'text-warning',\n    },\n    icon: AlertTriangleIcon,\n  },\n  critical: {\n    withinPage: {\n      background: 'bg-fill-critical',\n      text: 'text-critical-on-bg-fill',\n      icon: 'text-critical-on-bg-fill',\n    },\n    withinContentContainer: {\n      background: 'bg-surface-critical',\n      text: 'text-critical',\n      icon: 'text-critical',\n    },\n    icon: AlertDiamondIcon,\n  },\n  info: {\n    withinPage: {\n      background: 'bg-fill-info',\n      text: 'text-info-on-bg-fill',\n      icon: 'text-info-on-bg-fill',\n    },\n    withinContentContainer: {\n      background: 'bg-surface-info',\n      text: 'text-info',\n      icon: 'text-info',\n    },\n    icon: InfoIcon,\n  },\n};\n"],"names":[],"mappings":";AAqDO,MAAM,mBAA4D;AAAA,EACvE,SAAS;AAAA,IACP,YAAY;AAAA,MACV,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,MAAM;AAAA,IACR;AAAA,IACA,wBAAwB;AAAA,MACtB,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,MAAM;AAAA,IACR;AAAA,IACA,MAAM;AAAA,EACR;AAAA,EACA,SAAS;AAAA,IACP,YAAY;AAAA,MACV,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,MAAM;AAAA,IACR;AAAA,IACA,wBAAwB;AAAA,MACtB,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,MAAM;AAAA,IACR;AAAA,IACA,MAAM;AAAA,EACR;AAAA,EACA,UAAU;AAAA,IACR,YAAY;AAAA,MACV,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,MAAM;AAAA,IACR;AAAA,IACA,wBAAwB;AAAA,MACtB,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,MAAM;AAAA,IACR;AAAA,IACA,MAAM;AAAA,EACR;AAAA,EACA,MAAM;AAAA,IACJ,YAAY;AAAA,MACV,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,MAAM;AAAA,IACR;AAAA,IACA,wBAAwB;AAAA,MACtB,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,MAAM;AAAA,IACR;AAAA,IACA,MAAM;AAAA,EACR;AACF;"}