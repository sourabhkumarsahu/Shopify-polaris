import { defineComponent, getCurrentInstance, ref, computed, provide, openBlock, createElementBlock, normalizeClass, createVNode, mergeProps, toHandlers, withCtx, renderSlot } from "vue";
import { c as classNames } from "../../utilities/css.js";
import { _ as _sfc_main$1 } from "./components/BannerLayout.vue_vue_type_script_setup_true_lang.js";
import { u as useWithinContentContext } from "./context.js";
const Banner = "Polaris-Banner";
const keyFocused = "Polaris-Banner--keyFocused";
const withinContentContainer = "Polaris-Banner--withinContentContainer";
const withinPage = "Polaris-Banner--withinPage";
const DismissIcon = "Polaris-Banner__DismissIcon";
const styles = {
  Banner,
  keyFocused,
  withinContentContainer,
  withinPage,
  DismissIcon,
  "text-success-on-bg-fill": "Polaris-Banner--textSuccessOnBgFill",
  "text-success": "Polaris-Banner__text--success",
  "text-warning-on-bg-fill": "Polaris-Banner--textWarningOnBgFill",
  "text-warning": "Polaris-Banner__text--warning",
  "text-critical-on-bg-fill": "Polaris-Banner--textCriticalOnBgFill",
  "text-critical": "Polaris-Banner__text--critical",
  "text-info-on-bg-fill": "Polaris-Banner--textInfoOnBgFill",
  "text-info": "Polaris-Banner__text--info",
  "icon-secondary": "Polaris-Banner__icon--secondary"
};
const _hoisted_1 = ["role", "aria-live"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Banner",
  props: {
    title: {},
    icon: {},
    hideIcon: { type: Boolean },
    tone: { default: "info" },
    action: {},
    secondaryAction: {},
    stopAnnouncements: { type: Boolean }
  },
  setup(__props, { expose: __expose }) {
    const props = __props;
    const currentInstance = getCurrentInstance();
    __expose({
      focus: () => {
        if (wrapperRef.value) {
          wrapperRef.value.focus();
          shouldShowFocus.value = true;
        }
      }
    });
    const withinContentContainer2 = useWithinContentContext();
    const wrapperRef = ref(null);
    const shouldShowFocus = ref(false);
    const listeners = computed(() => {
      var _a;
      const eventBindings = {};
      if ((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onDismiss) {
        eventBindings["dismiss"] = currentInstance.vnode.props.onDismiss;
      }
      return eventBindings;
    });
    const handleKeyUp = (event) => {
      if (event.target === wrapperRef.value) {
        shouldShowFocus.value = true;
      }
    };
    const handleBlur = () => shouldShowFocus.value = false;
    const handleMouseUp = (event) => {
      const target = event.currentTarget;
      target.blur();
      shouldShowFocus.value = false;
    };
    const className = computed(() => classNames(
      styles.Banner,
      shouldShowFocus.value && styles.keyFocused,
      withinContentContainer2 ? styles.withinContentContainer : styles.withinPage
    ));
    provide("banner-context", false);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "wrapperRef",
        ref: wrapperRef,
        class: normalizeClass(className.value),
        tabIndex: 0,
        role: _ctx.tone === "warning" || _ctx.tone === "critical" ? "alert" : "status",
        "aria-live": _ctx.stopAnnouncements ? "off" : "polite",
        onMouseup: handleMouseUp,
        onKeyup: handleKeyUp,
        onBlur: handleBlur
      }, [
        createVNode(_sfc_main$1, mergeProps({ ...props }, toHandlers(listeners.value)), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16)
      ], 42, _hoisted_1);
    };
  }
});
export {
  _sfc_main as _,
  styles as s
};
//# sourceMappingURL=Banner.vue_vue_type_script_setup_true_lang.js.map
