import { defineComponent, useSlots, getCurrentInstance, computed, h, unref, openBlock, createBlock, mergeProps, withCtx, renderSlot, createCommentVNode, createElementBlock, Fragment } from "vue";
import { s as styles } from "../Banner.vue_vue_type_script_setup_true_lang.js";
import { u as useI18n } from "../../../use/useI18n.js";
import { u as useHasSlot } from "../../../use/useHasSlot.js";
import { _ as _sfc_main$5 } from "./WithinContentContainerBanner.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$6 } from "./InlineIconBanner.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$7 } from "./DefaultBanner.vue_vue_type_script_setup_true_lang.js";
import { X as XIcon } from "../../../../vendor.js";
import { b as bannerAttributes } from "../types.js";
import { u as useWithinContentContext } from "../context.js";
import { _ as _sfc_main$4 } from "../../Button/Button.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../../ButtonGroup/ButtonGroup.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../Text/Text.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "BannerLayout",
  props: {
    title: {},
    icon: {},
    hideIcon: { type: Boolean },
    tone: { default: "info" },
    action: {},
    secondaryAction: {},
    stopAnnouncements: { type: Boolean }
  },
  emits: ["dismiss"],
  setup(__props, { emit: __emit }) {
    const slots = useSlots();
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const currentInstance = getCurrentInstance();
    const { hasSlot } = useHasSlot();
    const withinContentContainer = useWithinContentContext();
    const isInlineIconBanner = computed(() => !props.title && !withinContentContainer);
    const bannerTone = computed(
      () => Object.keys(bannerAttributes).includes(props.tone) ? props.tone : "info"
    );
    const bannerColors = computed(
      () => bannerAttributes[bannerTone.value][withinContentContainer ? "withinContentContainer" : "withinPage"]
    );
    const sharedBannerProps = computed(() => {
      return {
        backgroundColor: bannerColors.value.background,
        textColor: bannerColors.value.text
      };
    });
    const bannerTitle = props.title ? h(
      _sfc_main$1,
      { variant: "headingSm", as: "h2", breakWord: true },
      () => props.title
    ) : void 0;
    const bannerIcon = !props.hideIcon ? h(
      "span",
      { class: styles[bannerColors.value.icon] },
      h(_sfc_main$2, { source: props.icon || bannerAttributes[bannerTone.value].icon })
    ) : void 0;
    const actionButtons = props.action || props.secondaryAction ? h(
      _sfc_main$3,
      () => {
        var _a;
        return [
          props.action && h(
            _sfc_main$4,
            { onClick: (_a = props.action) == null ? void 0 : _a.onAction, props: { ...props.action } },
            () => {
              var _a2;
              return (_a2 = props.action) == null ? void 0 : _a2.content;
            }
          ),
          props.secondaryAction && h(
            _sfc_main$4,
            { onClick: props.secondaryAction.onAction, props: { ...props.secondaryAction } },
            () => {
              var _a2;
              return (_a2 = props.secondaryAction) == null ? void 0 : _a2.content;
            }
          )
        ];
      }
    ) : void 0;
    const hasDismiss = computed(() => {
      var _a;
      return Boolean((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onDismiss);
    });
    const dismissButton = hasDismiss.value ? h(
      _sfc_main$4,
      {
        variant: "tertiary",
        icon: h(
          "span",
          { class: styles[isInlineIconBanner.value ? "icon-secondary" : bannerColors.value.icon] },
          h(_sfc_main$2, { source: XIcon })
        ),
        onClick: () => emits("dismiss"),
        accessibilityLabel: i18n.translate("Polaris.Banner.dismissButton")
      }
    ) : void 0;
    return (_ctx, _cache) => {
      return unref(withinContentContainer) ? (openBlock(), createBlock(_sfc_main$5, mergeProps({ key: 0 }, { ...sharedBannerProps.value }, {
        bannerTitle: unref(bannerTitle),
        bannerIcon: unref(bannerIcon),
        actionButtons: unref(actionButtons),
        dismissButton: unref(dismissButton)
      }), {
        default: withCtx(() => [
          unref(hasSlot)(slots.default) ? (openBlock(), createBlock(unref(_sfc_main$1), {
            key: 0,
            as: "span",
            variant: "bodyMd"
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          })) : createCommentVNode("", true)
        ]),
        _: 3
      }, 16, ["bannerTitle", "bannerIcon", "actionButtons", "dismissButton"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
        isInlineIconBanner.value ? (openBlock(), createBlock(_sfc_main$6, mergeProps({ key: 0 }, { ...sharedBannerProps.value }, {
          bannerIcon: unref(bannerIcon),
          actionButtons: unref(actionButtons),
          dismissButton: unref(dismissButton)
        }), {
          default: withCtx(() => [
            unref(hasSlot)(slots.default) ? (openBlock(), createBlock(unref(_sfc_main$1), {
              key: 0,
              as: "span",
              variant: "bodyMd"
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            })) : createCommentVNode("", true)
          ]),
          _: 3
        }, 16, ["bannerIcon", "actionButtons", "dismissButton"])) : (openBlock(), createBlock(_sfc_main$7, mergeProps({ key: 1 }, { ...sharedBannerProps.value }, {
          bannerTitle: unref(bannerTitle),
          bannerIcon: unref(bannerIcon),
          actionButtons: unref(actionButtons),
          dismissButton: unref(dismissButton)
        }), {
          default: withCtx(() => [
            unref(hasSlot)(slots.default) ? (openBlock(), createBlock(unref(_sfc_main$1), {
              key: 0,
              as: "span",
              variant: "bodyMd"
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            })) : createCommentVNode("", true)
          ]),
          _: 3
        }, 16, ["bannerTitle", "bannerIcon", "actionButtons", "dismissButton"]))
      ], 64));
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=BannerLayout.vue_vue_type_script_setup_true_lang.js.map
