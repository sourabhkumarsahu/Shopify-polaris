{"version":3,"file":"BannerLayout.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../../src/components/Banner/components/BannerLayout.vue"],"sourcesContent":["<template lang=\"pug\">\nWithinContentContainerBanner(\n  v-if=\"withinContentContainer\",\n  v-bind=\"{ ...sharedBannerProps }\",\n  :bannerTitle=\"bannerTitle\",\n  :bannerIcon=\"bannerIcon\",\n  :actionButtons=\"actionButtons\",\n  :dismissButton=\"dismissButton\",\n)\n  Text(\n    v-if=\"hasSlot(slots.default)\",\n    as=\"span\",\n    variant=\"bodyMd\",\n  )\n    slot\ntemplate(v-else)\n  InlineIconBanner(\n    v-if=\"isInlineIconBanner\",\n    v-bind=\"{ ...sharedBannerProps }\",\n    :bannerIcon=\"bannerIcon\",\n    :actionButtons=\"actionButtons\",\n    :dismissButton=\"dismissButton\",\n  )\n    Text(\n      v-if=\"hasSlot(slots.default)\",\n      as=\"span\",\n      variant=\"bodyMd\",\n    )\n      slot\n  DefaultBanner(\n    v-else,\n    v-bind=\"{ ...sharedBannerProps }\",\n    :bannerTitle=\"bannerTitle\",\n    :bannerIcon=\"bannerIcon\",\n    :actionButtons=\"actionButtons\",\n    :dismissButton=\"dismissButton\",\n  )\n    Text(\n      v-if=\"hasSlot(slots.default)\",\n      as=\"span\",\n      variant=\"bodyMd\",\n    )\n      slot\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, h, getCurrentInstance } from 'vue';\nimport styles from '@polaris/components/Banner/Banner.module.css';\nimport useI18n from '@/use/useI18n';\nimport { Text, Icon, ButtonGroup, Button } from '@/components';\nimport WithinContentContainerBanner from './WithinContentContainerBanner.vue';\nimport InlineIconBanner from './InlineIconBanner.vue';\nimport DefaultBanner from './DefaultBanner.vue';\nimport type { VueNode } from '@/utilities/types';\nimport { useHasSlot } from '@/use/useHasSlot';\nimport XIcon from '@icons/XIcon.svg';\nimport type { BannerProps } from '../types';\nimport { bannerAttributes } from '../types';\nimport useWithinContentContext from '../context';\n\nconst slots = defineSlots<{\n  /** The content to display inside the button */\n  default: (_: VueNode) => any;\n}>();\n\ntype BannerLayoutEmits = {\n  /** Callback when Banner is dismissed */\n  'dismiss': [];\n}\n\nconst props = withDefaults(defineProps<BannerProps>(), {\n  tone: 'info',\n});\n\nconst emits = defineEmits<BannerLayoutEmits>();\n\nconst i18n = useI18n();\nconst currentInstance = getCurrentInstance();\nconst { hasSlot } = useHasSlot();\n\nconst withinContentContainer = useWithinContentContext();\n\nconst isInlineIconBanner = computed(() => !props.title && !withinContentContainer);\n\nconst bannerTone = computed(() => Object.keys(bannerAttributes).includes(props.tone)\n  ? props.tone\n  : 'info',\n);\n\nconst bannerColors = computed(() =>\n  bannerAttributes[bannerTone.value][\n  withinContentContainer ? 'withinContentContainer' : 'withinPage'\n  ]\n);\n\nconst sharedBannerProps = computed(() => {\n  return {\n    backgroundColor: bannerColors.value.background,\n    textColor: bannerColors.value.text,\n  }\n});\n\nconst bannerTitle = props.title\n  ? h(\n    Text,\n    { variant: 'headingSm', as: 'h2', breakWord: true },\n    () => props.title,\n  )\n  : undefined;\n\nconst bannerIcon = !props.hideIcon\n  ? h(\n    'span',\n    { class: styles[bannerColors.value.icon] },\n    h(Icon, { source: props.icon || bannerAttributes[bannerTone.value].icon, }),\n  )\n  : undefined;\n\nconst actionButtons = (props.action || props.secondaryAction)\n  ? h(\n    ButtonGroup,\n    () => [\n      props.action && h(Button,\n        { onClick: props.action?.onAction, props: { ...props.action } },\n        () => props.action?.content,\n      ),\n      props.secondaryAction && h(Button,\n        { onClick: props.secondaryAction.onAction, props: { ...props.secondaryAction } },\n        () => props.secondaryAction?.content,\n      ),\n    ],\n  )\n  : undefined;\n\nconst hasDismiss = computed(() => Boolean(currentInstance?.vnode.props?.onDismiss));\n\nconst dismissButton = hasDismiss.value\n  ? h(\n    Button,\n    {\n      variant: 'tertiary',\n      icon: h(\n        'span',\n        { class: styles[isInlineIconBanner.value ? 'icon-secondary' : bannerColors.value.icon] },\n        h(Icon, { source: XIcon }),\n      ),\n      onClick: () => emits('dismiss'),\n      accessibilityLabel: i18n.translate('Polaris.Banner.dismissButton'),\n    },\n  )\n  : undefined;\n</script>\n"],"names":["_useSlots","Text","Icon","ButtonGroup","Button","_a"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA,UAAM,QAAQA;AAUd,UAAM,QAAQ;AAId,UAAM,QAAQ;AAEd,UAAM,OAAO;AACb,UAAM,kBAAkB;AAClB,UAAA,EAAE,YAAY;AAEpB,UAAM,yBAAyB;AAE/B,UAAM,qBAAqB,SAAS,MAAM,CAAC,MAAM,SAAS,CAAC,sBAAsB;AAEjF,UAAM,aAAa;AAAA,MAAS,MAAM,OAAO,KAAK,gBAAgB,EAAE,SAAS,MAAM,IAAI,IAC/E,MAAM,OACN;AAAA,IAAA;AAGJ,UAAM,eAAe;AAAA,MAAS,MAC5B,iBAAiB,WAAW,KAAK,EACjC,yBAAyB,2BAA2B,YACpD;AAAA,IAAA;AAGI,UAAA,oBAAoB,SAAS,MAAM;AAChC,aAAA;AAAA,QACL,iBAAiB,aAAa,MAAM;AAAA,QACpC,WAAW,aAAa,MAAM;AAAA,MAAA;AAAA,IAChC,CACD;AAEK,UAAA,cAAc,MAAM,QACtB;AAAA,MACAC;AAAAA,MACA,EAAE,SAAS,aAAa,IAAI,MAAM,WAAW,KAAK;AAAA,MAClD,MAAM,MAAM;AAAA,IAEZ,IAAA;AAEE,UAAA,aAAa,CAAC,MAAM,WACtB;AAAA,MACA;AAAA,MACA,EAAE,OAAO,OAAO,aAAa,MAAM,IAAI,EAAE;AAAA,MACzC,EAAEC,aAAM,EAAE,QAAQ,MAAM,QAAQ,iBAAiB,WAAW,KAAK,EAAE,MAAO;AAAA,IAE1E,IAAA;AAEJ,UAAM,gBAAiB,MAAM,UAAU,MAAM,kBACzC;AAAA,MACAC;AAAAA,MACA,MAAM;;AAAA;AAAA,UACJ,MAAM,UAAU;AAAA,YAAEC;AAAAA,YAChB,EAAE,UAAS,WAAM,WAAN,mBAAc,UAAU,OAAO,EAAE,GAAG,MAAM,SAAS;AAAA,YAC9D,MAAM;;AAAA,sBAAAC,MAAA,MAAM,WAAN,gBAAAA,IAAc;AAAA;AAAA,UACtB;AAAA,UACA,MAAM,mBAAmB;AAAA,YAAED;AAAAA,YACzB,EAAE,SAAS,MAAM,gBAAgB,UAAU,OAAO,EAAE,GAAG,MAAM,kBAAkB;AAAA,YAC/E,MAAM;;AAAA,sBAAAC,MAAA,MAAM,oBAAN,gBAAAA,IAAuB;AAAA;AAAA,UAC/B;AAAA,QACF;AAAA;AAAA,IAEA,IAAA;AAEE,UAAA,aAAa,SAAS;;AAAM,sBAAQ,wDAAiB,MAAM,UAAvB,mBAA8B,SAAS;AAAA,KAAC;AAE5E,UAAA,gBAAgB,WAAW,QAC7B;AAAA,MACAD;AAAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,MAAM;AAAA,UACJ;AAAA,UACA,EAAE,OAAO,OAAO,mBAAmB,QAAQ,mBAAmB,aAAa,MAAM,IAAI,EAAE;AAAA,UACvF,EAAEF,aAAM,EAAE,QAAQ,OAAO;AAAA,QAC3B;AAAA,QACA,SAAS,MAAM,MAAM,SAAS;AAAA,QAC9B,oBAAoB,KAAK,UAAU,8BAA8B;AAAA,MACnE;AAAA,IAEA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}