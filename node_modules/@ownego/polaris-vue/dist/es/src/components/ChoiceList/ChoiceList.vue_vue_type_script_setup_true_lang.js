import { defineComponent, mergeModels, useSlots, useModel, getCurrentInstance, computed, openBlock, createBlock, unref, withCtx, createVNode, renderSlot, createElementBlock, Fragment, createTextVNode, toDisplayString, createCommentVNode, renderList, resolveDynamicComponent, createSlots, normalizeClass } from "vue";
import { u as useHasSlot } from "../../use/useHasSlot.js";
import { _ as _sfc_main$4 } from "../Bleed/Bleed.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../BlockStack/BlockStack.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../Box/Box.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$5 } from "../Checkbox/Checkbox.vue_vue_type_script_setup_true_lang.js";
import { e as errorTextID } from "../InlineError/utils.js";
import { _ as _sfc_main$7 } from "../InlineError/InlineError.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$6 } from "../RadioButton/RadioButton.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
const ChoiceChildren = "Polaris-ChoiceList__ChoiceChildren";
const styles = {
  ChoiceChildren
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "ChoiceList",
  props: /* @__PURE__ */ mergeModels({
    title: {},
    choices: {},
    name: {},
    allowMultiple: { type: Boolean },
    titleHidden: { type: Boolean },
    error: {},
    disabled: { type: Boolean, default: false },
    tone: {}
  }, {
    "modelValue": {
      default: []
    },
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["change"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    var _a;
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const model = useModel(__props, "modelValue");
    const { hasSlot } = useHasSlot();
    const uniqId = (_a = getCurrentInstance()) == null ? void 0 : _a.uid;
    const name = computed(() => String(props.name ?? uniqId));
    const finalName = computed(() => props.allowMultiple ? `${name.value}[]` : name.value);
    const handleChange = (checked, value) => {
      const newValue = updateSelectedChoices(value, checked);
      model.value = newValue;
      emits("change", newValue, finalName.value);
    };
    const choiceIsSelected = ({ value }) => {
      return model.value.includes(value);
    };
    function updateSelectedChoices(value, checked) {
      if (checked) {
        return props.allowMultiple ? [...model.value, value] : [value];
      }
      return model.value.filter((selectedChoice) => selectedChoice !== value);
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        as: "fieldset",
        gap: { xs: "400", md: "0" },
        "aria-invalid": _ctx.error != null,
        id: finalName.value
      }, {
        default: withCtx(() => [
          unref(hasSlot)(slots.title) || _ctx.title ? (openBlock(), createBlock(unref(_sfc_main$2), {
            key: 0,
            as: "legend",
            "padding-block-end": { xs: "0", md: "100" }
          }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$3), {
                as: "span",
                variant: "bodyMd",
                "visually-hidden": _ctx.titleHidden
              }, {
                default: withCtx(() => [
                  unref(hasSlot)(slots.title) ? renderSlot(_ctx.$slots, "title", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                    createTextVNode(toDisplayString(_ctx.title), 1)
                  ], 64))
                ]),
                _: 3
              }, 8, ["visually-hidden"])
            ]),
            _: 3
          })) : createCommentVNode("", true),
          createVNode(unref(_sfc_main$1), {
            as: "ul",
            gap: { xs: "400", md: "0" }
          }, {
            default: withCtx(() => [
              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.choices, (choice) => {
                return openBlock(), createElementBlock("li", {
                  key: choice.value
                }, [
                  createVNode(unref(_sfc_main$4), {
                    "margin-block-end": choice.helpText ? { xs: "100", md: "0" } : { xs: "0" }
                  }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.allowMultiple ? unref(_sfc_main$5) : unref(_sfc_main$6)), {
                        name: finalName.value,
                        value: choice.value,
                        id: choice.id,
                        disabled: choice.disabled || _ctx.disabled,
                        fill: { xs: true, sm: false },
                        checked: choiceIsSelected(choice),
                        "aria-describedby": _ctx.error && choice.describedByError ? unref(errorTextID)(finalName.value) : void 0,
                        tone: _ctx.tone,
                        onChange: handleChange
                      }, createSlots({ _: 2 }, [
                        choice.label ? {
                          name: "label",
                          fn: withCtx(() => [
                            createTextVNode(toDisplayString(choice.label), 1)
                          ]),
                          key: "0"
                        } : void 0,
                        choice.helpText ? {
                          name: "helpText",
                          fn: withCtx(() => [
                            createTextVNode(toDisplayString(choice.helpText), 1)
                          ]),
                          key: "1"
                        } : void 0
                      ]), 1064, ["name", "value", "id", "disabled", "checked", "aria-describedby", "tone"])),
                      choice.renderChildren ? (openBlock(), createElementBlock("div", {
                        key: 0,
                        class: normalizeClass(unref(styles).ChoiceChildren)
                      }, [
                        createVNode(unref(_sfc_main$2), { "padding-block-start": { xs: "400", md: "0" } }, {
                          default: withCtx(() => [
                            (openBlock(), createBlock(resolveDynamicComponent(choice.renderChildren)))
                          ]),
                          _: 2
                        }, 1024)
                      ], 2)) : createCommentVNode("", true)
                    ]),
                    _: 2
                  }, 1032, ["margin-block-end"])
                ]);
              }), 128))
            ]),
            _: 1
          }),
          _ctx.error ? (openBlock(), createBlock(unref(_sfc_main$2), {
            key: 1,
            "padding-block-start": { xs: "0", md: "100" },
            "padding-block-end": "200"
          }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$7), {
                message: _ctx.error,
                "field-id": finalName.value
              }, null, 8, ["message", "field-id"])
            ]),
            _: 1
          })) : createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["aria-invalid", "id"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=ChoiceList.vue_vue_type_script_setup_true_lang.js.map
