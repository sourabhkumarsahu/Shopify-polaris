import { defineComponent, useAttrs, computed, unref, openBlock, createBlock, resolveDynamicComponent, normalizeProps, mergeProps, createElementBlock, renderSlot } from "vue";
import { u as useLink } from "../../use/useLink.js";
import { u as unstyled } from "../../../polaris/polaris-react/src/components/shared.js";
const _hoisted_1 = ["target", "href", "rel"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "UnstyledLink",
  props: {
    url: {},
    external: { type: Boolean },
    target: {},
    download: { type: [String, Boolean], default: void 0 }
  },
  setup(__props) {
    const attrs = useAttrs();
    const LinkComponent = useLink();
    const props = __props;
    const linkProps = computed(() => {
      const {
        external,
        url,
        target: target2,
        ...rest
      } = props;
      return {
        external,
        url,
        rest
      };
    });
    const target = computed(() => {
      if (props.external) {
        return "_blank";
      }
      return props.target ?? void 0;
    });
    const rel = computed(() => {
      return target.value === "_blank" ? "noopener noreferrer" : void 0;
    });
    return (_ctx, _cache) => {
      return unref(LinkComponent) ? (openBlock(), createBlock(resolveDynamicComponent(unref(LinkComponent)), normalizeProps(mergeProps({ key: 0 }, { ...unref(attrs), ...unref(unstyled).props, ...props })), null, 16)) : (openBlock(), createElementBlock("a", mergeProps({
        key: 1,
        target: target.value
      }, { ...unref(attrs), ...linkProps.value.rest, ...unref(unstyled).props }, {
        href: _ctx.url,
        rel: rel.value
      }), [
        renderSlot(_ctx.$slots, "default")
      ], 16, _hoisted_1));
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=UnstyledLink.vue_vue_type_script_setup_true_lang.js.map
