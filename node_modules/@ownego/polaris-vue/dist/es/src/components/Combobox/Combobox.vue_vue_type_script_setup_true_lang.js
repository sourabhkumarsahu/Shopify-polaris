import { defineComponent, useSlots, ref, computed, provide, openBlock, createBlock, unref, withCtx, renderSlot, createElementVNode, normalizeClass, createCommentVNode } from "vue";
import { u as useHasSlot } from "../../use/useHasSlot.js";
import { _ as _sfc_main$1 } from "../Popover/Popover.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../Popover/components/Pane/Pane.vue_vue_type_script_setup_true_lang.js";
const Listbox = "Polaris-Combobox__Listbox";
const styles = {
  Listbox
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Combobox",
  props: {
    allowMultiple: { type: Boolean },
    preferredPosition: { default: "below" },
    willLoadMoreOptions: { type: Boolean },
    height: {},
    maxHeight: {},
    minHeight: {}
  },
  emits: ["scrolled-to-bottom", "close"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const { hasSlot } = useHasSlot();
    const popoverRef = ref();
    const popoverActive = ref(false);
    const activeOptionId = ref();
    const textFieldLabelId = ref();
    const listboxId = ref();
    const textFieldFocused = ref(false);
    const shouldOpen = computed(() => !popoverActive.value);
    const popoverActiveWithChildren = computed(() => popoverActive.value && hasSlot(slots.default));
    const isWillLoadMoreOptions = computed(() => Boolean(props.willLoadMoreOptions));
    const setTextFieldFocused = (focused) => {
      textFieldFocused.value = focused;
    };
    const setTextFieldLabelId = (id) => {
      textFieldLabelId.value = id;
    };
    const setActiveOptionId = (id) => {
      activeOptionId.value = id;
    };
    const setListboxId = (id) => {
      listboxId.value = id;
    };
    const handleClose = () => {
      popoverActive.value = false;
      emits("close");
      activeOptionId.value = void 0;
    };
    const handleOpen = () => {
      popoverActive.value = true;
      activeOptionId.value = void 0;
    };
    const onOptionSelected = () => {
      var _a;
      if (!props.allowMultiple) {
        handleClose();
        return;
      }
      (_a = popoverRef.value) == null ? void 0 : _a.forceUpdatePosition();
    };
    const handleFocus = () => {
      if (shouldOpen.value) {
        handleOpen();
      }
    };
    const handleChange = () => {
      if (shouldOpen.value) {
        handleOpen();
      }
    };
    const handleBlur = () => {
      if (popoverActive.value) {
        handleClose();
      }
    };
    const onScrolledToBottom = () => {
      emits("scrolled-to-bottom");
    };
    provide("combobox-textfield", {
      activeOptionId,
      listboxId,
      expanded: popoverActive,
      setTextFieldFocused,
      setTextFieldLabelId,
      onTextFieldFocus: handleFocus,
      onTextFieldChange: handleChange,
      onTextFieldBlur: handleBlur
    });
    provide("combobox-listbox", {
      listboxId,
      textFieldLabelId,
      textFieldFocused,
      willLoadMoreOptions: isWillLoadMoreOptions,
      onOptionSelected,
      setActiveOptionId,
      setListboxId,
      onKeyToBottom: onScrolledToBottom
    });
    provide("combobox-listbox-option", {
      allowMultiple: props.allowMultiple
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        ref_key: "popoverRef",
        ref: popoverRef,
        active: popoverActiveWithChildren.value,
        "autofocus-target": "none",
        "prevent-focus-on-close": "",
        "full-width": "",
        "prefer-input-activator": false,
        "preferred-position": _ctx.preferredPosition,
        onClose: handleClose
      }, {
        activator: withCtx(() => [
          renderSlot(_ctx.$slots, "activator")
        ]),
        default: withCtx(() => [
          unref(hasSlot)(slots.default) ? (openBlock(), createBlock(unref(_sfc_main$2), {
            key: 0,
            height: _ctx.height,
            "max-height": _ctx.maxHeight,
            "min-height": _ctx.minHeight,
            onScrolledToBottom
          }, {
            default: withCtx(() => [
              createElementVNode("div", {
                class: normalizeClass(unref(styles).Listbox)
              }, [
                renderSlot(_ctx.$slots, "default")
              ], 2)
            ]),
            _: 3
          }, 8, ["height", "max-height", "min-height"])) : createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["active", "preferred-position"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Combobox.vue_vue_type_script_setup_true_lang.js.map
