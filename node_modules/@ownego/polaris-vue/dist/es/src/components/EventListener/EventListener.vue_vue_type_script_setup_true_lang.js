import { defineComponent, onMounted, onBeforeUnmount, watch } from "vue";
const __default__ = {
  name: "EventListener",
  inheritAttrs: false,
  render() {
    return null;
  }
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...__default__,
  props: {
    event: {},
    capture: { type: Boolean },
    handler: { type: Function },
    passive: { type: Boolean },
    customWindow: {}
  },
  setup(__props) {
    const props = __props;
    onMounted(() => {
      attachListener();
    });
    onBeforeUnmount(() => {
      detachListener();
    });
    watch(
      () => ({ ...props }),
      (newProps, oldProps) => {
        if (newProps !== oldProps) {
          detachListener();
          attachListener();
        }
      }
    );
    function attachListener() {
      const window = props.customWindow || globalThis.window;
      window.addEventListener(props.event, props.handler, {
        capture: props.capture,
        passive: props.passive
      });
    }
    function detachListener() {
      const window = props.customWindow || globalThis.window;
      window.removeEventListener(props.event, props.handler, {
        capture: props.capture
      });
    }
    return { props, attachListener, detachListener };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=EventListener.vue_vue_type_script_setup_true_lang.js.map
