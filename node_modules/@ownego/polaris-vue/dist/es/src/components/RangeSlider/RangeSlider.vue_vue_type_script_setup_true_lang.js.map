{"version":3,"file":"RangeSlider.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/RangeSlider/RangeSlider.vue"],"sourcesContent":["<template lang=\"pug\">\ncomponent(\n  :is=\"elm\",\n  :id=\"`${id}`\",\n  :min=\"min\",\n  :max=\"max\",\n  :step=\"step\",\n  v-bind=\"sharedProps\",\n  v-model=\"model\",\n  @change=\"handleChange\",\n)\n  template(v-if=\"hasLabel\", #label)\n    slot(v-if=\"slots.label\", name=\"label\")\n    template(v-else) {{ props.label }}\n\n  template(v-if=\"hasHelpText\", #helpText)\n    slot(v-if=\"slots.helpText\", name=\"helpText\")\n    template(v-else) {{ props.helpText }}\n\n  template(v-if=\"hasPrefix\", #prefix)\n    slot(v-if=\"slots.prefix\", name=\"prefix\")\n    template(v-else) {{ props.prefix }}\n\n  template(v-if=\"hasSuffix\", #suffix)\n    slot(v-if=\"slots.suffix\", name=\"suffix\")\n    template(v-else) {{ props.suffix }}\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, h } from 'vue';\n// @ts-ignore Note: using on template as string\nimport { SingleThumb, DualThumb } from './components';\nimport type {\n  DualValue,\n  RangeSliderValue,\n  RangeSliderProps,\n  RangeSliderSlots,\n  RangeSliderEvents,\n} from './types';\nimport useId from '@/use/useId';\nimport { useHasSlot } from '@/use/useHasSlot';\n\nconst props = withDefaults(defineProps<RangeSliderProps>(), {\n  min: 0,\n  max: 100,\n  step: 1,\n});\nconst slots = defineSlots<RangeSliderSlots>();\nconst emits = defineEmits<RangeSliderEvents>();\n\nconst model = defineModel<RangeSliderValue>({\n  required: true,\n});\n\nconst id = useId();\nconst { hasSlot } = useHasSlot();\n\nconst hasLabel = computed(() => hasSlot(slots.label) || props.label);\nconst hasHelpText = computed(() => hasSlot(slots.helpText) || props.helpText);\nconst hasPrefix = computed(() => hasSlot(slots.prefix) || props.prefix);\nconst hasSuffix = computed(() => hasSlot(slots.suffix) || props.suffix);\n\nconst sharedProps = computed(() => {\n  const { id, min, max, step, ...rest } = props;\n  return rest;\n});\n\nconst elm = isDualThumb(model.value)\n  ? h(DualThumb)\n  : h(SingleThumb);\n\nconst handleChange = (value: RangeSliderValue) => {\n  emits('change', value, `${id}`);\n};\n\nfunction isDualThumb(value?: RangeSliderValue): value is DualValue {\n  return Array.isArray(value);\n}\n</script>\n"],"names":["_useSlots","_useModel","id","DualThumb","SingleThumb"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,UAAM,QAAQ;AAKd,UAAM,QAAQA;AACd,UAAM,QAAQ;AAER,UAAA,QAAQC,SAA6B,SAAA,YAE1C;AAED,UAAM,KAAK;AACL,UAAA,EAAE,YAAY;AAEd,UAAA,WAAW,SAAS,MAAM,QAAQ,MAAM,KAAK,KAAK,MAAM,KAAK;AAC7D,UAAA,cAAc,SAAS,MAAM,QAAQ,MAAM,QAAQ,KAAK,MAAM,QAAQ;AACtE,UAAA,YAAY,SAAS,MAAM,QAAQ,MAAM,MAAM,KAAK,MAAM,MAAM;AAChE,UAAA,YAAY,SAAS,MAAM,QAAQ,MAAM,MAAM,KAAK,MAAM,MAAM;AAEhE,UAAA,cAAc,SAAS,MAAM;AAC3B,YAAA,EAAE,IAAAC,KAAI,KAAK,KAAK,MAAM,GAAG,KAAS,IAAA;AACjC,aAAA;AAAA,IAAA,CACR;AAEK,UAAA,MAAM,YAAY,MAAM,KAAK,IAC/B,EAAEC,WAAS,IACX,EAAEC,WAAW;AAEX,UAAA,eAAe,CAAC,UAA4B;AAChD,YAAM,UAAU,OAAO,GAAG,EAAE,EAAE;AAAA,IAAA;AAGhC,aAAS,YAAY,OAA8C;AAC1D,aAAA,MAAM,QAAQ,KAAK;AAAA,IAC5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}