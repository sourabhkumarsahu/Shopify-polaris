import { defineComponent, mergeModels, useSlots, useModel, computed, openBlock, createBlock, unref, createSlots, withCtx, createElementVNode, normalizeClass, normalizeStyle, createElementBlock, renderSlot, Fragment, createTextVNode, toDisplayString, createCommentVNode, createVNode } from "vue";
import { c as classNames } from "../../../../utilities/css.js";
import { c as clamp } from "../../../../../polaris/polaris-react/src/utilities/clamp.js";
import { u as useHasSlot } from "../../../../use/useHasSlot.js";
import { _ as _sfc_main$1 } from "../../../Labelled/Labelled.vue_vue_type_script_setup_true_lang.js";
import { h as helpTextID } from "../../../Labelled/utils.js";
import { i as invertNumber } from "../../../../../polaris/polaris-react/src/components/RangeSlider/utilities/invertNumber.js";
import { s as sharedStyles } from "../DualThumb/DualThumb.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../../../Text/Text.vue_vue_type_script_setup_true_lang.js";
const SingleThumb = "Polaris-RangeSlider-SingleThumb";
const disabled = "Polaris-RangeSlider-SingleThumb--disabled";
const InputWrapper = "Polaris-RangeSlider-SingleThumb__InputWrapper";
const Prefix = "Polaris-RangeSlider-SingleThumb__Prefix";
const Suffix = "Polaris-RangeSlider-SingleThumb__Suffix";
const Input = "Polaris-RangeSlider-SingleThumb__Input";
const error = "Polaris-RangeSlider-SingleThumb--error";
const Output = "Polaris-RangeSlider-SingleThumb__Output";
const OutputBubble = "Polaris-RangeSlider-SingleThumb__OutputBubble";
const styles = {
  SingleThumb,
  disabled,
  InputWrapper,
  Prefix,
  Suffix,
  Input,
  error,
  Output,
  OutputBubble
};
const _hoisted_1 = ["id", "name", "min", "max", "step", "value", "disabled", "aria-valuemin", "aria-valuemax", "aria-valuenow", "aria-invalid", "aria-describedby"];
const _hoisted_2 = ["for"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "SingleThumb",
  props: /* @__PURE__ */ mergeModels({
    modelValue: {},
    label: {},
    labelAction: {},
    labelHidden: { type: Boolean },
    id: {},
    min: {},
    max: {},
    step: {},
    output: { type: Boolean },
    helpText: {},
    error: {},
    disabled: { type: Boolean },
    prefix: {},
    suffix: {}
  }, {
    "modelValue": {
      required: true
    },
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["change", "focus", "blur"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const model = useModel(__props, "modelValue");
    const { hasSlot } = useHasSlot();
    const clampedValue = computed(() => clamp(model.value, props.min, props.max));
    const ariaDescribedBy = computed(() => {
      const describedBy = [];
      if (props.error) {
        describedBy.push(`${props.id}Error`);
      }
      if (props.helpText) {
        describedBy.push(helpTextID(props.id));
      }
      return describedBy.length ? describedBy.join(" ") : void 0;
    });
    const sliderProgress = computed(() => (clampedValue.value - props.min) * 100 / (props.max - props.min));
    const outputFactor = computed(() => invertNumber((sliderProgress.value - 50) / 100));
    const cssVars = computed(() => ({
      "--pc-range-slider-min": props.min,
      "--pc-range-slider-max": props.max,
      "--pc-range-slider-current": clampedValue.value,
      "--pc-range-slider-progress": `${sliderProgress.value}%`,
      "--pc-range-slider-output-factor": `${outputFactor.value}`
    }));
    const hasLabel = computed(() => hasSlot(slots.label) || props.label);
    const hasHelpText = computed(() => hasSlot(slots.helpText) || props.helpText);
    const hasPrefix = computed(() => hasSlot(slots.prefix) || props.prefix);
    const hasSuffix = computed(() => hasSlot(slots.suffix) || props.suffix);
    const className = computed(() => classNames(
      styles.SingleThumb,
      sharedStyles.RangeSlider,
      props.error && styles.error,
      props.disabled && styles.disabled
    ));
    const handleUpdate = (event) => {
      const target = event.target;
      model.value = parseFloat(target.value);
    };
    const handleChange = (event) => {
      const target = event.target;
      model.value = parseFloat(target.value);
      emits("change", model.value, props.id);
    };
    const handleFocus = () => {
      emits("focus");
    };
    const handleBlur = () => {
      emits("blur");
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        id: _ctx.id,
        error: _ctx.error,
        action: _ctx.labelAction,
        "label-hidden": _ctx.labelHidden
      }, createSlots({
        default: withCtx(() => [
          createElementVNode("div", {
            class: normalizeClass(className.value),
            style: normalizeStyle(cssVars.value)
          }, [
            hasPrefix.value ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(styles).Prefix)
            }, [
              slots.prefix ? renderSlot(_ctx.$slots, "prefix", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                createTextVNode(toDisplayString(_ctx.prefix), 1)
              ], 64))
            ], 2)) : createCommentVNode("", true),
            createElementVNode("div", {
              class: normalizeClass(unref(classNames)(unref(styles).InputWrapper, unref(sharedStyles)["Track--dashed-after"]))
            }, [
              createElementVNode("input", {
                type: "range",
                class: normalizeClass(unref(styles).Input),
                id: _ctx.id,
                name: _ctx.id,
                min: _ctx.min,
                max: _ctx.max,
                step: _ctx.step,
                value: clampedValue.value,
                disabled: _ctx.disabled,
                "aria-valuemin": _ctx.min,
                "aria-valuemax": _ctx.max,
                "aria-valuenow": clampedValue.value,
                "aria-invalid": Boolean(_ctx.error),
                "aria-describedby": ariaDescribedBy.value,
                onInput: handleUpdate,
                onChange: handleChange,
                onFocus: handleFocus,
                onBlur: handleBlur
              }, null, 42, _hoisted_1),
              createElementVNode("output", {
                class: normalizeClass(unref(styles).Output),
                for: _ctx.id
              }, [
                createElementVNode("div", {
                  class: normalizeClass(unref(styles).OutputBubble)
                }, [
                  createVNode(unref(_sfc_main$2), {
                    as: "span",
                    variant: "headingSm",
                    alignment: "center"
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(clampedValue.value), 1)
                    ]),
                    _: 1
                  })
                ], 2)
              ], 10, _hoisted_2)
            ], 2),
            hasSuffix.value ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass(unref(styles).Suffix)
            }, [
              slots.suffix ? renderSlot(_ctx.$slots, "suffix", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                createTextVNode(toDisplayString(_ctx.suffix), 1)
              ], 64))
            ], 2)) : createCommentVNode("", true)
          ], 6)
        ]),
        _: 2
      }, [
        hasLabel.value ? {
          name: "label",
          fn: withCtx(() => [
            slots.label ? renderSlot(_ctx.$slots, "label", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ], 64))
          ]),
          key: "0"
        } : void 0,
        hasHelpText.value ? {
          name: "helpText",
          fn: withCtx(() => [
            slots.helpText ? renderSlot(_ctx.$slots, "helpText", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.helpText), 1)
            ], 64))
          ]),
          key: "1"
        } : void 0
      ]), 1032, ["id", "error", "action", "label-hidden"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=SingleThumb.vue_vue_type_script_setup_true_lang.js.map
