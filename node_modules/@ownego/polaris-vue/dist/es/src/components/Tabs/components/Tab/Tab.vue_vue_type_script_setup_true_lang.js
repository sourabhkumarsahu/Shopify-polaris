import { defineComponent, useSlots, getCurrentInstance, ref, computed, watch, unref, openBlock, createElementBlock, Fragment, createBlock, createVNode, withCtx, createElementVNode, normalizeClass, createCommentVNode, toDisplayString, createTextVNode, h } from "vue";
import { u as useI18n } from "../../../../use/useI18n.js";
import { f as focusFirstFocusableNode, h as handleMouseUpByBlurring } from "../../../../utilities/focus.js";
import { c as classNames } from "../../../../utilities/css.js";
import { u as useHasSlot } from "../../../../use/useHasSlot.js";
import { _ as _sfc_main$2 } from "../../../ActionList/ActionList.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$b } from "../../../Badge/Badge.vue_vue_type_script_setup_true_lang.js";
import { I as InfoIcon, D as DuplicateIcon, x as EditIcon, L as LayoutColumns3Icon, y as DeleteIcon, g as ChevronDownIcon } from "../../../../../vendor.js";
import { _ as _sfc_main$8 } from "../../../UnstyledButton/UnstyledButton.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$c } from "../../../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$9 } from "../../../InlineStack/InlineStack.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$5 } from "../../../Modal/Modal.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$6 } from "../../../Modal/components/Section/Section.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../../Popover/Popover.vue_vue_type_script_setup_true_lang.js";
import { s as styles } from "../../Tabs.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "./components/DuplicateModal/DuplicateModal.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "./components/RenameModal/RenameModal.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$a } from "../../../Text/Text.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$7 } from "../../../UnstyledLink/UnstyledLink.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Tab",
  props: {
    id: {},
    content: {},
    panelID: {},
    accessibilityLabel: {},
    badge: {},
    url: {},
    isLocked: { type: Boolean },
    disabled: { type: Boolean },
    actions: {},
    viewNames: {},
    isModalLoading: { type: Boolean },
    focused: { type: Boolean },
    siblingTabHasFocus: { type: Boolean },
    selected: { type: Boolean },
    measuring: { type: Boolean },
    tabIndexOverride: {},
    disclosureZIndexOverride: {}
  },
  emits: ["tab-action", "focus", "toggle-popover", "toggle-modal"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const i18n = useI18n();
    const currentInstance = getCurrentInstance();
    const { hasSlot } = useHasSlot();
    const popoverActive = ref(false);
    const activeModalType = ref(null);
    const wasSelected = ref(props.selected);
    const panelFocused = ref(false);
    const nodeRef = ref(null);
    const hasTogglePopover = computed(() => {
      var _a;
      return Boolean((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onTogglePopover);
    });
    const hasToggleModal = computed(() => {
      var _a;
      return Boolean((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onTogglerModal);
    });
    const tabIndex = computed(() => {
      if (props.tabIndexOverride != null) {
        return props.tabIndexOverride;
      }
      if (props.selected && !props.siblingTabHasFocus && !props.measuring) {
        return 0;
      } else if (props.focused && !props.measuring) {
        return 0;
      }
      return -1;
    });
    const renameAction = computed(
      () => {
        var _a;
        return (_a = props.actions) == null ? void 0 : _a.find((action) => action.type === "rename");
      }
    );
    const duplicateAction = computed(
      () => {
        var _a;
        return (_a = props.actions) == null ? void 0 : _a.find(
          (action) => action.type === "duplicate"
        );
      }
    );
    const deleteAction = computed(
      () => {
        var _a;
        return (_a = props.actions) == null ? void 0 : _a.find(
          (action) => action.type === "delete"
        );
      }
    );
    const actionContent = computed(() => ({
      rename: {
        icon: InfoIcon,
        content: i18n.translate("Polaris.Tabs.Tab.rename")
      },
      duplicate: {
        icon: DuplicateIcon,
        content: i18n.translate("Polaris.Tabs.Tab.duplicate")
      },
      edit: {
        icon: EditIcon,
        content: i18n.translate("Polaris.Tabs.Tab.edit")
      },
      "edit-columns": {
        icon: LayoutColumns3Icon,
        content: i18n.translate("Polaris.Tabs.Tab.editColumns")
      },
      delete: {
        icon: DeleteIcon,
        content: i18n.translate("Polaris.Tabs.Tab.delete"),
        destructive: true
      }
    }));
    const formattedActions = computed(() => {
      var _a;
      return (_a = props.actions) == null ? void 0 : _a.map(
        ({ type, onAction, onPrimaryAction, ...additionalOptions }) => {
          const isModalActivator = !type.includes("edit");
          return {
            ...actionContent.value[type],
            ...additionalOptions,
            onAction: () => {
              onAction == null ? void 0 : onAction(props.content);
              togglePopoverActive();
              if (isModalActivator) {
                handleModalOpen(type);
              }
            }
          };
        }
      );
    });
    const tabContainerClassNames = computed(() => classNames(
      styles.TabContainer,
      props.selected && styles.Underline
    ));
    const urlIfNotDisabledOrSelected = computed(
      () => props.disabled || props.selected ? void 0 : props.url
    );
    const tabClassName = computed(() => {
      var _a;
      return classNames(
        styles.Tab,
        hasSlot(slots.icon) && styles["Tab-iconOnly"],
        popoverActive.value && styles["Tab-popoverActive"],
        props.selected && styles["Tab-active"],
        props.selected && ((_a = props.actions) == null ? void 0 : _a.length) && styles["Tab-hasActions"]
      );
    });
    const isPlainButton = computed(() => {
      var _a;
      return !props.selected || !((_a = props.actions) == null ? void 0 : _a.length);
    });
    const focusPanelID = (panelID) => {
      const panel = document.getElementById(panelID);
      if (panel) {
        panel.focus({ preventScroll: true });
      }
    };
    const togglePopoverActive = () => {
      var _a;
      if (!((_a = props.actions) == null ? void 0 : _a.length)) {
        return;
      }
      popoverActive.value = !popoverActive.value;
    };
    const handleClick = () => {
      if (props.disabled) {
        return;
      }
      if (props.selected) {
        togglePopoverActive();
      } else {
        emits("tab-action");
      }
    };
    const handleModalOpen = (type) => {
      activeModalType.value = type;
    };
    const handleModalClose = () => {
      activeModalType.value = null;
    };
    const handleSaveRenameModal = async (value) => {
      var _a, _b;
      await ((_b = (_a = renameAction.value) == null ? void 0 : _a.onPrimaryAction) == null ? void 0 : _b.call(_a, value));
      setTimeout(() => {
        if (nodeRef.value) {
          focusFirstFocusableNode(nodeRef.value);
        }
      }, 250);
    };
    const handleConfirmDeleteView = async () => {
      var _a, _b;
      await ((_b = (_a = deleteAction.value) == null ? void 0 : _a.onPrimaryAction) == null ? void 0 : _b.call(_a, props.content));
      handleModalClose();
    };
    const handleSaveDuplicateModal = async (duplicateName) => {
      var _a, _b;
      await ((_b = (_a = duplicateAction.value) == null ? void 0 : _a.onPrimaryAction) == null ? void 0 : _b.call(_a, duplicateName));
    };
    const handleKeyDown = (event) => {
      if (event.key === " ") {
        event.preventDefault();
        handleClick();
      }
    };
    const activator = () => {
      return h(
        urlIfNotDisabledOrSelected.value ? _sfc_main$7 : _sfc_main$8,
        {
          id: props.id,
          className: tabClassName.value,
          tabIndex,
          "aria-selected": props.selected,
          "aria-controls": props.panelID,
          "aria-label": props.accessibilityLabel,
          role: props.tabIndexOverride == null ? "tab" : void 0,
          disabled: props.disabled,
          url: urlIfNotDisabledOrSelected.value,
          onFocus: () => emits("focus"),
          onMouseUp: handleMouseUpByBlurring,
          onClick: handleClick,
          onKeyDown: handleKeyDown
        },
        () => {
          var _a;
          return [
            h(
              _sfc_main$9,
              {
                gap: "200",
                align: "center",
                blockAlign: "center",
                wrap: false
              },
              () => [
                h(
                  _sfc_main$a,
                  {
                    as: "span",
                    variant: "bodySm",
                    fontWeight: "medium"
                  },
                  {
                    default: () => hasSlot(slots.icon) ? slots.icon() : props.content
                  }
                ),
                props.badge ? h(
                  _sfc_main$b,
                  { tone: props.selected ? void 0 : "new" },
                  { default: () => props.badge }
                ) : null
              ]
            ),
            props.selected && ((_a = props.actions) == null ? void 0 : _a.length) ? h(
              "div",
              { class: classNames(styles.IconWrap) },
              h(_sfc_main$c, { source: ChevronDownIcon })
            ) : null
          ];
        }
      );
    };
    watch(
      () => [popoverActive.value, hasTogglePopover.value],
      () => {
        emits("toggle-popover", popoverActive.value);
      }
    );
    watch(
      () => [activeModalType.value, hasToggleModal.value],
      () => {
        emits("toggle-modal", Boolean(activeModalType.value));
      }
    );
    watch(
      () => [hasTogglePopover.value, hasToggleModal.value],
      () => {
        return () => {
          emits("toggle-popover", false);
          emits("toggle-modal", false);
        };
      }
    );
    watch(
      () => [
        props.focused,
        props.id,
        props.content,
        props.measuring,
        props.panelID,
        props.selected,
        props.disabled,
        activeModalType.value
      ],
      () => {
        if (props.measuring) {
          return;
        }
        const itemHadFocus = props.focused || document.activeElement && document.activeElement.id === props.id;
        if (itemHadFocus && props.selected && props.panelID != null && !panelFocused.value) {
          focusPanelID(props.panelID);
          panelFocused.value = true;
        }
        if (props.selected && !wasSelected.value && props.panelID != null) {
          focusPanelID(props.panelID);
        } else if (props.focused && nodeRef.value != null && activeModalType == null && !props.disabled) {
          focusFirstFocusableNode(nodeRef.value);
        }
        wasSelected.value = props.selected;
      },
      { immediate: true }
    );
    return (_ctx, _cache) => {
      return unref(hasSlot)(slots.icon) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        isPlainButton.value || _ctx.disabled ? (openBlock(), createBlock(activator, { key: 0 })) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createVNode(unref(_sfc_main$1), {
            autofocusTarget: "first-node",
            active: popoverActive.value,
            onClose: togglePopoverActive
          }, {
            activator: withCtx(() => [
              createVNode(activator)
            ]),
            default: withCtx(() => [
              createElementVNode("div", {
                class: normalizeClass(unref(styles).ActionListWrap)
              }, [
                createVNode(unref(_sfc_main$2), {
                  actionRole: "menuitem",
                  items: formattedActions.value
                }, null, 8, ["items"])
              ], 2)
            ]),
            _: 1
          }, 8, ["active"]),
          renameAction.value ? (openBlock(), createBlock(unref(_sfc_main$3), {
            key: 0,
            name: _ctx.content,
            open: activeModalType.value === "rename",
            isModalLoading: _ctx.isModalLoading,
            viewNames: _ctx.viewNames,
            onClose: handleModalClose,
            onClickPrimaryAction: handleSaveRenameModal
          }, null, 8, ["name", "open", "isModalLoading", "viewNames"])) : createCommentVNode("", true),
          createElementVNode("div", null, toDisplayString(unref(i18n).translate("Polaris.Tabs.Tab.copy", { name: _ctx.content })), 1),
          duplicateAction.value ? (openBlock(), createBlock(unref(_sfc_main$4), {
            key: 1,
            open: activeModalType.value === "duplicate",
            name: unref(i18n).translate("Polaris.Tabs.Tab.copy", { name: _ctx.content }),
            isModalLoading: _ctx.isModalLoading,
            viewNames: _ctx.viewNames || [],
            onClose: handleModalClose,
            onClickPrimaryAction: handleSaveDuplicateModal
          }, null, 8, ["open", "name", "isModalLoading", "viewNames"])) : createCommentVNode("", true),
          deleteAction.value ? (openBlock(), createBlock(unref(_sfc_main$5), {
            key: 2,
            open: activeModalType.value === "delete",
            primaryAction: {
              content: unref(i18n).translate("Polaris.Tabs.Tab.deleteModal.delete"),
              destructive: true,
              disabled: _ctx.isModalLoading,
              onAction: handleConfirmDeleteView
            },
            secondaryActions: [{
              content: unref(i18n).translate("Polaris.Tabs.Tab.deleteModal.cancel"),
              onAction: handleModalClose
            }],
            onClose: handleModalClose
          }, {
            title: withCtx(() => [
              createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Tabs.Tab.deleteModal.title")), 1)
            ]),
            default: withCtx(() => [
              createVNode(unref(_sfc_main$6), null, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Tabs.Tab.deleteModal.description", { viewName: _ctx.content })), 1)
                ]),
                _: 1
              })
            ]),
            _: 1
          }, 8, ["open", "primaryAction", "secondaryActions"])) : createCommentVNode("", true)
        ], 64))
      ], 64)) : (openBlock(), createElementBlock("li", {
        key: 1,
        ref_key: "nodeRef",
        ref: nodeRef,
        role: "presentation",
        class: normalizeClass(tabContainerClassNames.value)
      }, [
        isPlainButton.value || _ctx.disabled ? (openBlock(), createBlock(activator, { key: 0 })) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createVNode(unref(_sfc_main$1), {
            autofocusTarget: "first-node",
            active: popoverActive.value,
            "z-index-override": _ctx.disclosureZIndexOverride,
            onClose: togglePopoverActive
          }, {
            activator: withCtx(() => [
              createVNode(activator)
            ]),
            default: withCtx(() => [
              createElementVNode("div", {
                class: normalizeClass(unref(styles).ActionListWrap)
              }, [
                createVNode(unref(_sfc_main$2), {
                  actionRole: "menuitem",
                  items: formattedActions.value
                }, null, 8, ["items"])
              ], 2)
            ]),
            _: 1
          }, 8, ["active", "z-index-override"]),
          renameAction.value ? (openBlock(), createBlock(unref(_sfc_main$3), {
            key: 0,
            name: _ctx.content,
            open: activeModalType.value === "rename",
            isModalLoading: _ctx.isModalLoading,
            viewNames: _ctx.viewNames,
            onClose: handleModalClose,
            onClickPrimaryAction: handleSaveRenameModal
          }, null, 8, ["name", "open", "isModalLoading", "viewNames"])) : createCommentVNode("", true),
          duplicateAction.value ? (openBlock(), createBlock(unref(_sfc_main$4), {
            key: 1,
            open: activeModalType.value === "duplicate",
            name: unref(i18n).translate("Polaris.Tabs.Tab.copy", { name: _ctx.content }),
            isModalLoading: _ctx.isModalLoading,
            viewNames: _ctx.viewNames || [],
            onClose: handleModalClose,
            onClickPrimaryAction: handleSaveDuplicateModal
          }, null, 8, ["open", "name", "isModalLoading", "viewNames"])) : createCommentVNode("", true),
          deleteAction.value ? (openBlock(), createBlock(unref(_sfc_main$5), {
            key: 2,
            open: activeModalType.value === "delete",
            primaryAction: {
              content: unref(i18n).translate("Polaris.Tabs.Tab.deleteModal.delete"),
              destructive: true,
              disabled: _ctx.isModalLoading,
              onAction: handleConfirmDeleteView
            },
            secondaryActions: [{
              content: unref(i18n).translate("Polaris.Tabs.Tab.deleteModal.cancel"),
              onAction: handleModalClose
            }],
            onClose: handleModalClose
          }, {
            title: withCtx(() => [
              createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Tabs.Tab.deleteModal.title")), 1)
            ]),
            default: withCtx(() => [
              createVNode(unref(_sfc_main$6), null, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Tabs.Tab.deleteModal.description", { viewName: _ctx.content })), 1)
                ]),
                _: 1
              })
            ]),
            _: 1
          }, 8, ["open", "primaryAction", "secondaryActions"])) : createCommentVNode("", true)
        ], 64))
      ], 2));
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Tab.vue_vue_type_script_setup_true_lang.js.map
