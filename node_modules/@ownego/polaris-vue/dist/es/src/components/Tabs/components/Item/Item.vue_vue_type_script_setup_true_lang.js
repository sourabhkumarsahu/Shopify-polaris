import { defineComponent, ref, watch, computed, openBlock, createElementBlock, createBlock, unref, mergeProps, withCtx, renderSlot } from "vue";
import { c as classNames } from "../../../../utilities/css.js";
import { _ as _sfc_main$1 } from "../../../UnstyledLink/UnstyledLink.vue_vue_type_script_setup_true_lang.js";
import { s as styles } from "../../Tabs.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Item",
  props: {
    id: {},
    focused: { type: Boolean },
    url: {},
    accessibilityLabel: {}
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    const props = __props;
    const focusedNode = ref(null);
    watch(
      () => props.focused,
      () => {
        const focusTarget = focusedNode.value;
        if (focusTarget && focusTarget instanceof HTMLElement && props.focused) {
          requestAnimationFrame(() => {
            focusTarget.focus();
          });
        }
      }
    );
    const buttonClass = computed(() => classNames(styles.Item));
    const sharedProps = computed(() => ({
      id: props.id,
      className: buttonClass.value,
      "aria-selected": false,
      "aria-label": props.accessibilityLabel
    }));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("li", null, [
        _ctx.url ? (openBlock(), createBlock(unref(_sfc_main$1), mergeProps({ key: 0 }, sharedProps.value, {
          ref_key: "focusedNode",
          ref: focusedNode,
          url: _ctx.url,
          onClick: _cache[0] || (_cache[0] = ($event) => emits("click"))
        }), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, ["url"])) : (openBlock(), createElementBlock("button", mergeProps({ key: 1 }, sharedProps.value, {
          ref_key: "focusedNode",
          ref: focusedNode,
          type: "button",
          onClick: _cache[1] || (_cache[1] = ($event) => emits("click"))
        }), [
          renderSlot(_ctx.$slots, "default")
        ], 16))
      ]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Item.vue_vue_type_script_setup_true_lang.js.map
