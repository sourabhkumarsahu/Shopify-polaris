{"version":3,"file":"TabMeasurer.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../../../src/components/Tabs/components/TabMeasurer/TabMeasurer.vue"],"sourcesContent":["<template lang=\"pug\">\ndiv(:class=\"classname\", ref=\"containerNode\")\n  Tab(\n    v-for=\"tab, index in tabs\",\n    :measuring=\"true\",\n    :key=\"`${tab.id}Hidden`\",\n    :id=\"`${tab.id}`\",\n    :siblingTabHasFocus=\"siblingTabHasFocus\",\n    :focused=\"index === tabToFocus\",\n    :selected=\"index === selected\",\n    :url=\"tab.url\",\n    :content=\"tab.content\",\n  )\n  slot\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, onMounted, ref } from 'vue';\nimport type { VueNode } from '@/utilities/types';\nimport { classNames } from '@/utilities/css';\nimport { useEventListener } from '@/utilities/use-event-listener';\nimport styles from '@polaris/components/Tabs/Tabs.module.css';\nimport type { TabMeasurements, TabProps } from '../../types';\nimport { Tab } from '../index';\n\nexport interface TabMeasurerProps {\n  tabToFocus: number;\n  siblingTabHasFocus: boolean;\n  selected: number;\n  tabs: Omit<TabProps, 'onToggleModal' | 'onTogglePopover'>[];\n}\n\ndefineProps<TabMeasurerProps>();\n\nconst slots = defineSlots<{\n  /** activator elements to display inside the tag*/\n  default: (_?: VueNode) => any;\n}>();\n\nconst emits = defineEmits<{\n  'measurement': [measurements: TabMeasurements];\n}>();\n\nconst containerNode = ref<HTMLDivElement | null>(null);\nconst animationFrame = ref<number | null>(null);\n\nconst classname = computed(() => classNames(styles.Tabs, styles.TabsMeasurer));\n\nconst handleMeasurement = () => {\n  if (animationFrame.value) {\n    cancelAnimationFrame(animationFrame.value);\n  }\n\n  animationFrame.value = requestAnimationFrame(() => {\n    if (!containerNode.value) {\n      return;\n    }\n\n    const containerWidth = containerNode.value.offsetWidth - 20 - 28;\n    const hiddenTabNodes = containerNode.value.children;\n    const hiddenTabNodesArray = Array.from(hiddenTabNodes);\n    const hiddenTabWidths = hiddenTabNodesArray.map((node) => {\n      const buttonWidth = Math.ceil(node.getBoundingClientRect().width);\n      return buttonWidth + 4;\n    });\n    const disclosureWidth = hiddenTabWidths.pop() || 0;\n\n    emits('measurement', {\n      containerWidth,\n      disclosureWidth,\n      hiddenTabWidths,\n    });\n  });\n};\n\nonMounted(() => {\n  handleMeasurement();\n});\n\nuseEventListener('resize', handleMeasurement);\n</script>\n"],"names":["_useSlots"],"mappings":";;;;;;;;;;;;;;;;;;;;AAkCcA;AAKd,UAAM,QAAQ;AAIR,UAAA,gBAAgB,IAA2B,IAAI;AAC/C,UAAA,iBAAiB,IAAmB,IAAI;AAExC,UAAA,YAAY,SAAS,MAAM,WAAW,OAAO,MAAM,OAAO,YAAY,CAAC;AAE7E,UAAM,oBAAoB,MAAM;AAC9B,UAAI,eAAe,OAAO;AACxB,6BAAqB,eAAe,KAAK;AAAA,MAC3C;AAEe,qBAAA,QAAQ,sBAAsB,MAAM;AAC7C,YAAA,CAAC,cAAc,OAAO;AACxB;AAAA,QACF;AAEA,cAAM,iBAAiB,cAAc,MAAM,cAAc,KAAK;AACxD,cAAA,iBAAiB,cAAc,MAAM;AACrC,cAAA,sBAAsB,MAAM,KAAK,cAAc;AACrD,cAAM,kBAAkB,oBAAoB,IAAI,CAAC,SAAS;AACxD,gBAAM,cAAc,KAAK,KAAK,KAAK,sBAAA,EAAwB,KAAK;AAChE,iBAAO,cAAc;AAAA,QAAA,CACtB;AACK,cAAA,kBAAkB,gBAAgB,IAAA,KAAS;AAEjD,cAAM,eAAe;AAAA,UACnB;AAAA,UACA;AAAA,UACA;AAAA,QAAA,CACD;AAAA,MAAA,CACF;AAAA,IAAA;AAGH,cAAU,MAAM;AACI;IAAA,CACnB;AAED,qBAAiB,UAAU,iBAAiB;;;;;;;;;;;;;;;;;;;;;;;;"}