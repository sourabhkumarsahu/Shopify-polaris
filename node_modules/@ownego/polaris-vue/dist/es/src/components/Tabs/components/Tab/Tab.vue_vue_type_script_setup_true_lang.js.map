{"version":3,"file":"Tab.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../../../src/components/Tabs/components/Tab/Tab.vue"],"sourcesContent":["<template lang=\"pug\">\ntemplate(v-if=\"hasSlot(slots.icon)\")\n  activator(v-if=\"isPlainButton || disabled\")\n  template(v-else)\n    Popover(\n      autofocusTarget=\"first-node\",\n      :active=\"popoverActive\",\n      @close=\"togglePopoverActive\",\n    )\n      template(#activator)\n        activator\n      div(:class=\"styles.ActionListWrap\")\n        ActionList(\n          actionRole=\"menuitem\",\n          :items=\"formattedActions\",\n        )\n    RenameModal(\n      v-if=\"renameAction\",\n      :name=\"content\",\n      :open=\"activeModalType === 'rename'\",\n      :isModalLoading=\"isModalLoading\",\n      :viewNames=\"viewNames\",\n      @close=\"handleModalClose\",\n      @click-primary-action=\"handleSaveRenameModal\",\n    )\n    div {{ i18n.translate('Polaris.Tabs.Tab.copy', { name: content }) }}\n    DuplicateModal(\n      v-if=\"duplicateAction\",\n      :open=\"activeModalType === 'duplicate'\",\n      :name=\"i18n.translate('Polaris.Tabs.Tab.copy', { name: content })\",\n      :isModalLoading=\"isModalLoading\",\n      :viewNames=\"viewNames || []\",\n      @close=\"handleModalClose\",\n      @click-primary-action=\"handleSaveDuplicateModal\",\n    )\n    Modal(\n      v-if=\"deleteAction\",\n      :open=\"activeModalType === 'delete'\",\n      :primaryAction=`{\n        content: i18n.translate('Polaris.Tabs.Tab.deleteModal.delete'),\n        destructive: true,\n        disabled: isModalLoading,\n        onAction: handleConfirmDeleteView,\n      }`,\n      :secondaryActions=`[{\n        content: i18n.translate('Polaris.Tabs.Tab.deleteModal.cancel'),\n        onAction: handleModalClose,\n      }]`,\n      @close=\"handleModalClose\",\n    )\n      template(#title) {{ i18n.translate('Polaris.Tabs.Tab.deleteModal.title') }}\n      ModalSection {{ i18n.translate('Polaris.Tabs.Tab.deleteModal.description',\n        | { viewName: content }) }}\nli(\n  v-else,\n  ref=\"nodeRef\",\n  role=\"presentation\",\n  :class=\"tabContainerClassNames\",\n)\n  activator(v-if=\"isPlainButton || disabled\")\n  template(v-else)\n    Popover(\n      autofocusTarget=\"first-node\",\n      :active=\"popoverActive\",\n      :z-index-override=\"disclosureZIndexOverride\",\n      @close=\"togglePopoverActive\",\n    )\n      template(#activator)\n        activator\n      div(:class=\"styles.ActionListWrap\")\n        ActionList(\n          actionRole=\"menuitem\",\n          :items=\"formattedActions\",\n        )\n    RenameModal(\n      v-if=\"renameAction\",\n      :name=\"content\",\n      :open=\"activeModalType === 'rename'\",\n      :isModalLoading=\"isModalLoading\",\n      :viewNames=\"viewNames\",\n      @close=\"handleModalClose\",\n      @click-primary-action=\"handleSaveRenameModal\",\n    )\n    DuplicateModal(\n      v-if=\"duplicateAction\",\n      :open=\"activeModalType === 'duplicate'\",\n      :name=\"i18n.translate('Polaris.Tabs.Tab.copy', { name: content })\",\n      :isModalLoading=\"isModalLoading\",\n      :viewNames=\"viewNames || []\",\n      @close=\"handleModalClose\",\n      @click-primary-action=\"handleSaveDuplicateModal\",\n    )\n    Modal(\n      v-if=\"deleteAction\",\n      :open=\"activeModalType === 'delete'\",\n      :primaryAction=`{\n        content: i18n.translate('Polaris.Tabs.Tab.deleteModal.delete'),\n        destructive: true,\n        disabled: isModalLoading,\n        onAction: handleConfirmDeleteView,\n      }`,\n      :secondaryActions=`[{\n        content: i18n.translate('Polaris.Tabs.Tab.deleteModal.cancel'),\n        onAction: handleModalClose,\n      }]`,\n      @close=\"handleModalClose\",\n    )\n      template(#title) {{ i18n.translate('Polaris.Tabs.Tab.deleteModal.title') }}\n      ModalSection\n        | {{ i18n.translate('Polaris.Tabs.Tab.deleteModal.description', { viewName: content }) }}\n</template>\n\n<script setup lang=\"ts\">\nimport {\n  computed,\n  ref,\n  getCurrentInstance,\n  watch,\n  h,\n} from 'vue';\nimport useI18n from '@/use/useI18n';\nimport { focusFirstFocusableNode, handleMouseUpByBlurring } from '@/utilities/focus';\nimport { classNames } from '@/utilities/css';\nimport { useHasSlot } from '@/use/useHasSlot';\nimport { Popover, ActionList, Modal, ModalSection, InlineStack, UnstyledButton, UnstyledLink, Icon, Text, Badge } from '@/components';\nimport styles from '@polaris/components/Tabs/Tabs.module.css';\nimport InfoIcon from '@icons/InfoIcon.svg';\nimport DuplicateIcon from '@icons/DuplicateIcon.svg';\nimport EditIcon from '@icons/EditIcon.svg';\nimport LayoutColumns3Icon from '@icons/LayoutColumns3Icon.svg';\nimport DeleteIcon from '@icons/DeleteIcon.svg';\nimport ChevronDownIcon from '@icons/ChevronDownIcon.svg';\nimport { DuplicateModal, RenameModal } from './components';\nimport type { TabAction, TabEvents, TabProps, TabSlots } from '../../types';\n\nconst props = defineProps<TabProps>();\nconst slots = defineSlots<TabSlots>();\nconst emits = defineEmits<TabEvents & {\n  'tab-action': [],\n}>();\n\nconst i18n = useI18n();\nconst currentInstance = getCurrentInstance();\nconst { hasSlot } = useHasSlot();\n\nconst popoverActive = ref<boolean>(false);\nconst activeModalType = ref<TabAction | null>(null);\nconst wasSelected = ref(props.selected);\nconst panelFocused = ref<boolean>(false);\nconst nodeRef = ref<HTMLLIElement | null>(null);\n\nconst hasTogglePopover = computed(() => Boolean(currentInstance?.vnode.props?.onTogglePopover));\nconst hasToggleModal = computed(() => Boolean(currentInstance?.vnode.props?.onTogglerModal));\n\nconst tabIndex = computed(() => {\n  if (props.tabIndexOverride != null) {\n    return props.tabIndexOverride;\n  }\n\n  if (props.selected && !props.siblingTabHasFocus && !props.measuring) {\n    return 0;\n  } else if (props.focused && !props.measuring) {\n    return 0;\n  }\n\n  return -1;\n});\n\nconst renameAction = computed(() =>\n  props.actions?.find((action) => action.type === 'rename')\n);\n\nconst duplicateAction = computed(() => props.actions?.find(\n  (action) => action.type === 'duplicate'),\n);\n\nconst deleteAction = computed(() => props.actions?.find(\n  (action) => action.type === 'delete'),\n);\n\nconst actionContent = computed(() => ({\n  rename: {\n    icon: InfoIcon,\n    content: i18n.translate('Polaris.Tabs.Tab.rename'),\n  },\n  duplicate: {\n    icon: DuplicateIcon,\n    content: i18n.translate('Polaris.Tabs.Tab.duplicate'),\n  },\n  edit: {\n    icon: EditIcon,\n    content: i18n.translate('Polaris.Tabs.Tab.edit'),\n  },\n  'edit-columns': {\n    icon: LayoutColumns3Icon,\n    content: i18n.translate('Polaris.Tabs.Tab.editColumns'),\n  },\n  delete: {\n    icon: DeleteIcon,\n    content: i18n.translate('Polaris.Tabs.Tab.delete'),\n    destructive: true,\n  },\n}));\n\nconst formattedActions = computed(() => props.actions?.map(\n  ({ type, onAction, onPrimaryAction, ...additionalOptions }) => {\n    const isModalActivator = !type.includes('edit');\n\n    return {\n      ...actionContent.value[type],\n      ...additionalOptions,\n      onAction: () => {\n        onAction?.(props.content);\n        togglePopoverActive();\n        if (isModalActivator) {\n          handleModalOpen(type);\n        }\n      },\n    };\n  },\n));\n\nconst tabContainerClassNames = computed(() => classNames(\n  styles.TabContainer,\n  props.selected && styles.Underline,\n));\n\nconst urlIfNotDisabledOrSelected = computed(() =>\n  props.disabled || props.selected ? undefined : props.url,\n);\n\nconst tabClassName = computed(() => classNames(\n  styles.Tab,\n  hasSlot(slots.icon) && styles['Tab-iconOnly'],\n  popoverActive.value && styles['Tab-popoverActive'],\n  props.selected && styles['Tab-active'],\n  props.selected && props.actions?.length && styles['Tab-hasActions'],\n));\n\nconst isPlainButton = computed(() => !props.selected || !props.actions?.length);\n\nconst focusPanelID = (panelID: string) => {\n  const panel = document.getElementById(panelID);\n  if (panel) {\n    panel.focus({ preventScroll: true });\n  }\n};\n\nconst togglePopoverActive = () => {\n  if (!props.actions?.length) {\n    return;\n  }\n  popoverActive.value = !popoverActive.value;\n};\n\nconst handleClick = () => {\n  if (props.disabled) {\n    return;\n  }\n  if (props.selected) {\n    togglePopoverActive();\n  } else {\n    emits('tab-action');\n  }\n};\n\nconst handleModalOpen = (type: TabAction) => {\n  activeModalType.value = type;\n};\n\nconst handleModalClose = () => {\n  activeModalType.value = null;\n};\n\nconst handleSaveRenameModal = async (value: string) => {\n  await renameAction.value?.onPrimaryAction?.(value);\n\n  setTimeout(() => {\n    if (nodeRef.value) {\n      focusFirstFocusableNode(nodeRef.value);\n    }\n  }, 250);\n};\n\nconst handleConfirmDeleteView = async () => {\n  await deleteAction.value?.onPrimaryAction?.(props.content);\n  handleModalClose();\n}\n\nconst handleSaveDuplicateModal = async (duplicateName: string) => {\n  await duplicateAction.value?.onPrimaryAction?.(duplicateName);\n};\n\nconst handleKeyDown = (event: KeyboardEvent) => {\n  if (event.key === ' ') {\n    event.preventDefault();\n    handleClick();\n  }\n};\n\nconst activator = () => {\n  return h(\n    urlIfNotDisabledOrSelected.value\n      ? UnstyledLink\n      : UnstyledButton,\n    {\n      id: props.id,\n      className: tabClassName.value,\n      tabIndex: tabIndex,\n      'aria-selected': props.selected,\n      'aria-controls': props.panelID,\n      'aria-label': props.accessibilityLabel,\n      role: props.tabIndexOverride == null ? 'tab' : undefined,\n      disabled: props.disabled,\n      url: urlIfNotDisabledOrSelected.value,\n      onFocus: () => emits('focus'),\n      onMouseUp: handleMouseUpByBlurring,\n      onClick: handleClick,\n      onKeyDown: handleKeyDown,\n    },\n    () => [\n      h(\n        InlineStack,\n        {\n          gap: '200',\n          align: 'center',\n          blockAlign: 'center',\n          wrap: false,\n        },\n        () => [\n          h(\n            Text,\n            {\n              as: 'span',\n              variant: 'bodySm',\n              fontWeight: 'medium',\n            },\n            {\n              default: () => hasSlot(slots.icon) ? slots.icon() : props.content,\n            },\n          ),\n          props.badge ? h(\n            Badge,\n            { tone: props.selected ? undefined : 'new' },\n            { default: () => props.badge },\n          ) : null,\n        ],\n      ),\n      props.selected && props.actions?.length ? h(\n        'div',\n        { class: classNames(styles.IconWrap) },\n        h(Icon, { source: ChevronDownIcon }),\n      ) : null,\n    ],\n  );\n}\n\nwatch(\n  () => [popoverActive.value, hasTogglePopover.value],\n  () => {\n    emits('toggle-popover', popoverActive.value);\n  },\n);\n\nwatch(\n  () => [activeModalType.value, hasToggleModal.value],\n  () => {\n    emits('toggle-modal', Boolean(activeModalType.value));\n  },\n);\n\nwatch(\n  () => [hasTogglePopover.value, hasToggleModal.value],\n  () => {\n    return () => {\n      emits('toggle-popover', false);\n      emits('toggle-modal', false);\n    };\n  },\n);\n\n// A tab can start selected when it is moved from the disclosure dropdown into the main list,\n// so we need to send focus from the tab to the panel on mount and update\nwatch(\n  () => [\n    props.focused,\n    props.id,\n    props.content,\n    props.measuring,\n    props.panelID,\n    props.selected,\n    props.disabled,\n    activeModalType.value,\n  ],\n  () => {\n    if (props.measuring) {\n      return;\n    }\n\n    // Because of timing issues with the render, we may still have the old,\n    // in-disclosure version of the tab that has focus. Check for this as a second indicator of focus\n    const itemHadFocus =\n      props.focused || (document.activeElement && document.activeElement.id === props.id);\n\n    // If we just check for selected, the panel for the active tab will be focused on page load, which we don’t want\n    if (\n      itemHadFocus &&\n      props.selected &&\n      props.panelID != null &&\n      !panelFocused.value\n    ) {\n      focusPanelID(props.panelID);\n      panelFocused.value = true;\n    }\n\n    if (props.selected && !wasSelected.value && props.panelID != null) {\n      focusPanelID(props.panelID);\n    } else if (\n      props.focused &&\n      nodeRef.value != null &&\n      activeModalType == null &&\n      !props.disabled\n    ) {\n      focusFirstFocusableNode(nodeRef.value);\n    }\n\n    wasSelected.value = props.selected;\n  },\n  { immediate: true },\n);\n</script>\n"],"names":["_useSlots","UnstyledLink","UnstyledButton","InlineStack","Text","Badge","Icon"],"mappings":"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"}