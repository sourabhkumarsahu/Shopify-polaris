import { defineComponent, ref, computed, watch, openBlock, createBlock, unref, withCtx, createTextVNode, toDisplayString, createVNode, createElementVNode } from "vue";
import { u as useI18n } from "../../../../../../use/useI18n.js";
import { f as focusFirstFocusableNode } from "../../../../../../utilities/focus.js";
import { _ as _sfc_main$3 } from "../../../../../Form/Form.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../../../../../FormLayout/FormLayout.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../../../../Modal/Modal.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../../../../../Modal/components/Section/Section.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$5 } from "../../../../../TextField/TextField.vue_vue_type_script_setup_true_lang.js";
const MAX_VIEW_NAME_LENGTH = 40;
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "RenameModal",
  props: {
    open: { type: Boolean },
    isModalLoading: { type: Boolean },
    name: {},
    helpText: {},
    viewNames: {}
  },
  emits: ["close", "click-primary-action", "click-secondary-action", "update:modelValue"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const container = ref(null);
    const modalValue = ref("");
    const model = computed({
      get() {
        return props.open ? props.name : "";
      },
      set(value) {
        modalValue.value = value;
        emits("update:modelValue", value);
      }
    });
    const hasSameNameError = computed(
      () => {
        var _a;
        return (_a = props.viewNames) == null ? void 0 : _a.filter((viewName) => viewName !== props.name).some(
          (viewName) => viewName.trim().toLowerCase() === modalValue.value.trim().toLowerCase()
        );
      }
    );
    const isPrimaryActionDisabled = computed(
      () => props.isModalLoading || hasSameNameError.value || modalValue.value === props.name || !modalValue.value || modalValue.value.length > MAX_VIEW_NAME_LENGTH
    );
    const primaryAction = computed(() => ({
      content: i18n.translate("Polaris.Tabs.RenameModal.create"),
      onAction: handlePrimaryAction,
      disabled: isPrimaryActionDisabled.value
    }));
    const secondaryActions = computed(() => [
      {
        content: i18n.translate("Polaris.Tabs.RenameModal.cancel"),
        onAction: handleSecondaryAction
      }
    ]);
    const errorMessage = computed(
      () => hasSameNameError.value ? i18n.translate(
        "Polaris.Tabs.RenameModal.errors.sameName",
        { name: modalValue.value }
      ) : void 0
    );
    watch(
      () => props.open,
      (newVal) => {
        if (!container.value)
          return;
        if (newVal) {
          focusFirstFocusableNode(container.value);
        }
      },
      {
        flush: "post"
      }
    );
    const handlePrimaryAction = async () => {
      if (isPrimaryActionDisabled.value) {
        return;
      }
      await emits("click-primary-action", modalValue.value);
      model.value = "";
      emits("close");
    };
    const handleSecondaryAction = () => {
      emits("click-secondary-action");
      model.value = props.name;
      emits("close");
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        open: _ctx.open,
        primaryAction: primaryAction.value,
        secondaryActions: secondaryActions.value,
        onClose: _cache[1] || (_cache[1] = ($event) => emits("close"))
      }, {
        title: withCtx(() => [
          createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Tabs.RenameModal.title")), 1)
        ]),
        default: withCtx(() => [
          createVNode(unref(_sfc_main$2), null, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$3), { onSubmit: handlePrimaryAction }, {
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$4), null, {
                    default: withCtx(() => [
                      createElementVNode("div", {
                        ref_key: "container",
                        ref: container
                      }, [
                        createVNode(unref(_sfc_main$5), {
                          modelValue: model.value,
                          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
                          autoComplete: "off",
                          label: unref(i18n).translate("Polaris.Tabs.RenameModal.label"),
                          helpText: _ctx.helpText,
                          maxLength: MAX_VIEW_NAME_LENGTH,
                          showCharacterCount: true,
                          error: errorMessage.value
                        }, null, 8, ["modelValue", "label", "helpText", "error"])
                      ], 512)
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              })
            ]),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["open", "primaryAction", "secondaryActions"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=RenameModal.vue_vue_type_script_setup_true_lang.js.map
