import { defineComponent, useSlots, getCurrentInstance, ref, reactive, computed, onMounted, watch, openBlock, createElementBlock, normalizeClass, unref, createVNode, withCtx, createElementVNode, Fragment, renderList, createBlock, mergeProps, createCommentVNode, renderSlot, h } from "vue";
import { u as useBreakpoints } from "../../use/useBreakpoints.js";
import { u as useI18n } from "../../use/useI18n.js";
import { u as useHasSlot } from "../../use/useHasSlot.js";
import { c as classNames } from "../../utilities/css.js";
import { _ as _sfc_main$1 } from "../Box/Box.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$a } from "../UnstyledButton/UnstyledButton.vue_vue_type_script_setup_true_lang.js";
import { P as PlusIcon, g as ChevronDownIcon } from "../../../vendor.js";
import { _ as _sfc_main$7 } from "../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../Popover/Popover.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "./components/Tab/Tab.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$6 } from "./components/CreateViewModal/CreateViewModal.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "./components/TabMeasurer/TabMeasurer.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$9 } from "./components/Panel/Panel.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$5 } from "./components/List/List.vue_vue_type_script_setup_true_lang.js";
import { g as getVisibleAndHiddenTabIndices } from "./utilities.js";
import { _ as _sfc_main$b } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$8 } from "../Tooltip/Tooltip.vue_vue_type_script_setup_true_lang.js";
const Outer = "Polaris-Tabs__Outer";
const Wrapper = "Polaris-Tabs__Wrapper";
const WrapperWithNewButton = "Polaris-Tabs__WrapperWithNewButton";
const ButtonWrapper = "Polaris-Tabs__ButtonWrapper";
const Tabs = "Polaris-Tabs";
const Tab = "Polaris-Tabs__Tab";
const fillSpace = "Polaris-Tabs--fillSpace";
const TabContainer = "Polaris-Tabs__TabContainer";
const fitted = "Polaris-Tabs--fitted";
const titleWithIcon = "Polaris-Tabs--titleWithIcon";
const List = "Polaris-Tabs__List";
const Item = "Polaris-Tabs__Item";
const DisclosureTab = "Polaris-Tabs__DisclosureTab";
const DisclosureActivator = "Polaris-Tabs__DisclosureActivator";
const TabsMeasurer = "Polaris-Tabs__TabsMeasurer";
const NewTab = "Polaris-Tabs__NewTab";
const ActionListWrap = "Polaris-Tabs__ActionListWrap";
const Panel = "Polaris-Tabs__Panel";
const styles = {
  Outer,
  Wrapper,
  WrapperWithNewButton,
  ButtonWrapper,
  Tabs,
  Tab,
  "Tab-active": "Polaris-Tabs__Tab--active",
  "Tab-hasActions": "Polaris-Tabs__Tab--hasActions",
  "Tab-iconOnly": "Polaris-Tabs__Tab--iconOnly",
  fillSpace,
  TabContainer,
  fitted,
  titleWithIcon,
  List,
  Item,
  DisclosureTab,
  "DisclosureTab-visible": "Polaris-Tabs__DisclosureTab--visible",
  DisclosureActivator,
  TabsMeasurer,
  NewTab,
  ActionListWrap,
  Panel,
  "Panel-hidden": "Polaris-Tabs__Panel--hidden"
};
const _hoisted_1 = ["role"];
const _hoisted_2 = { key: 1 };
const CREATE_NEW_VIEW_ID = "create-new-view";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Tabs",
  props: {
    tabs: {},
    selected: {},
    disabled: { type: Boolean },
    canCreateNewView: { type: Boolean },
    newViewAccessibilityLabel: {},
    fitted: { type: Boolean },
    disclosureText: {},
    disclosureZIndexOverride: {}
  },
  emits: ["select", "create-new-view"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const i18n = useI18n();
    const breakpoints = useBreakpoints();
    const currentInstance = getCurrentInstance();
    const { hasSlot } = useHasSlot();
    const scrollRef = ref(null);
    const wrapRef = ref(null);
    const selectedTabRef = ref(null);
    const state = reactive({
      disclosureWidth: 0,
      containerWidth: Infinity,
      tabWidths: [],
      visibleTabs: [],
      hiddenTabs: [],
      showDisclosure: false,
      tabToFocus: -1,
      isNewViewModalActive: false,
      modalSubmitted: false,
      isTabsFocused: false,
      isTabPopoverOpen: false,
      isTabModalOpen: false
    });
    const prevModalOpen = ref(false);
    const prevPopoverOpen = ref(false);
    const createViewA11yLabel = computed(
      () => props.newViewAccessibilityLabel || i18n.translate("Polaris.Tabs.newViewAccessibilityLabel")
    );
    const tabsToShow = computed(
      () => breakpoints.value.mdDown ? [...state.visibleTabs, ...state.hiddenTabs] : state.visibleTabs
    );
    const tabData = computed(
      () => tabsToShow.value.sort((tabA, tabB) => tabA - tabB).filter((tabIndex) => props.tabs[tabIndex])
    );
    const disclosureActivatorVisible = computed(
      () => state.visibleTabs.length < props.tabs.length && !breakpoints.value.mdDown
    );
    const classname = computed(() => classNames(
      styles.Tabs,
      props.fitted && styles.fitted,
      disclosureActivatorVisible.value && styles.fillSpace
    ));
    const wrapperClassNames = computed(() => classNames(
      styles.Wrapper,
      props.canCreateNewView && styles.WrapperWithNewButton
    ));
    const disclosureTabClassName = computed(() => classNames(
      styles.DisclosureTab,
      disclosureActivatorVisible.value && styles["DisclosureTab-visible"]
    ));
    const disclosureTabs = computed(
      () => state.hiddenTabs.map((tabIndex) => props.tabs[tabIndex])
    );
    const viewNames = computed(() => props.tabs.map(({ content }) => content));
    const handleTogglePopover = (isOpen) => {
      state.isTabPopoverOpen = isOpen;
    };
    const handleToggleModal = (isOpen) => {
      state.isTabModalOpen = isOpen;
    };
    const handleCloseNewViewModal = () => {
      state.isNewViewModalActive = false;
    };
    const handleSaveNewViewModal = (value) => {
      var _a;
      if (!((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onCreateNewView)) {
        return false;
      }
      emits("create-new-view", value);
      state.modalSubmitted = true;
      return value;
    };
    const handleClickNewTab = () => {
      state.isNewViewModalActive = true;
    };
    const handleTabClick = (id) => {
      var _a;
      const tab = props.tabs.find((aTab) => aTab.id === id);
      if (tab == null) {
        return;
      }
      const selectedIndex = props.tabs.indexOf(tab);
      ((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onSelect) && emits("select", selectedIndex);
    };
    const handleFocus = (event) => {
      const target = event.target;
      const isItem = target.classList.contains(styles.Item);
      const isInNaturalDOMOrder = target.closest(`[data-tabs-focus-catchment]`) || isItem;
      const isDisclosureActivator = target.classList.contains(
        styles.DisclosureActivator
      );
      if (isDisclosureActivator || !isInNaturalDOMOrder) {
        return;
      }
      state.isTabsFocused = true;
    };
    const handleBlur = (event) => {
      var _a, _b, _c;
      const target = event.target;
      const relatedTarget = event.relatedTarget;
      const isInNaturalDOMOrder = (_a = relatedTarget == null ? void 0 : relatedTarget.closest) == null ? void 0 : _a.call(relatedTarget, `.${styles.Tabs}`);
      const targetIsATab = (_c = (_b = target == null ? void 0 : target.classList) == null ? void 0 : _b.contains) == null ? void 0 : _c.call(_b, styles.Tab);
      const focusReceiverIsAnItem = relatedTarget == null ? void 0 : relatedTarget.classList.contains(styles.Item);
      if (!relatedTarget && !state.isTabModalOpen && !targetIsATab && !focusReceiverIsAnItem || !isInNaturalDOMOrder && !state.isTabModalOpen && !targetIsATab && !focusReceiverIsAnItem) {
        state.tabToFocus = -1;
        return;
      }
      state.isTabsFocused = false;
    };
    const handleKeyDown = (event) => {
      if (state.isTabPopoverOpen || state.isTabModalOpen || state.isNewViewModalActive) {
        return;
      }
      const { key } = event;
      if (key === "ArrowLeft" || key === "ArrowRight") {
        event.preventDefault();
        event.stopPropagation();
      }
    };
    const moveToSelectedTab = () => {
      var _a;
      const activeButton = (_a = selectedTabRef.value) == null ? void 0 : _a.querySelector(
        `.${styles["Tab-active"]}`
      );
      if (activeButton) {
        moveToActiveTab(activeButton.offsetLeft);
      }
    };
    const handleKeyPress = (event) => {
      if (state.isTabModalOpen || state.isTabPopoverOpen || state.isNewViewModalActive) {
        return;
      }
      const key = event.key;
      const tabsArrayInOrder = state.showDisclosure || breakpoints.value.mdDown ? state.visibleTabs.concat(state.hiddenTabs) : [...state.visibleTabs];
      let newFocus = tabsArrayInOrder.indexOf(state.tabToFocus);
      if (key === "ArrowRight") {
        newFocus += 1;
        if (newFocus === tabsArrayInOrder.length) {
          newFocus = 0;
        }
      }
      if (key === "ArrowLeft") {
        if (newFocus === -1 || newFocus === 0) {
          newFocus = tabsArrayInOrder.length - 1;
        } else {
          newFocus -= 1;
        }
      }
      const buttonToFocus = tabsArrayInOrder[newFocus];
      if (buttonToFocus != null) {
        state.tabToFocus = buttonToFocus;
      }
    };
    const handleDisclosureActivatorClick = () => {
      state.showDisclosure = !state.showDisclosure;
      state.tabToFocus = state.hiddenTabs[0];
    };
    const handleClose = () => {
      state.showDisclosure = false;
    };
    const handleMeasurement = (measurements) => {
      const {
        hiddenTabWidths: tabWidths,
        containerWidth,
        disclosureWidth
      } = measurements;
      const { visibleTabs, hiddenTabs } = getVisibleAndHiddenTabIndices(
        props.tabs,
        props.selected,
        disclosureWidth,
        tabWidths,
        containerWidth
      );
      state.visibleTabs = visibleTabs;
      state.hiddenTabs = hiddenTabs;
      state.disclosureWidth = disclosureWidth;
      state.containerWidth = containerWidth;
      state.tabWidths = tabWidths;
    };
    const handleListTabClick = (id) => {
      handleTabClick(id);
      handleClose();
      state.isTabsFocused = true;
    };
    const moveToActiveTab = (offsetLeft) => {
      setTimeout(() => {
        var _a, _b;
        if (scrollRef.value && typeof scrollRef.value.scroll === "function") {
          const scrollRefOffset = ((_a = wrapRef == null ? void 0 : wrapRef.value) == null ? void 0 : _a.offsetLeft) || 0;
          (_b = scrollRef == null ? void 0 : scrollRef.value) == null ? void 0 : _b.scroll({
            left: offsetLeft - scrollRefOffset
          });
        }
      }, 0);
    };
    const handleTabFocus = () => {
      if (state.modalSubmitted) {
        state.tabToFocus = props.selected;
        state.modalSubmitted = false;
      }
    };
    onMounted(() => {
      prevModalOpen.value = state.isTabModalOpen;
      prevPopoverOpen.value = state.isTabPopoverOpen;
    });
    watch(
      () => [
        prevPopoverOpen.value,
        state.isTabPopoverOpen,
        prevModalOpen.value,
        state.isTabModalOpen,
        props.selected,
        state.tabToFocus
      ],
      () => {
        const hasModalClosed = prevModalOpen.value && !state.isTabModalOpen;
        const hasPopoverClosed = prevPopoverOpen.value && !state.isTabPopoverOpen;
        if (hasModalClosed) {
          state.isTabsFocused = true;
          state.tabToFocus = props.selected;
        } else if (hasPopoverClosed && !state.isTabModalOpen) {
          state.isTabsFocused = true;
          state.tabToFocus = props.selected;
        }
      }
    );
    watch(
      () => [
        state.containerWidth,
        state.disclosureWidth,
        props.tabs,
        props.selected,
        state.tabWidths
      ],
      () => {
        const { visibleTabs, hiddenTabs } = getVisibleAndHiddenTabIndices(
          props.tabs,
          props.selected,
          state.disclosureWidth,
          state.tabWidths,
          state.containerWidth
        );
        state.visibleTabs = visibleTabs;
        state.hiddenTabs = hiddenTabs;
      },
      { immediate: true }
    );
    watch(
      () => [
        props.selected,
        breakpoints.value.mdDown
      ],
      () => {
        if (breakpoints.value.mdDown) {
          moveToSelectedTab();
        }
      }
    );
    watch(
      () => [
        state.isTabsFocused,
        props.selected,
        state.showDisclosure
      ],
      () => {
        if (state.isTabsFocused && !state.showDisclosure) {
          state.tabToFocus = props.selected;
        }
      }
    );
    const activator = () => h(
      _sfc_main$a,
      {
        type: "button",
        className: classNames(styles.DisclosureActivator),
        disabled: props.disabled,
        "aria-label": props.disclosureText ?? i18n.translate("Polaris.Tabs.toggleTabsLabel"),
        onClick: handleDisclosureActivatorClick
      },
      () => [
        h(
          _sfc_main$b,
          { as: "span", variant: "bodySm", fontWeight: "medium" },
          () => props.disclosureText ?? i18n.translate("Polaris.Tabs.toggleTabsLabel")
        ),
        h(
          "div",
          {
            class: classNames(
              styles.IconWrap,
              disclosureActivatorVisible.value && state.showDisclosure && styles["IconWrap-open"]
            )
          },
          h(
            _sfc_main$7,
            { source: ChevronDownIcon, tone: "subdued" }
          )
        )
      ]
    );
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles).Outer)
      }, [
        createVNode(unref(_sfc_main$1), { padding: { md: "200" } }, {
          default: withCtx(() => [
            createVNode(unref(_sfc_main$2), {
              tabToFocus: state.tabToFocus,
              selected: _ctx.selected,
              tabs: _ctx.tabs,
              siblingTabHasFocus: state.tabToFocus > -1,
              onMeasurement: handleMeasurement
            }, {
              default: withCtx(() => [
                createVNode(activator)
              ]),
              _: 1
            }, 8, ["tabToFocus", "selected", "tabs", "siblingTabHasFocus"]),
            createElementVNode("div", {
              ref_key: "scrollRef",
              ref: scrollRef,
              class: normalizeClass(wrapperClassNames.value)
            }, [
              createElementVNode("div", {
                ref_key: "wrapRef",
                ref: wrapRef,
                class: normalizeClass(unref(styles).ButtonWrapper)
              }, [
                createElementVNode("ul", {
                  role: tabData.value.length > 0 ? "tablist" : void 0,
                  class: normalizeClass(classname.value),
                  onFocus: handleFocus,
                  onBlur: handleBlur,
                  onKeydown: handleKeyDown,
                  onKeyup: handleKeyPress,
                  "data-tabs-focus-catchment": ""
                }, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(tabData.value, (tabIndex) => {
                    return openBlock(), createBlock(unref(_sfc_main$3), mergeProps({ ref_for: true }, _ctx.tabs[tabIndex], {
                      ref_for: true,
                      ref: "undefined",
                      actions: _ctx.tabs[tabIndex].actions,
                      key: `${tabIndex}-${_ctx.tabs[tabIndex].id}`,
                      id: _ctx.tabs[tabIndex].id,
                      panelID: unref(hasSlot)(slots.default) ? _ctx.tabs[tabIndex].panelID || `${_ctx.tabs[tabIndex].id}-panel` : void 0,
                      disabled: _ctx.disabled || _ctx.tabs[tabIndex].disabled,
                      siblingTabHasFocus: state.tabToFocus > -1,
                      focused: tabIndex === state.tabToFocus,
                      selected: tabIndex === _ctx.selected,
                      accessibilityLabel: _ctx.tabs[tabIndex].accessibilityLabel,
                      url: _ctx.tabs[tabIndex].url,
                      content: _ctx.tabs[tabIndex].content,
                      viewNames: viewNames.value,
                      onTabAction: () => {
                        handleTabClick(_ctx.tabs[tabIndex].id);
                      },
                      onToggleModal: handleToggleModal,
                      onTogglePopover: handleTogglePopover
                    }), null, 16, ["actions", "id", "panelID", "disabled", "siblingTabHasFocus", "focused", "selected", "accessibilityLabel", "url", "content", "viewNames", "onTabAction"]);
                  }), 128)),
                  !(unref(breakpoints).mdDown || tabsToShow.value.length === 0) ? (openBlock(), createElementBlock("li", {
                    key: 0,
                    role: "presentation",
                    class: normalizeClass(disclosureTabClassName.value)
                  }, [
                    createVNode(unref(_sfc_main$4), {
                      preferredPosition: "below",
                      preferredAlignment: "left",
                      autofocusTarget: "first-node",
                      "z-index-override": _ctx.disclosureZIndexOverride,
                      active: disclosureActivatorVisible.value && state.showDisclosure,
                      onClose: handleClose
                    }, {
                      activator: withCtx(() => [
                        createVNode(activator)
                      ]),
                      default: withCtx(() => [
                        createVNode(unref(_sfc_main$5), {
                          focusIndex: state.hiddenTabs.indexOf(state.tabToFocus),
                          disclosureTabs: disclosureTabs.value,
                          onClick: handleListTabClick,
                          onKeypress: handleKeyPress
                        }, null, 8, ["focusIndex", "disclosureTabs"])
                      ]),
                      _: 1
                    }, 8, ["z-index-override", "active"])
                  ], 2)) : createCommentVNode("", true)
                ], 42, _hoisted_1),
                _ctx.canCreateNewView && tabsToShow.value.length > 0 ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(unref(styles).NewTab)
                }, [
                  createVNode(unref(_sfc_main$6), {
                    open: state.isNewViewModalActive,
                    viewNames: viewNames.value,
                    onClose: handleCloseNewViewModal,
                    onClickPrimaryAction: handleSaveNewViewModal
                  }, {
                    default: withCtx(() => [
                      _ctx.disabled ? (openBlock(), createBlock(unref(_sfc_main$3), {
                        key: 0,
                        id: CREATE_NEW_VIEW_ID,
                        content: createViewA11yLabel.value,
                        actions: [],
                        disabled: _ctx.disabled,
                        tabIndexOverride: 0,
                        onTogglePopover: handleTogglePopover,
                        onToggleModal: handleToggleModal,
                        onTabAction: handleClickNewTab,
                        onFocus: handleTabFocus
                      }, {
                        icon: withCtx(() => [
                          createVNode(unref(_sfc_main$7), {
                            source: unref(PlusIcon),
                            accessibilityLabel: createViewA11yLabel.value
                          }, null, 8, ["source", "accessibilityLabel"])
                        ]),
                        _: 1
                      }, 8, ["content", "disabled"])) : (openBlock(), createElementBlock("div", _hoisted_2, [
                        createVNode(unref(_sfc_main$8), {
                          preferredPosition: "above",
                          content: unref(i18n).translate("Polaris.Tabs.newViewTooltip"),
                          hoverDelay: 400,
                          "z-index-override": _ctx.disclosureZIndexOverride
                        }, {
                          default: withCtx(() => [
                            createVNode(unref(_sfc_main$3), {
                              id: CREATE_NEW_VIEW_ID,
                              content: createViewA11yLabel.value,
                              actions: [],
                              disabled: _ctx.disabled,
                              tabIndexOverride: 0,
                              onTogglePopover: handleTogglePopover,
                              onToggleModal: handleToggleModal,
                              onTabAction: handleClickNewTab,
                              onFocus: handleTabFocus
                            }, {
                              icon: withCtx(() => [
                                createVNode(unref(_sfc_main$7), {
                                  source: unref(PlusIcon),
                                  accessibilityLabel: createViewA11yLabel.value
                                }, null, 8, ["source", "accessibilityLabel"])
                              ]),
                              _: 1
                            }, 8, ["content", "disabled"])
                          ]),
                          _: 1
                        }, 8, ["content", "z-index-override"])
                      ]))
                    ]),
                    _: 1
                  }, 8, ["open", "viewNames"])
                ], 2)) : createCommentVNode("", true)
              ], 2)
            ], 2)
          ]),
          _: 1
        }),
        unref(hasSlot)(slots.default) ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(_ctx.tabs, (_tab, index) => {
          return openBlock(), createElementBlock(Fragment, null, [
            _ctx.selected === index ? (openBlock(), createBlock(unref(_sfc_main$9), {
              key: _ctx.tabs[index].id,
              id: _ctx.tabs[index].panelID || `${_ctx.tabs[index].id}-panel`,
              tabID: _ctx.tabs[index].id
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 2
            }, 1032, ["id", "tabID"])) : (openBlock(), createBlock(unref(_sfc_main$9), {
              hidden: "",
              key: index,
              id: _ctx.tabs[index].panelID || `${_ctx.tabs[index].id}-panel`,
              tabID: _ctx.tabs[index].id
            }, null, 8, ["id", "tabID"]))
          ], 64);
        }), 256)) : createCommentVNode("", true)
      ], 2);
    };
  }
});
export {
  _sfc_main as _,
  styles as s
};
//# sourceMappingURL=Tabs.vue_vue_type_script_setup_true_lang.js.map
