import { defineComponent, openBlock, createElementBlock, normalizeClass, unref, Fragment, renderList, createBlock, withCtx, createTextVNode, toDisplayString } from "vue";
import { s as styles } from "../../Tabs.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../Item/Item.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "List",
  props: {
    focusIndex: {},
    disclosureTabs: {}
  },
  emits: ["click", "keypress"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    const handleKeyDown = (event) => {
      const { key } = event;
      if (key === "ArrowLeft" || key === "ArrowRight") {
        event.preventDefault();
        event.stopPropagation();
      }
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("ul", {
        class: normalizeClass(unref(styles).List),
        onKeydown: handleKeyDown,
        onKeyup: _cache[0] || (_cache[0] = ($event) => emits("keypress", $event))
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.disclosureTabs, (item, index) => {
          return openBlock(), createBlock(unref(_sfc_main$1), {
            key: item.id,
            id: item.id,
            url: item.url,
            focused: index === _ctx.focusIndex,
            accessibilityLabel: item.accessibilityLabel,
            onClick: ($event) => emits("click", item.id)
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(item.content), 1)
            ]),
            _: 2
          }, 1032, ["id", "url", "focused", "accessibilityLabel", "onClick"]);
        }), 128))
      ], 34);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=List.vue_vue_type_script_setup_true_lang.js.map
