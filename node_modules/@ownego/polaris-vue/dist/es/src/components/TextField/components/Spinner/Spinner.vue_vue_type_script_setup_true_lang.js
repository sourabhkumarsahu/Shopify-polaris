import { defineComponent, ref, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, createVNode } from "vue";
import { f as ChevronUpIcon, g as ChevronDownIcon } from "../../../../../vendor.js";
import { _ as _sfc_main$1 } from "../../../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { s as styles } from "../../TextField.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Spinner",
  emits: ["change", "click", "mousedown", "mouseup", "blur"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const emits = __emit;
    const spinnerRef = ref(null);
    const handleStep = (step) => {
      emits("change", step);
    };
    const handleMouseDown = (e, step) => {
      if (e.button !== 0) return;
      emits("mousedown", step);
    };
    const onClick = (e) => {
      emits("click", e);
    };
    const onMouseUp = () => {
      emits("mouseup");
    };
    const onBlur = (e) => {
      emits("blur", e);
    };
    __expose({
      spinnerWrapperRef: spinnerRef,
      handleStep
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "spinnerRef",
        ref: spinnerRef,
        class: normalizeClass(unref(styles).Spinner),
        "aria-hidden": "",
        onClick
      }, [
        createElementVNode("div", {
          role: "button",
          class: normalizeClass(unref(styles).Segment),
          tabindex: "-1",
          onClick: _cache[0] || (_cache[0] = ($event) => handleStep(1)),
          onMousedown: _cache[1] || (_cache[1] = ($event) => handleMouseDown($event, 1)),
          onMouseup: onMouseUp,
          onBlur
        }, [
          createElementVNode("div", {
            class: normalizeClass(unref(styles).SpinnerIcon)
          }, [
            createVNode(unref(_sfc_main$1), { source: unref(ChevronUpIcon) }, null, 8, ["source"])
          ], 2)
        ], 34),
        createElementVNode("div", {
          role: "button",
          class: normalizeClass(unref(styles).Segment),
          tabindex: "-1",
          onClick: _cache[2] || (_cache[2] = ($event) => handleStep(-1)),
          onMousedown: _cache[3] || (_cache[3] = ($event) => handleMouseDown($event, -1)),
          onMouseup: onMouseUp,
          onBlur
        }, [
          createElementVNode("div", {
            class: normalizeClass(unref(styles).SpinnerIcon)
          }, [
            createVNode(unref(_sfc_main$1), { source: unref(ChevronDownIcon) }, null, 8, ["source"])
          ], 2)
        ], 34)
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Spinner.vue_vue_type_script_setup_true_lang.js.map
