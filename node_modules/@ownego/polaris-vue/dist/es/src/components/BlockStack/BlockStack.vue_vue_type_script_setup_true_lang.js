import { defineComponent, computed, openBlock, createBlock, resolveDynamicComponent, normalizeClass, normalizeStyle, unref, withCtx, renderSlot } from "vue";
import { g as getResponsiveProps, c as classNames, s as sanitizeCustomProperties } from "../../utilities/css.js";
const BlockStack = "Polaris-BlockStack";
const listReset = "Polaris-BlockStack--listReset";
const fieldsetReset = "Polaris-BlockStack--fieldsetReset";
const styles = {
  BlockStack,
  listReset,
  fieldsetReset
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "BlockStack",
  props: {
    as: { default: "div" },
    align: {},
    inlineAlign: {},
    gap: {},
    reverseOrder: { type: Boolean, default: false },
    role: {}
  },
  setup(__props) {
    const props = __props;
    const style = computed(() => {
      return {
        "--pc-block-stack-align": props.align ? `${props.align}` : null,
        "--pc-block-stack-inline-align": props.inlineAlign ? `${props.inlineAlign}` : null,
        "--pc-block-stack-order": props.reverseOrder ? "column-reverse" : "column",
        ...getResponsiveProps("block-stack", "gap", "space", props.gap)
      };
    });
    const className = computed(() => {
      return classNames(
        styles.BlockStack,
        (props.as === "ul" || props.as === "ol") && styles.listReset,
        props.as === "fieldset" && styles.fieldsetReset
      );
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.as), {
        class: normalizeClass(className.value),
        style: normalizeStyle(unref(sanitizeCustomProperties)(style.value))
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "style"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=BlockStack.vue_vue_type_script_setup_true_lang.js.map
