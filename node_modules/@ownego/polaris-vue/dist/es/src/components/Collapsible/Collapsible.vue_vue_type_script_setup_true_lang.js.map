{"version":3,"file":"Collapsible.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/Collapsible/Collapsible.vue"],"sourcesContent":["<template lang=\"pug\">\ndiv(\n  ref=\"collapsibleContainer\",\n  :id=\"id\",\n  :style=\"collapsibleStyles\",\n  :class=\"wrapperClassName\",\n  :aria-hidden=\"!open\",\n  @transitionend=\"handleCompleteAnimation\",\n)\n  template(v-if=\"expandOnPrint || !isFullyClosed\")\n    slot\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, watch, onMounted, ref } from 'vue';\nimport type { Transition, AnimationState } from './types';\nimport { createVar } from '@shopify/polaris-tokens';\nimport type { VueNode } from '@/utilities/types';\nimport { classNames } from '@/utilities/css';\nimport styles from '@polaris/components/Collapsible/Collapsible.module.css';\n\nexport type CollapsibleProps = {\n  /** Assign a unique ID to the collapsible. For accessibility, pass this ID as the value of the triggering componentâ€™s aria-controls prop. */\n  id?: string;\n  /** Option to show collapsible content when printing */\n  expandOnPrint?: boolean;\n  /** Toggle whether the collapsible is expanded or not. */\n  open: boolean;\n  /** The direction the collapsible collapses in.\n   * @default 'block'\n   */\n   variant?: 'block' | 'inline';\n  /** Override transition properties. When set to false, disables transition completely.\n   * @default :transition=\"{duration: 'var(--p-motion-duration-150)', timingFunction: 'var(--p-motion-ease-in-out)'}\"\n   */\n  transition?: boolean | Transition;\n}\n\nconst slot = defineSlots<{\n  /** Elements to display inside the collapsible */\n  default: (_?: VueNode) => any;\n}>()\n\nconst props = withDefaults(defineProps<CollapsibleProps>(), {\n  transition: true,\n  variant: 'block',\n});\n\nconst emits = defineEmits<{\n  /** Callback when the animation completes */\n  'animation-end': [];\n}>();\n\nconst size = ref<number>(0);\nconst isOpen = ref<boolean>(props.open);\nconst animationState = ref<AnimationState>('idle');\nconst collapsibleContainer = ref<HTMLDivElement | null>(null);\n\nconst vertical = computed(() => props.variant === 'block');\nconst isFullyOpen = computed(() =>\n  animationState.value === 'idle' && props.open && isOpen.value,\n);\n\nconst isFullyClosed = computed(() =>\n  animationState.value === 'idle' && !props.open && !isOpen.value,\n);\n\nconst animateIn = computed(() => typeof props.transition === 'object' && props.transition.animateIn);\n\nconst wrapperClassName = computed(() => {\n  return classNames(\n    styles.Collapsible,\n    isFullyClosed.value && styles.isFullyClosed,\n    props.expandOnPrint && styles.expandOnPrint,\n    props.variant === 'inline' && styles.inline,\n    animateIn.value && styles.animateIn,\n  );\n});\n\nconst zeroDurationRegex = /^0(ms|s)$/;\n\nconst isTransitionDisabled = (transitionProp: Transition | boolean) => {\n  if (typeof transitionProp === 'boolean') {\n    return !transitionProp;\n  }\n\n  const { duration } = transitionProp;\n  if (duration && zeroDurationRegex.test(duration.trim())) {\n    return true;\n  }\n\n  return false;\n}\n\nconst transitionDisabled = computed(() => isTransitionDisabled(props.transition));\n\nconst transitionStyles = computed(() =>\n  typeof props.transition === 'object' && {\n    transitionDelay: createVar(`motion-duration-${props.transition.delay ?? '0'}`),\n    transitionDuration: props.transition.duration,\n    transitionTimingFunction: props.transition.timingFunction,\n});\n\nconst collapsibleStyles = computed(() => {\n  return {\n    ...transitionStyles.value,\n    ...(vertical.value\n    ? {\n        maxHeight: isFullyOpen.value ? 'none' : `${size.value}px`,\n        overflow: isFullyOpen.value ? 'visible' : 'hidden',\n      }\n    : {\n        maxWidth: isFullyOpen.value ? 'none' : `${size.value}px`,\n        overflow: isFullyOpen.value ? 'visible' : 'hidden',\n      })\n  };\n});\n\nconst handleCompleteAnimation = (event: Event) => {\n  const target = event?.target;\n\n  if (target === collapsibleContainer.value) {\n    animationState.value = 'idle';\n    isOpen.value = props.open;\n\n    emits('animation-end');\n  }\n}\n\nconst startAnimation = () => {\n  if (transitionDisabled.value) {\n    isOpen.value = props.open;\n    animationState.value = 'idle';\n\n    if (props.open && collapsibleContainer.value) {\n      size.value = vertical.value\n        ? collapsibleContainer.value.scrollHeight\n        : collapsibleContainer.value.scrollWidth;\n    } else {\n      size.value = 0;\n    }\n  } else {\n    animationState.value = 'measuring';\n  }\n}\n\nonMounted(() => {\n  if (!props.open || !collapsibleContainer.value) return;\n\n  // If collapsible defaults to open, set an initial height\n  size.value = vertical.value\n    ? collapsibleContainer.value.scrollHeight\n    : collapsibleContainer.value.scrollWidth;\n});\n\nwatch(\n  () => props.open,\n  (newVal, oldVal) => {\n    // startAnimation should only be fired if the open state changes.\n    startAnimation();\n  },\n  { immediate: true },\n);\n\nwatch(\n  () => [animationState.value, props.open],\n  () => {\n    if (!collapsibleContainer.value) return;\n\n    switch (animationState.value) {\n      case 'idle':\n        break;\n      case 'measuring':\n        size.value = vertical.value\n          ? collapsibleContainer.value.scrollHeight\n          : collapsibleContainer.value.scrollWidth;\n        setTimeout(() => {\n          animationState.value = 'animating';\n        }, 0);\n        break;\n      case 'animating':\n        size.value = props.open\n          ? vertical.value\n            ? collapsibleContainer.value.scrollHeight\n            : collapsibleContainer.value.scrollWidth\n          : 0;\n        break;\n    }\n  },\n);\n</script>\n"],"names":["_useSlots","isFullyClosed","animateIn"],"mappings":"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"}