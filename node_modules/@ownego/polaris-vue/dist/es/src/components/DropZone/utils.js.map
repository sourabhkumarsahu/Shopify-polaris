{"version":3,"file":"utils.js","sources":["../../../../../src/components/DropZone/utils.ts"],"sourcesContent":["export type DropZoneEvent = DragEvent | InputEvent;\n\nconst dragEvents = ['dragover', 'dragenter', 'drop'];\n\n\nexport function fileAccepted(file: File, accept: string | undefined) {\n  return file.type === 'application/x-moz-file' || accepts(file, accept);\n}\n\nexport function getDataTransferFiles(event: DropZoneEvent) {\n  if (isDragEvent(event) && event.dataTransfer) {\n    const dt = event.dataTransfer;\n\n    if (dt.files && dt.files.length) {\n      return Array.from(dt.files);\n    } else if (dt.items && dt.items.length) {\n      // Chrome is the only browser that allows to read the file list on drag\n      // events and uses `items` instead of `files` in this case.\n      return Array.from(dt.items);\n    }\n  } else if (isChangeEvent(event)) {\n    const target = event.target as HTMLInputElement;\n\n    if (target.files) {\n      // Return files from even when a file was selected from an upload dialog\n      return Array.from(target.files);\n    }\n  }\n\n  return [];\n}\n\nfunction accepts(file: File, acceptedFiles: string | string[] | undefined) {\n  if (file && acceptedFiles) {\n    const fileName = file.name || '';\n    const mimeType = file.type || '';\n    const baseMimeType = mimeType.replace(/\\/.*$/, '');\n    const acceptedFilesArray = Array.isArray(acceptedFiles)\n      ? acceptedFiles\n      : acceptedFiles.split(',');\n\n    return acceptedFilesArray.some((type) => {\n      const validType = type.trim();\n      if (validType.startsWith('.')) {\n        return fileName.toLowerCase().endsWith(validType.toLowerCase());\n      } else if (validType.endsWith('/*')) {\n        // This is something like a image/* mime type\n        return baseMimeType === validType.replace(/\\/.*$/, '');\n      }\n      return mimeType === validType;\n    });\n  }\n  return true;\n}\n\nfunction isDragEvent(event: DropZoneEvent): event is DragEvent {\n  return dragEvents.indexOf(event.type) > 0;\n}\n\nfunction isChangeEvent(event: DropZoneEvent): event is InputEvent {\n  return event.type === 'change';\n}\n\nexport const defaultAllowMultiple = true;\n\nexport function createAllowMultipleKey(allowMultiple: boolean) {\n  return allowMultiple ? 'allowMultiple' : 'single';\n}\n"],"names":[],"mappings":"AAEA,MAAM,aAAa,CAAC,YAAY,aAAa,MAAM;AAGnC,SAAA,aAAa,MAAY,QAA4B;AACnE,SAAO,KAAK,SAAS,4BAA4B,QAAQ,MAAM,MAAM;AACvE;AAEO,SAAS,qBAAqB,OAAsB;AACzD,MAAI,YAAY,KAAK,KAAK,MAAM,cAAc;AAC5C,UAAM,KAAK,MAAM;AAEjB,QAAI,GAAG,SAAS,GAAG,MAAM,QAAQ;AACxB,aAAA,MAAM,KAAK,GAAG,KAAK;AAAA,IACjB,WAAA,GAAG,SAAS,GAAG,MAAM,QAAQ;AAG/B,aAAA,MAAM,KAAK,GAAG,KAAK;AAAA,IAC5B;AAAA,EAAA,WACS,cAAc,KAAK,GAAG;AAC/B,UAAM,SAAS,MAAM;AAErB,QAAI,OAAO,OAAO;AAET,aAAA,MAAM,KAAK,OAAO,KAAK;AAAA,IAChC;AAAA,EACF;AAEA,SAAO;AACT;AAEA,SAAS,QAAQ,MAAY,eAA8C;AACzE,MAAI,QAAQ,eAAe;AACnB,UAAA,WAAW,KAAK,QAAQ;AACxB,UAAA,WAAW,KAAK,QAAQ;AAC9B,UAAM,eAAe,SAAS,QAAQ,SAAS,EAAE;AAC3C,UAAA,qBAAqB,MAAM,QAAQ,aAAa,IAClD,gBACA,cAAc,MAAM,GAAG;AAEpB,WAAA,mBAAmB,KAAK,CAAC,SAAS;AACjC,YAAA,YAAY,KAAK;AACnB,UAAA,UAAU,WAAW,GAAG,GAAG;AAC7B,eAAO,SAAS,YAAY,EAAE,SAAS,UAAU,aAAa;AAAA,MACrD,WAAA,UAAU,SAAS,IAAI,GAAG;AAEnC,eAAO,iBAAiB,UAAU,QAAQ,SAAS,EAAE;AAAA,MACvD;AACA,aAAO,aAAa;AAAA,IAAA,CACrB;AAAA,EACH;AACO,SAAA;AACT;AAEA,SAAS,YAAY,OAA0C;AAC7D,SAAO,WAAW,QAAQ,MAAM,IAAI,IAAI;AAC1C;AAEA,SAAS,cAAc,OAA2C;AAChE,SAAO,MAAM,SAAS;AACxB;AAEO,MAAM,uBAAuB;AAE7B,SAAS,uBAAuB,eAAwB;AAC7D,SAAO,gBAAgB,kBAAkB;AAC3C;"}