import { defineComponent, useSlots, getCurrentInstance, ref, computed, watch, onMounted, onBeforeUnmount, reactive, provide, openBlock, createBlock, unref, createSlots, withCtx, createElementVNode, normalizeClass, createElementBlock, createVNode, createTextVNode, toDisplayString, createCommentVNode, renderSlot, Fragment } from "vue";
import { d as debounce } from "../../../polaris/polaris-react/src/utilities/debounce.js";
import { c as capitalize } from "../../../polaris/polaris-react/src/utilities/capitalize.js";
import { u as useI18n } from "../../use/useI18n.js";
import { u as useHasSlot } from "../../use/useHasSlot.js";
import { u as useToggle } from "../../use/useToggle.js";
import { u as useId } from "../../use/useId.js";
import { c as classNames, v as variationName } from "../../utilities/css.js";
import { _ as _sfc_main$2 } from "../BlockStack/BlockStack.vue_vue_type_script_setup_true_lang.js";
import { d as defaultAllowMultiple, c as createAllowMultipleKey, g as getDataTransferFiles, f as fileAccepted } from "./utils.js";
import { U as UploadIcon, p as AlertCircleIcon } from "../../../vendor.js";
import { _ as _sfc_main$3 } from "../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../Labelled/Labelled.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
const DropZone = "Polaris-DropZone";
const focused = "Polaris-DropZone--focused";
const noOutline = "Polaris-DropZone--noOutline";
const hasOutline = "Polaris-DropZone--hasOutline";
const isDisabled = "Polaris-DropZone--isDisabled";
const isDragging = "Polaris-DropZone--isDragging";
const sizeLarge = "Polaris-DropZone--sizeLarge";
const sizeMedium = "Polaris-DropZone--sizeMedium";
const sizeSmall = "Polaris-DropZone--sizeSmall";
const measuring = "Polaris-DropZone--measuring";
const Container = "Polaris-DropZone__Container";
const Overlay = "Polaris-DropZone__Overlay";
const hasError = "Polaris-DropZone--hasError";
const styles = {
  DropZone,
  focused,
  noOutline,
  hasOutline,
  isDisabled,
  isDragging,
  sizeLarge,
  sizeMedium,
  sizeSmall,
  measuring,
  Container,
  Overlay,
  hasError
};
const _hoisted_1 = ["aria-disabled"];
const _hoisted_2 = ["id", "accept", "multiple", "disabled"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "DropZone",
  props: {
    label: {},
    labelAction: {},
    labelHidden: { type: Boolean },
    id: {},
    accept: {},
    type: { default: "file" },
    active: { type: Boolean },
    error: { type: Boolean },
    outline: { type: Boolean, default: true },
    overlay: { type: Boolean, default: true },
    overlayText: {},
    errorOverlayText: {},
    allowMultiple: { type: Boolean, default: defaultAllowMultiple },
    disabled: { type: Boolean, default: false },
    dropOnPage: { type: Boolean },
    openFileDialog: { type: Boolean },
    variableHeight: { type: Boolean },
    customValidator: {}
  },
  emits: ["click", "drop", "drop-accepted", "drop-rejected", "drag-over", "drag-enter", "drag-leave", "file-dialog-close"],
  setup(__props, { emit: __emit }) {
    var _a;
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const i18n = useI18n();
    const uniqId = useId();
    const { hasSlot } = useHasSlot();
    const currentInstance = getCurrentInstance();
    const dropNodeRef = ref(null);
    const inputRef = ref(null);
    const dragTargets = ref([]);
    const observer = ref(null);
    const dragging = ref(false);
    const internalError = ref(false);
    const { value: focused2, setTrue: handleFocus, setFalse: handleBlur } = useToggle(false);
    const size = ref("large");
    const measuring2 = ref(true);
    const customDocument = ((_a = dropNodeRef.value) == null ? void 0 : _a.ownerDocument) || document;
    const id = computed(() => props.id || uniqId);
    const typeSuffix = computed(() => capitalize(props.type));
    const allowMultipleKey = computed(() => createAllowMultipleKey(props.allowMultiple));
    const overlayTextWithDefault = computed(
      () => !props.overlayText ? i18n.translate(`Polaris.DropZone.${allowMultipleKey.value}.overlayText${typeSuffix.value}`) : props.overlayText
    );
    const errorOverlayTextWithDefault = computed(
      () => !props.errorOverlayText ? i18n.translate(`Polaris.DropZone.errorOverlayText${typeSuffix.value}`) : props.errorOverlayText
    );
    const hasLabel = computed(() => hasSlot(slots.label) || props.label);
    const labelHiddenValue = computed(() => props.label ? props.labelHidden : true);
    const classes = computed(() => classNames(
      styles.DropZone,
      props.outline && styles.hasOutline,
      !props.outline && styles.noOutline,
      focused2.value && styles.focused,
      (props.active || dragging.value) && styles.isDragging,
      props.disabled && styles.isDisabled,
      (internalError.value || props.error) && styles.hasError,
      !props.variableHeight && styles[variationName("size", size.value)],
      measuring2.value && styles.measuring
    ));
    const showDragOverlay = computed(() => (props.active || dragging.value) && !internalError.value && !props.error && props.overlay);
    const showDragErrorOverlay = computed(() => dragging.value && (internalError.value || props.error));
    const adjustSize = debounce(() => {
      if (!dropNodeRef.value) return;
      if (props.variableHeight) {
        measuring2.value = false;
        return;
      }
      let tmpSize = "large";
      const width = dropNodeRef.value.getBoundingClientRect().width;
      if (width < 100) {
        tmpSize = "small";
      } else if (width < 160) {
        tmpSize = "medium";
      }
      size.value = tmpSize;
      if (measuring2.value) measuring2.value = false;
    }, 50, { trailing: true });
    const getValidatedFiles = (files) => {
      const acceptedFiles = [];
      const rejectedFiles = [];
      Array.from(files).forEach((file) => {
        !fileAccepted(file, props.accept) || props.customValidator && !props.customValidator(file) ? rejectedFiles.push(file) : acceptedFiles.push(file);
      });
      if (!props.allowMultiple) {
        acceptedFiles.splice(1, acceptedFiles.length);
        rejectedFiles.push(...acceptedFiles.slice(1));
      }
      return { files, acceptedFiles, rejectedFiles };
    };
    const handleDrop = (event) => {
      stopEvent(event);
      if (props.disabled) return;
      const fileList = getDataTransferFiles(event);
      const { files, acceptedFiles, rejectedFiles } = getValidatedFiles(fileList);
      dragTargets.value = [];
      dragging.value = false;
      internalError.value = rejectedFiles.length > 0;
      emits("drop", files, acceptedFiles, rejectedFiles);
      acceptedFiles.length && emits("drop-accepted", acceptedFiles);
      rejectedFiles.length && emits("drop-rejected", rejectedFiles);
      if (!(event.target && "value" in event.target)) return;
      event.target.value = "";
    };
    const handleDragEnter = (event) => {
      stopEvent(event);
      if (props.disabled) return;
      const fileList = getDataTransferFiles(event);
      if (event.target && !dragTargets.value.includes(event.target)) {
        dragTargets.value.push(event.target);
      }
      if (dragging.value) return;
      const { rejectedFiles } = getValidatedFiles(fileList);
      dragging.value = true;
      internalError.value = rejectedFiles.length > 0;
      emits("drag-enter");
    };
    const handleDragOver = (event) => {
      stopEvent(event);
      if (props.disabled) return;
      emits("drag-over");
    };
    const handleDragLeave = (event) => {
      stopEvent(event);
      if (props.disabled) return;
      dragTargets.value = dragTargets.value.filter((el) => {
        const compareNode = props.dropOnPage ? customDocument : dropNodeRef.value;
        return el !== event.target && compareNode && compareNode.contains(el);
      });
      if (dragTargets.value.length > 0) return;
      dragging.value = false;
      internalError.value = false;
      emits("drag-leave");
    };
    const open = () => {
      if (!inputRef.value) return;
      inputRef.value.click();
    };
    const triggerFileDialog = () => {
      open();
      emits("file-dialog-close");
    };
    const handleClick = (event) => {
      if (props.disabled) return;
      if (currentInstance == null ? void 0 : currentInstance.attrs.onClick) {
        emits("click", event);
      } else {
        open();
      }
    };
    const stopEvent = (event) => {
      event.preventDefault();
      event.stopPropagation();
    };
    watch(
      () => props.openFileDialog,
      () => {
        if (props.openFileDialog) triggerFileDialog();
      }
    );
    watch(
      () => adjustSize,
      () => {
        if (!dropNodeRef.value) return;
        observer.value = new ResizeObserver(adjustSize);
        observer.value.observe(dropNodeRef.value);
      }
    );
    onMounted(() => {
      adjustSize();
      const dropNode = props.dropOnPage ? customDocument : dropNodeRef.value;
      if (!dropNode) return;
      dropNode.addEventListener("drop", handleDrop);
      dropNode.addEventListener("dragover", handleDragOver);
      dropNode.addEventListener("dragenter", handleDragEnter);
      dropNode.addEventListener("dragleave", handleDragLeave);
      window.addEventListener("resize", adjustSize);
    });
    onBeforeUnmount(() => {
      var _a2;
      const dropNode = props.dropOnPage ? customDocument : dropNodeRef.value;
      if (!dropNode) return;
      dropNode.removeEventListener("drop", handleDrop);
      dropNode.removeEventListener("dragover", handleDragOver);
      dropNode.removeEventListener("dragenter", handleDragEnter);
      dropNode.removeEventListener("dragleave", handleDragLeave);
      window.removeEventListener("resize", adjustSize);
      (_a2 = observer.value) == null ? void 0 : _a2.disconnect();
    });
    const context = reactive({
      disabled: props.disabled,
      focused: focused2,
      size,
      type: props.type || "file",
      measuring: measuring2,
      allowMultiple: props.allowMultiple
    });
    provide("dropZoneContext", context);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        id: `${id.value}`,
        "label-hidden": labelHiddenValue.value,
        action: _ctx.labelAction
      }, createSlots({
        default: withCtx(() => [
          createElementVNode("div", {
            ref_key: "dropNodeRef",
            ref: dropNodeRef,
            class: normalizeClass(classes.value),
            "aria-disabled": _ctx.disabled,
            onClick: handleClick,
            onDragstart: stopEvent
          }, [
            showDragOverlay.value ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(styles).Overlay)
            }, [
              createVNode(unref(_sfc_main$2), {
                gap: "200",
                "inline-align": "center"
              }, {
                default: withCtx(() => [
                  size.value === "small" ? (openBlock(), createBlock(unref(_sfc_main$3), {
                    key: 0,
                    source: unref(UploadIcon),
                    tone: "critical"
                  }, null, 8, ["source"])) : size.value === "medium" || size.value === "large" ? (openBlock(), createBlock(unref(_sfc_main$4), {
                    key: 1,
                    variant: "bodySm",
                    as: "p",
                    "font-weight": "bold"
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(overlayTextWithDefault.value), 1)
                    ]),
                    _: 1
                  })) : createCommentVNode("", true)
                ]),
                _: 1
              })
            ], 2)) : createCommentVNode("", true),
            showDragErrorOverlay.value ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass(unref(styles).Overlay)
            }, [
              createVNode(unref(_sfc_main$2), {
                gap: "200",
                "inline-align": "center"
              }, {
                default: withCtx(() => [
                  size.value === "small" ? (openBlock(), createBlock(unref(_sfc_main$3), {
                    key: 0,
                    source: unref(AlertCircleIcon),
                    tone: "critical"
                  }, null, 8, ["source"])) : size.value === "medium" || size.value === "large" ? (openBlock(), createBlock(unref(_sfc_main$4), {
                    key: 1,
                    variant: "bodySm",
                    as: "p",
                    "font-weight": "bold"
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(errorOverlayTextWithDefault.value), 1)
                    ]),
                    _: 1
                  })) : createCommentVNode("", true)
                ]),
                _: 1
              })
            ], 2)) : createCommentVNode("", true),
            createVNode(unref(_sfc_main$4), {
              as: "span",
              variant: "bodySm",
              "visually-hidden": ""
            }, {
              default: withCtx(() => [
                createElementVNode("input", {
                  ref_key: "inputRef",
                  ref: inputRef,
                  type: "file",
                  id: `${id.value}`,
                  accept: _ctx.accept,
                  multiple: _ctx.allowMultiple,
                  disabled: _ctx.disabled,
                  autoComplete: "off",
                  onChange: handleDrop,
                  onFocus: _cache[0] || (_cache[0] = //@ts-ignore
                  (...args) => unref(handleFocus) && unref(handleFocus)(...args)),
                  onBlur: _cache[1] || (_cache[1] = //@ts-ignore
                  (...args) => unref(handleBlur) && unref(handleBlur)(...args))
                }, null, 40, _hoisted_2)
              ]),
              _: 1
            }),
            createElementVNode("div", {
              class: normalizeClass(unref(styles).Container)
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 2)
          ], 42, _hoisted_1)
        ]),
        _: 2
      }, [
        hasLabel.value ? {
          name: "label",
          fn: withCtx(() => [
            slots.label ? renderSlot(_ctx.$slots, "label", { key: 0 }) : _ctx.label ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
              createTextVNode(toDisplayString(unref(i18n).translate(`Polaris.DropZone.${allowMultipleKey.value}.label${typeSuffix.value}`)), 1)
            ], 64))
          ]),
          key: "0"
        } : void 0
      ]), 1032, ["id", "label-hidden", "action"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=DropZone.vue_vue_type_script_setup_true_lang.js.map
