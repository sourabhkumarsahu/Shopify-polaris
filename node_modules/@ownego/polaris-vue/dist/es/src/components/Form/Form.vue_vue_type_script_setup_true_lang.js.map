{"version":3,"file":"Form.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/Form/Form.vue"],"sourcesContent":["\n<template lang=\"pug\">\nform(\n  :acceptCharset=\"acceptCharset\",\n  :action=\"action\",\n  :autoComplete=\"autoCompleteInputs\",\n  :encType=\"encType\",\n  :method=\"method\",\n  :name=\"name\",\n  :noValidate=\"noValidate\",\n  :target=\"target\",\n  @submit=\"handleSubmit\"\n)\n  Text(v-if=\"implicitSubmit\", as=\"span\", visually-hidden)\n    button(type=\"submit\", aria-hidden=\"true\", tabindex=\"-1\")\n      | {{ i18n.translate('Polaris.Common.submit') }}\n  slot\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, type VNode } from 'vue';\nimport { Text } from '@/components';\nimport useI18n from '@/use/useI18n';\nimport type { VueNode } from '@/utilities/types';\n\ntype Enctype =\n  | 'application/x-www-form-urlencoded'\n  | 'multipart/form-data'\n  | 'text/plain';\n\ntype Method = 'post' | 'get' | 'action';\n\ntype Target = '_blank' | '_self' | '_parent' | '_top' | string;\n\nexport type FormProps = {\n  /** Space separated list of character encodings */\n  acceptCharset?: string;\n  /** Where to send form-data on submittal */\n  action?: string;\n  /** Grants the browser the ability to autocomplete input elements */\n  autoComplete?: boolean;\n  /** Media type when submitting content to server */\n  encType?: Enctype;\n  /** Toggles if form submits on Enter keypress. Defaults to true. */\n  implicitSubmit?: boolean;\n  /** Method used to submit form */\n  method?: Method;\n  /** A unique name for the form */\n  name?: string;\n  /** Whether or not form is validated when submitting */\n  noValidate?: boolean;\n  /** Blocks the default form action */\n  preventDefault?: boolean;\n  /** Where to display response after form submittal */\n  target?: Target;\n}\n\ntype FormSlots = {\n  /** The content to display inside the form. */\n  default: (_?: VueNode) => VNode[];\n}\n\ntype FormEvents = {\n  /** Callback when form is submitted */\n  'submit': [e: Event];\n}\n\nconst props = withDefaults(defineProps<FormProps>(), {\n  method: 'post',\n  implicitSubmit: true,\n  preventDefault: true,\n});\nconst slots = defineSlots<FormSlots>();\nconst emits = defineEmits<FormEvents>();\n\nconst i18n = useI18n();\n\n\n\nconst autoCompleteInputs = computed(() => {\n  if (props.autoComplete == null) {\n    return props.autoComplete;\n  }\n\n  return props.autoComplete ? 'on' : 'off';\n});\n\nconst handleSubmit = (e: Event) => {\n  if (!props.preventDefault) {\n    return;\n  }\n\n  e.preventDefault();\n  emits('submit', e);\n}\n\n</script>\n"],"names":["_useSlots"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA,UAAM,QAAQ;AAKAA;AACd,UAAM,QAAQ;AAEd,UAAM,OAAO;AAIP,UAAA,qBAAqB,SAAS,MAAM;AACpC,UAAA,MAAM,gBAAgB,MAAM;AAC9B,eAAO,MAAM;AAAA,MACf;AAEO,aAAA,MAAM,eAAe,OAAO;AAAA,IAAA,CACpC;AAEK,UAAA,eAAe,CAAC,MAAa;AAC7B,UAAA,CAAC,MAAM,gBAAgB;AACzB;AAAA,MACF;AAEA,QAAE,eAAe;AACjB,YAAM,UAAU,CAAC;AAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}