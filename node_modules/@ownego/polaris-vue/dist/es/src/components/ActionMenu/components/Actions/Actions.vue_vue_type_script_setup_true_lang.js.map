{"version":3,"file":"Actions.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../../../src/components/ActionMenu/components/Actions/Actions.vue"],"sourcesContent":["<template lang=\"pug\">\ndiv(:class=\"styles.ActionsLayoutOuter\")\n  ActionsMeasurer(\n    :actions=\"actions\",\n    :groups=\"groups\",\n    @measurements=\"handleMeasurement\",\n  )\n  div(:class=\"classname\")\n    SecondaryAction(\n      v-for=\"action, index in actionsFilter\",\n      v-bind=\"getSecondaryActionProps(index)\"\n      :key=\"action.content\",\n      @click=\"action.onAction?.() || undefined\",\n    ) {{ action.content }}\n    MenuGroup(\n      v-for=\"group in filteredGroups\",\n      v-bind=\"menuGroupProps(group)\",\n      :key=\"group.title\",\n      :title=\"group.title\",\n      :actions=\"getMenuGroupActions(group)\",\n      @open=\"handleMenuGroupToggle\",\n      @close=\"handleMenuGroupClose\",\n    )\n</template>\n\n<script setup lang=\"ts\">\nimport {\n  ref,\n  computed,\n  watch,\n  reactive,\n  getCurrentInstance,\n} from 'vue';\nimport { getVisibleAndHiddenActionsIndices } from '@polaris/components/ActionMenu/components/Actions/utilities';\nimport type {\n  ActionListItemDescriptor,\n  MenuActionDescriptor,\n  ActionListSection,\n  MenuGroupDescriptor,\n} from '@/utilities/types';\nimport useI18n from '@/use/useI18n';\nimport { classNames } from '@/utilities/css';\nimport styles from '@polaris/components/ActionMenu/components/Actions/Actions.module.css';\nimport { SecondaryAction, MenuGroup } from '../index';\nimport { ActionsMeasurer } from './components/ActionMeasurer';\nimport type { MenuGroupProps } from '../MenuGroup/MenuGroup.vue';\nimport type { SecondaryActionProps } from '../SecondaryAction/SecondaryAction.vue';\nimport type { ActionsMeasurements } from './components/ActionMeasurer/ActionsMeasurer.vue';\n\ninterface Props {\n  /** Collection of page-level secondary actions */\n  actions?: MenuActionDescriptor[];\n  /** Collection of page-level action groups */\n  groups?: MenuGroupDescriptor[];\n}\n\ninterface ActionsState {\n  visibleActions: number[];\n  hiddenActions: number[];\n  visibleGroups: number[];\n  hiddenGroups: number[];\n  actionsWidths: number[];\n  containerWidth: number;\n  disclosureWidth: number;\n  hasMeasured: boolean;\n}\n\nconst i18n = useI18n();\nconst currentInstance = getCurrentInstance();\n\nconst props = defineProps<Props>();\n\nconst emits = defineEmits<{\n  /** Callback that returns true when secondary actions are rolled up into action groups, and false when not */\n  (event: 'action-rollup', hasRolledUp: boolean): void;\n}>();\n\nconst rollupActiveRef = ref<boolean | null>(null);\nconst activeMenuGroup = ref<string | null>(null);\n\nconst defaultRollupGroup = ref<MenuGroupDescriptor>({\n  title: i18n.translate('Polaris.ActionMenu.Actions.moreActions'),\n  actions: [],\n});\n\nconst state = reactive<ActionsState>({\n  disclosureWidth: 0,\n  containerWidth: Infinity,\n  actionsWidths: [],\n  visibleActions: [],\n  hiddenActions: [],\n  visibleGroups: [],\n  hiddenGroups: [],\n  hasMeasured: false,\n});\n\nconst classname = computed(() => classNames(\n  styles.ActionsLayout,\n  !state.hasMeasured && styles['ActionsLayout--measuring'],\n));\n\nconst getSecondaryActionProps = (index: number) => (\n  props.actions?.[index] as SecondaryActionProps\n);\n\nconst handleMenuGroupToggle = (group: string) => {\n  if (activeMenuGroup.value) {\n    activeMenuGroup.value = null;\n  } else {\n    activeMenuGroup.value = group;\n  }\n}\n\nconst handleMenuGroupClose = () => {\n  activeMenuGroup.value = null;\n}\n\nconst actionsOrDefault = computed(() => props.actions ?? []);\nconst groupsOrDefault = computed(() => props.groups ?? []);\n\nconst groupsToFilter = computed(() =>\n  state.hiddenGroups.length > 0 || state.hiddenActions.length > 0\n    ? [...groupsOrDefault.value, defaultRollupGroup.value]\n    : [...groupsOrDefault.value],\n);\n\nconst filteredGroups = computed(() =>\n  groupsToFilter.value.filter((group, index) => {\n    const hasNoGroupsProp = groupsOrDefault.value.length === 0;\n    const isVisibleGroup = state.visibleGroups.includes(index);\n    const isDefaultGroup = group.title === defaultRollupGroup.value.title &&\n      group.actions.length === 0;\n\n    if (hasNoGroupsProp) {\n      return state.hiddenActions.length > 0;\n    }\n\n    if (isDefaultGroup) {\n      return true;\n    }\n\n    return isVisibleGroup;\n  }),\n);\n\nconst actionsFilter = computed(() =>\n  actionsOrDefault.value.filter((_, index) => {\n    if (!state.visibleActions.includes(index)) {\n      return false;\n    }\n\n    return true;\n  }),\n);\n\nconst hiddenActionObjects = computed(() => state.hiddenActions\n  .map((index) => actionsOrDefault.value[index])\n  .filter((action) => action != null)\n);\n\nconst hiddenGroupObjects = computed(() => state.hiddenGroups\n  .map((index) => groupsOrDefault.value[index])\n  .filter((group) => group != null)\n);\n\nconst finalRolledUp = computed(() => {\n  const allHiddenItems = [...hiddenActionObjects.value, ...hiddenGroupObjects.value];\n  return allHiddenItems.reduce(\n    ([actions, sections], action) => {\n      if (isMenuGroup(action)) {\n        sections.push({\n          title: action.title,\n          items: action.actions.map((sectionAction) => ({\n            ...sectionAction,\n            disabled: action.disabled || sectionAction.disabled,\n          })),\n        });\n      } else {\n        actions.push(action as any);\n      }\n\n      return [actions as ActionListItemDescriptor[], sections as ActionListSection[]];\n    },\n    [[] as ActionListItemDescriptor[], [] as ActionListSection[]],\n  );\n});\n\nconst finalRolledUpActions = computed(() => {\n  return finalRolledUp.value[0] as ActionListItemDescriptor[]\n});\nconst finalRolledUpSectionGroups = computed(() => finalRolledUp.value[1] as ActionListSection[]);\n\nconst menuGroupProps = (group: MenuGroupDescriptor) => {\n  const { actions, ...rest } = group;\n  return {\n    ...rest,\n    active: activeMenuGroup.value === group.title,\n    sections: finalRolledUpSectionGroups.value,\n  } as unknown as MenuGroupProps;\n}\n\nconst getMenuGroupActions = (group: MenuGroupDescriptor): ActionListItemDescriptor[] => {\n  const isDefaultGroup = group === defaultRollupGroup.value;\n\n  // The condition is `(!x && !y) || (!x && y) || (x && z && w)`\n  // there are too many ways to write this condition, e.g: !x || (w && z)\n  // But I want to keep it simple and readable as original conditions from polaris-react.\n  if (!isDefaultGroup) {\n    return group.actions;\n  }\n\n  return [...finalRolledUpActions.value, ...group.actions];\n};\n\nconst handleMeasurement = (measurements: ActionsMeasurements) => {\n  const {\n    hiddenActionsWidths: actionsWidths,\n    containerWidth,\n    disclosureWidth,\n  } = measurements;\n\n  const { visibleActions, hiddenActions, visibleGroups, hiddenGroups } =\n    getVisibleAndHiddenActionsIndices(\n      actionsOrDefault.value,\n      groupsOrDefault.value,\n      disclosureWidth,\n      actionsWidths,\n      containerWidth,\n    );\n\n  if (currentInstance?.vnode.props?.onActionRollup) {\n    const isRollupActive =\n      hiddenActions.length > 0 || hiddenGroups.length > 0;\n    if (rollupActiveRef.value !== isRollupActive) {\n      emits('action-rollup', isRollupActive);\n      rollupActiveRef.value = isRollupActive;\n    }\n  }\n\n  state.visibleActions = visibleActions;\n  state.hiddenActions = hiddenActions;\n  state.visibleGroups = visibleGroups;\n  state.hiddenGroups = hiddenGroups;\n  state.actionsWidths = actionsWidths;\n  state.containerWidth = containerWidth;\n  state.disclosureWidth = disclosureWidth;\n  state.hasMeasured = true;\n};\n\nwatch(\n  () => [\n    state.containerWidth,\n    state.disclosureWidth,\n    props.actions,\n    props.groups,\n    state.actionsWidths,\n  ],\n  () => {\n    if (state.containerWidth === 0) {\n      return;\n    }\n    const { visibleActions, visibleGroups, hiddenActions, hiddenGroups } =\n      getVisibleAndHiddenActionsIndices(\n        props.actions,\n        props.groups,\n        state.disclosureWidth,\n        state.actionsWidths,\n        state.containerWidth,\n      );\n    state.visibleActions = visibleActions;\n    state.visibleGroups = visibleGroups;\n    state.hiddenActions = hiddenActions;\n    state.hiddenGroups = hiddenGroups;\n    state.hasMeasured = state.containerWidth !== Infinity;\n  },\n  {\n    immediate: true,\n  }\n);\n\nconst isMenuGroup = (\n  actionOrMenuGroup: MenuGroupDescriptor | MenuActionDescriptor,\n): actionOrMenuGroup is MenuGroupDescriptor => {\n  return 'title' in actionOrMenuGroup;\n}\n</script>\n"],"names":[],"mappings":"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"}