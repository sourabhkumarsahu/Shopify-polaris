import { defineComponent, ref, onMounted, openBlock, createElementBlock, normalizeClass, unref, Fragment, renderList, createBlock, mergeProps, withCtx, createTextVNode, toDisplayString, createVNode } from "vue";
import { u as useI18n } from "../../../../../../use/useI18n.js";
import { u as useEventListener } from "../../../../../../utilities/use-event-listener.js";
import { s as styles } from "../../Actions.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../../SecondaryAction/SecondaryAction.vue_vue_type_script_setup_true_lang.js";
const ACTION_SPACING = 8;
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "ActionsMeasurer",
  props: {
    actions: {},
    groups: {}
  },
  emits: ["measurements"],
  setup(__props, { emit: __emit }) {
    const i18n = useI18n();
    const props = __props;
    const emits = __emit;
    const containerNode = ref(null);
    const defaultRollupGroup = ref({
      title: i18n.translate("Polaris.ActionMenu.Actions.moreActions"),
      actions: []
    });
    const handleMeasurement = () => {
      if (!containerNode.value) {
        return;
      }
      const containerWidth = containerNode.value.offsetWidth;
      const hiddenActionNodes = containerNode.value.children;
      const hiddenActionNodesArray = Array.from(hiddenActionNodes);
      const hiddenActionsWidths = hiddenActionNodesArray.map((node) => {
        const buttonWidth = Math.ceil(node.getBoundingClientRect().width);
        return buttonWidth + ACTION_SPACING;
      });
      const disclosureWidth = hiddenActionsWidths.pop() || 0;
      emits("measurements", {
        containerWidth,
        disclosureWidth,
        hiddenActionsWidths
      });
    };
    onMounted(() => {
      handleMeasurement();
    });
    const getSecondaryActionProps = (index) => {
      var _a;
      return (_a = props.actions) == null ? void 0 : _a[index];
    };
    useEventListener("resize", handleMeasurement);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "containerNode",
        ref: containerNode,
        class: normalizeClass(unref(styles).ActionsLayoutMeasurer)
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.actions, (action, index) => {
          return openBlock(), createBlock(unref(_sfc_main$1), mergeProps({ ref_for: true }, getSecondaryActionProps(index), {
            key: action.content,
            onClick: ($event) => {
              var _a;
              return ((_a = action.onAction) == null ? void 0 : _a.call(action)) || void 0;
            }
          }), {
            default: withCtx(() => [
              createTextVNode(toDisplayString(action.content), 1)
            ]),
            _: 2
          }, 1040, ["onClick"]);
        }), 128)),
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.groups, (group) => {
          return openBlock(), createBlock(unref(_sfc_main$1), {
            key: group.title,
            disclosure: true,
            icon: group.icon
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(group.title), 1)
            ]),
            _: 2
          }, 1032, ["icon"]);
        }), 128)),
        createVNode(unref(_sfc_main$1), { disclosure: true }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString(defaultRollupGroup.value.title), 1)
          ]),
          _: 1
        })
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=ActionsMeasurer.vue_vue_type_script_setup_true_lang.js.map
