{"version":3,"file":"Item.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../../../src/components/ActionList/components/Item/Item.vue"],"sourcesContent":["<template lang=\"pug\">\n//- ScrollMarkup\nScrollTo(v-if=\"active\")\n\n//- Control\nUnstyledLink(\n  v-if=\"url\",\n  :id=\"id\",\n  :url=\"disabled ? null : url\",\n  :class=\"className\",\n  :external=\"external\",\n  :role=\"role\",\n  :aria-label=\"accessibilityLabel\",\n  @click=\"disabled ? null : emits('action')\",\n)\n  Box(width=\"100%\")\n    InlineStack(\n      block-align=\"center\",\n      gap=\"150\",\n      :wrap=\"false\",\n    )\n      //- PrefixMarkup\n      span(\n        v-if=\"prefix\",\n        :className=\"styles.Prefix\",\n      )\n        component(:is=\"prefix\")\n\n      span(\n        v-if=\"icon\",\n        :class=\"styles.Prefix\",\n      )\n        Icon(:source=\"icon\")\n      span(\n        v-if=\"image\",\n        role=\"presentation\",\n        :class=\"styles.Prefix\",\n        :style=\"{ backgroundImage: `url(${image})`}\",\n      )\n      //- TextMarkup\n      span(\n        :className=\"styles.Text\",\n      )\n        div(v-if=\"helpText\")\n          Box\n            TruncateText(v-if=\"truncate && content\") {{ content }}\n            template(v-else-if=\"ellipsis\") {{ `${content}...` }}\n            template(v-else) {{ content }}\n          Text(\n            as=\"span\",\n            variant=\"bodySm\",\n            :tone=\"active || disabled ? undefined : 'subdued'\",\n          ) {{ helpText }}\n        div(v-else)\n          TruncateText(v-if=\"truncate && content\") {{ content }}\n          template(v-else-if=\"ellipsis\") {{ `${content}...` }}\n          template(v-else) {{ content }}\n      //- BadgeMarkup\n      span(\n        v-if=\"badge\",\n        :class=\"styles.Suffix\",\n      )\n        Badge(:tone=\"badge.tone\") {{ badge.content }}\n      //- SuffixMarkup\n      Box(v-if=\"suffix\")\n        span(:className=\"styles.Suffix\")\n          component(:is=\"suffix\")\nbutton(\n  v-else,\n  :id=\"id\",\n  type=\"button\",\n  :class=\"className\",\n  :disabled=\"disabled\",\n  :role=\"role\",\n  :aria-label=\"accessibilityLabel\",\n  @click=\"emits('action')\",\n  @mouseup=\"handleMouseUpByBlurring\",\n  @mouseenter=\"onMouseEnter\",\n)\n  Box(width=\"100%\")\n    InlineStack(\n      block-align=\"center\",\n      gap=\"150\",\n      :wrap=\"!truncate\",\n    )\n      //- PrefixMarkup\n      span(\n        v-if=\"prefix\",\n        :className=\"styles.Prefix\",\n      )\n        component(:is=\"prefix\")\n\n      span(\n        v-if=\"icon\",\n        :class=\"styles.Prefix\",\n      )\n        Icon(:source=\"icon\")\n      span(\n        v-if=\"image\",\n        role=\"presentation\",\n        :class=\"styles.Prefix\",\n        :style=\"{ backgroundImage: `url(${image})`}\",\n      )\n      //- TextMarkup\n      span(\n        :className=\"styles.Text\",\n      )\n        div(v-if=\"helpText\")\n          Box\n            TruncateText(v-if=\"truncate && content\") {{ content }}\n            template(v-else-if=\"ellipsis\") {{ `${content}...` }}\n            template(v-else) {{ content }}\n          Text(\n            as=\"span\",\n            variant=\"bodySm\",\n            :tone=\"active || disabled ? undefined : 'subdued'\",\n          ) {{ helpText }}\n        div(v-else)\n          TruncateText(v-if=\"truncate && content\") {{ content }}\n          template(v-else-if=\"ellipsis\") {{ `${content}...` }}\n          template(v-else) {{ content }}\n      //- BadgeMarkup\n      span(\n        v-if=\"badge\",\n        :class=\"styles.Suffix\",\n      )\n        Badge(:tone=\"badge.tone\") {{ badge.content }}\n      //- SuffixMarkup\n      Box(v-if=\"suffix\")\n        span(:className=\"styles.Suffix\")\n          component(:is=\"suffix\")\n</template>\n\n<script setup lang=\"ts\">\nimport { type VNode, computed } from 'vue';\nimport { classNames } from '@/utilities/css';\nimport { handleMouseUpByBlurring } from '@/utilities/focus';\nimport {\n  Icon,\n  ScrollTo,\n  UnstyledLink,\n  Badge,\n  Text,\n  InlineStack,\n  Box,\n} from '@/components';\nimport TruncateText from '../TruncateText.vue';\nimport type { ActionListItemDescriptor, VueNode } from '@/utilities/types';\nimport styles from '@polaris/components/ActionList/ActionList.module.css';\n\ntype ItemProps = ActionListItemDescriptor;\n\nconst props = withDefaults(defineProps<ItemProps>(), {\n  variant: 'default',\n});\nconst emits = defineEmits<{\n  /** Callback when any item is clicked or keypressed */\n  'action': [];\n}>();\nconst slots = defineSlots<{\n  default?: (_?: VueNode) => VNode[];\n  /** Additional hint text to display with item */\n  helpText?: (_?: VueNode) => VNode[];\n}>();\n\nconst className = computed(() => classNames(\n  styles.Item,\n  props.disabled && styles.disabled,\n  props.destructive && styles.destructive,\n  props.active && styles.active,\n  props.variant === 'default' && styles.default,\n  props.variant === 'indented' && styles.indented,\n  props.variant === 'menu' && styles.menu,\n));\n</script>\n"],"names":["_useSlots"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwJA,UAAM,QAAQ;AAGd,UAAM,QAAQ;AAIAA;AAMR,UAAA,YAAY,SAAS,MAAM;AAAA,MAC/B,OAAO;AAAA,MACP,MAAM,YAAY,OAAO;AAAA,MACzB,MAAM,eAAe,OAAO;AAAA,MAC5B,MAAM,UAAU,OAAO;AAAA,MACvB,MAAM,YAAY,aAAa,OAAO;AAAA,MACtC,MAAM,YAAY,cAAc,OAAO;AAAA,MACvC,MAAM,YAAY,UAAU,OAAO;AAAA,IAAA,CACpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}