{"version":3,"file":"SectionMarkUp.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../../../src/components/ActionList/components/Section/SectionMarkUp.vue"],"sourcesContent":["<template lang=\"pug\">\n//- TittleMarkup\ntemplate(v-if=\"section.title\")\n  Box(\n    v-if=\"section.title\",\n    paddingBlockStart=\"300\"\n    paddingBlockEnd=\"100\"\n    paddingInlineStart=\"300\"\n    paddingInlineEnd=\"300\"\n  )\n    Text(\n      as=\"p\",\n      variant=\"headingSm\"\n    ) {{ section.title }}\n//- End TittleMarkup\nBox(\n  as=\"div\",\n  padding=\"150\",\n  :padding-block-stack=\"hasMultipleSections ? '0' : undefined\",\n  :tabIndex=\"!hasMultipleSections ? -1 : undefined\",\n)\n  BlockStack(\n    gap=\"050\",\n    as=\"ul\",\n    :role=\"sectionRole || undefined\",\n  )\n    Box(\n      as=\"li\",\n      v-for=\"({content, helpText, onAction, ...item}, index) in section.items\",\n      :key=\"`${content}-${index}`\",\n      :role=\"actionRole === 'menuitem' ? 'presentation' : undefined\",\n    )\n      InlineStack(:wrap=\"false\")\n        Item(\n          v-bind=\"item\",\n          :content=\"content\",\n          :help-text=\"helpText\",\n          :role=\"actionRole\",\n          @action=\"handleAction(onAction)\",\n        )\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue';\nimport {\n  Box,\n  Text,\n  InlineStack,\n  BlockStack,\n} from '@/components';\nimport Item from '../Item/Item.vue';\nimport type { ActionListItemDescriptor, ActionListSection } from '@/utilities/types';\n\ninterface Props {\n    /** Section of action items */\n  section: ActionListSection;\n  /** Should there be multiple sections */\n  hasMultipleSections: boolean;\n  /** Defines a specific role attribute for each action in the list */\n  actionRole?: 'option' | 'menuitem' | string;\n  /** Callback when any item is clicked or keypressed */\n  onActionAnyItem?: ActionListItemDescriptor['onAction'];\n  /** Whether it is the first in a group of sections */\n  isFirst?: boolean;\n}\n\nconst props = defineProps<Props>();\nconst emits = defineEmits<{\n  'action-any-item': [];\n}>();\n\nconst handleAction = (itemOnAction: ActionListItemDescriptor['onAction']) => {\n  if (itemOnAction) {\n    itemOnAction();\n  }\n\n  emits('action-any-item');\n};\n\nconst sectionRole = computed(() => {\n  if (props.actionRole) {\n    if (props.actionRole === 'option') {\n      return 'presentation';\n    }\n\n    if (props.actionRole === 'menuitem') {\n      return !props.hasMultipleSections ? 'menu' : 'presentation';\n    }\n\n    return undefined;\n  }\n\n  return undefined\n})\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAkEA,UAAM,QAAQ;AACd,UAAM,QAAQ;AAIR,UAAA,eAAe,CAAC,iBAAuD;AAC3E,UAAI,cAAc;AACH;MACf;AAEA,YAAM,iBAAiB;AAAA,IAAA;AAGnB,UAAA,cAAc,SAAS,MAAM;AACjC,UAAI,MAAM,YAAY;AAChB,YAAA,MAAM,eAAe,UAAU;AAC1B,iBAAA;AAAA,QACT;AAEI,YAAA,MAAM,eAAe,YAAY;AAC5B,iBAAA,CAAC,MAAM,sBAAsB,SAAS;AAAA,QAC/C;AAEO,eAAA;AAAA,MACT;AAEO,aAAA;AAAA,IAAA,CACR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}