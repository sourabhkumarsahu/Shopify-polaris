import { defineComponent, useSlots, inject, computed, openBlock, createElementBlock, normalizeClass, unref, createVNode, createCommentVNode, createBlock, withCtx, createTextVNode, toDisplayString, renderSlot } from "vue";
import { u as useHasSlot } from "../../use/useHasSlot.js";
import { c as classNames, v as variationName } from "../../utilities/css.js";
import { g as getDefaultAccessibilityLabel } from "./utils.js";
import { C as CompleteSvg } from "../../assets/Badge/complete.js";
import { P as PartiallySvg } from "../../assets/Badge/partially.js";
import { I as IncompleteSvg } from "../../assets/Badge/incomplete.js";
import { _ as _sfc_main$1 } from "../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
const Badge = "Polaris-Badge";
const toneSuccess = "Polaris-Badge--toneSuccess";
const toneInfo = "Polaris-Badge--toneInfo";
const toneAttention = "Polaris-Badge--toneAttention";
const toneWarning = "Polaris-Badge--toneWarning";
const toneCritical = "Polaris-Badge--toneCritical";
const toneNew = "Polaris-Badge--toneNew";
const toneMagic = "Polaris-Badge--toneMagic";
const toneEnabled = "Polaris-Badge--toneEnabled";
const sizeLarge = "Polaris-Badge--sizeLarge";
const withinFilter = "Polaris-Badge--withinFilter";
const Icon = "Polaris-Badge__Icon";
const PipContainer = "Polaris-Badge__PipContainer";
const styles = {
  Badge,
  toneSuccess,
  "toneSuccess-strong": "Polaris-Badge__toneSuccess--strong",
  toneInfo,
  "toneInfo-strong": "Polaris-Badge__toneInfo--strong",
  toneAttention,
  "toneAttention-strong": "Polaris-Badge__toneAttention--strong",
  toneWarning,
  "toneWarning-strong": "Polaris-Badge__toneWarning--strong",
  toneCritical,
  "toneCritical-strong": "Polaris-Badge__toneCritical--strong",
  toneNew,
  toneMagic,
  "toneRead-only": "Polaris-Badge__toneRead--only",
  toneEnabled,
  sizeLarge,
  withinFilter,
  Icon,
  PipContainer
};
const DEFAULT_SIZE = "medium";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Badge",
  props: {
    tone: {},
    progress: {},
    icon: {},
    size: { default: DEFAULT_SIZE },
    toneAndProgressLabelOverride: {}
  },
  setup(__props) {
    const { hasSlot } = useHasSlot();
    const props = __props;
    const slots = useSlots();
    const withinFilter2 = inject("within-filter", false);
    const className = computed(() => {
      return classNames(
        styles.Badge,
        props.tone && styles[variationName("tone", props.tone)],
        props.size && props.size !== DEFAULT_SIZE && styles[variationName("size", props.size)],
        withinFilter2 && styles.withinFilter
      );
    });
    const accessibilityLabel = computed(() => {
      return props.toneAndProgressLabelOverride ? props.toneAndProgressLabelOverride : getDefaultAccessibilityLabel(props.progress, props.tone);
    });
    const progressIconMap = computed(() => {
      return {
        complete: CompleteSvg,
        partiallyComplete: PartiallySvg,
        incomplete: IncompleteSvg
      };
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", {
        class: normalizeClass(className.value)
      }, [
        _ctx.progress && !_ctx.icon ? (openBlock(), createElementBlock("span", {
          key: 0,
          class: normalizeClass(unref(styles).Icon)
        }, [
          createVNode(unref(_sfc_main$1), {
            source: progressIconMap.value[_ctx.progress],
            "accessibility-label": accessibilityLabel.value
          }, null, 8, ["source", "accessibility-label"])
        ], 2)) : createCommentVNode("", true),
        Boolean(accessibilityLabel.value) ? (openBlock(), createBlock(unref(_sfc_main$2), {
          key: 1,
          as: "span",
          "visually-hidden": ""
        }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString(accessibilityLabel.value), 1)
          ]),
          _: 1
        })) : createCommentVNode("", true),
        _ctx.icon ? (openBlock(), createElementBlock("span", {
          key: 2,
          class: normalizeClass(unref(styles).Icon)
        }, [
          createVNode(unref(_sfc_main$1), { source: _ctx.icon }, null, 8, ["source"])
        ], 2)) : createCommentVNode("", true),
        unref(hasSlot)(slots.default) ? (openBlock(), createBlock(unref(_sfc_main$2), {
          key: 3,
          as: "span",
          variant: "bodySm",
          "font-weight": _ctx.tone === "new" ? "medium" : void 0
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["font-weight"])) : createCommentVNode("", true)
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Badge.vue_vue_type_script_setup_true_lang.js.map
