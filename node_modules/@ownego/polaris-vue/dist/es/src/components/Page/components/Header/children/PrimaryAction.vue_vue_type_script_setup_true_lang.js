import { defineComponent, useSlots, computed, openBlock, createElementBlock, normalizeClass, unref, createVNode, withCtx, renderSlot, Fragment, createBlock } from "vue";
import { u as useHasSlot } from "../../../../../use/useHasSlot.js";
import { u as useMediaQueryContext } from "../../../../../use/useMediaQuery.js";
import { _ as _sfc_main$1 } from "../../../../Box/Box.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../../../../Button/ButtonFrom.vue_vue_type_script_setup_true_lang.js";
import { s as styles } from "../Header.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../../../../Tooltip/Tooltip.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "PrimaryAction",
  props: {
    primary: { type: Boolean },
    destructive: { type: Boolean },
    id: {},
    content: {},
    accessibilityLabel: {},
    url: {},
    external: { type: Boolean },
    target: {},
    onAction: { type: Function },
    onMouseEnter: { type: Function },
    onTouchStart: { type: Function },
    disabled: { type: Boolean },
    loading: { type: Boolean },
    icon: {},
    helpText: { type: [String, Number, Boolean, Function, Object, null] }
  },
  setup(__props) {
    const props = __props;
    const slots = useSlots();
    const { hasSlot } = useHasSlot();
    const { isNavigationCollapsed } = useMediaQueryContext();
    const primary = computed(() => {
      return !props.primary ? true : props.primary;
    });
    const iconOnly = computed(() => {
      return shouldShowIconOnly(isNavigationCollapsed.value, props);
    });
    function shouldShowIconOnly(isMobile, action) {
      let { content, accessibilityLabel, icon } = action;
      if (icon == null) {
        return { ...action, icon: void 0 };
      }
      if (isMobile) {
        accessibilityLabel = accessibilityLabel || content;
        content = void 0;
      }
      return {
        ...action,
        content,
        accessibilityLabel,
        icon
      };
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles).PrimaryActionWrapper)
      }, [
        createVNode(unref(_sfc_main$1), { printHidden: "" }, {
          default: withCtx(() => [
            unref(hasSlot)(unref(slots).default) ? renderSlot(_ctx.$slots, "default", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              _ctx.helpText ? (openBlock(), createBlock(unref(_sfc_main$2), {
                key: 0,
                content: `${_ctx.helpText}`
              }, {
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$3), {
                    action: iconOnly.value,
                    overrides: { variant: primary.value ? "primary" : void 0 },
                    onAction: _cache[0] || (_cache[0] = () => {
                      _ctx.onAction && _ctx.onAction();
                    }),
                    onMouseenter: _cache[1] || (_cache[1] = () => {
                      _ctx.onMouseEnter && _ctx.onMouseEnter();
                    }),
                    onTouchstart: _cache[2] || (_cache[2] = () => {
                      _ctx.onTouchStart && _ctx.onTouchStart();
                    })
                  }, null, 8, ["action", "overrides"])
                ]),
                _: 1
              }, 8, ["content"])) : (openBlock(), createBlock(unref(_sfc_main$3), {
                key: 1,
                action: iconOnly.value,
                overrides: { variant: primary.value ? "primary" : void 0 },
                onAction: _cache[3] || (_cache[3] = () => {
                  _ctx.onAction && _ctx.onAction();
                }),
                onMouseenter: _cache[4] || (_cache[4] = () => {
                  _ctx.onMouseEnter && _ctx.onMouseEnter();
                }),
                onTouchstart: _cache[5] || (_cache[5] = () => {
                  _ctx.onTouchStart && _ctx.onTouchStart();
                })
              }, null, 8, ["action", "overrides"]))
            ], 64))
          ]),
          _: 3
        })
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=PrimaryAction.vue_vue_type_script_setup_true_lang.js.map
