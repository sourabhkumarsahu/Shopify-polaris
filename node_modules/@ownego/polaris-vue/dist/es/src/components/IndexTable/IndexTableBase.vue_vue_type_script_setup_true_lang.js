import { defineComponent, useSlots, toRef, ref, computed, onMounted, watch, h, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, createBlock, resolveDynamicComponent, createCommentVNode, Fragment, createVNode, withCtx, renderSlot, renderList, mergeProps } from "vue";
import { d as debounce } from "../../../polaris/polaris-react/src/utilities/debounce.js";
import { c as classNames } from "../../utilities/css.js";
import { u as useToggle } from "../../use/useToggle.js";
import { u as useI18n } from "../../use/useI18n.js";
import { u as useHasSlot } from "../../use/useHasSlot.js";
import { _ as _sfc_main$b } from "../Badge/Badge.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../BulkActions/BulkActions.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$c } from "../UnstyledButton/UnstyledButton.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$8 } from "../Checkbox/Checkbox.vue_vue_type_script_setup_true_lang.js";
import { l as SortAscendingIcon, k as SortDescendingIcon } from "../../../vendor.js";
import { _ as _sfc_main$6 } from "../EmptySearchResult/EmptySearchResult.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../EventListener/EventListener.vue_vue_type_script_setup_true_lang.js";
import { S as SELECT_ALL_ITEMS, a as SelectionType } from "../IndexProvider/types.js";
import { u as useIndexContext, a as useIndexSelectionChangeContext } from "../IndexProvider/context.js";
import { g as getTableHeadingsBySelector } from "./utils.js";
import { _ as _sfc_main$5 } from "./components/ScrollContainer/ScrollContainer.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$a } from "../LegacyStack/LegacyStack.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$7 } from "../Pagination/Pagination.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../Spinner/Spinner.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../Sticky/Sticky.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$9 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$d } from "../Tooltip/Tooltip.vue_vue_type_script_setup_true_lang.js";
const IndexTable = "Polaris-IndexTable";
const IndexTableWrapper = "Polaris-IndexTable__IndexTableWrapper";
const IndexTableWrapperWithSelectAllActions = "Polaris-IndexTable__IndexTableWrapperWithSelectAllActions";
const LoadingPanel = "Polaris-IndexTable__LoadingPanel";
const LoadingPanelEntered = "Polaris-IndexTable__LoadingPanelEntered";
const LoadingPanelRow = "Polaris-IndexTable__LoadingPanelRow";
const LoadingPanelText = "Polaris-IndexTable__LoadingPanelText";
const Table = "Polaris-IndexTable__Table";
const TableCell = "Polaris-IndexTable__TableCell";
const StickyTable = "Polaris-IndexTable__StickyTable";
const TableRow = "Polaris-IndexTable__TableRow";
const toneSuccess = "Polaris-IndexTable--toneSuccess";
const toneWarning = "Polaris-IndexTable--toneWarning";
const toneCritical = "Polaris-IndexTable--toneCritical";
const toneSubdued = "Polaris-IndexTable--toneSubdued";
const ZebraStriping = "Polaris-IndexTable__ZebraStriping";
const TableHeading = "Polaris-IndexTable__TableHeading";
const TableHeadingSortButton = "Polaris-IndexTable__TableHeadingSortButton";
const TableHeadingSortIcon = "Polaris-IndexTable__TableHeadingSortIcon";
const TableHeadingUnderline = "Polaris-IndexTable__TableHeadingUnderline";
const TableHeadingTooltipUnderlinePlaceholder = "Polaris-IndexTable__TableHeadingTooltipUnderlinePlaceholder";
const TableHeadingSortSvg = "Polaris-IndexTable__TableHeadingSortSvg";
const SortableTableHeadingWithCustomMarkup = "Polaris-IndexTable__SortableTableHeadingWithCustomMarkup";
const SortableTableHeaderWrapper = "Polaris-IndexTable__SortableTableHeaderWrapper";
const ColumnHeaderCheckboxWrapper = "Polaris-IndexTable__ColumnHeaderCheckboxWrapper";
const FirstStickyHeaderElement = "Polaris-IndexTable__FirstStickyHeaderElement";
const StickyTableHeader = "Polaris-IndexTable__StickyTableHeader";
const StickyTableHeadings = "Polaris-IndexTable__StickyTableHeadings";
const unselectable = "Polaris-IndexTable--unselectable";
const ScrollLeft = "Polaris-IndexTable__ScrollLeft";
const ScrollRight = "Polaris-IndexTable__ScrollRight";
const SelectAllActionsWrapper = "Polaris-IndexTable__SelectAllActionsWrapper";
const SelectAllActionsWrapperWithPagination = "Polaris-IndexTable__SelectAllActionsWrapperWithPagination";
const SelectAllActionsWrapperSticky = "Polaris-IndexTable__SelectAllActionsWrapperSticky";
const SelectAllActionsWrapperAtEnd = "Polaris-IndexTable__SelectAllActionsWrapperAtEnd";
const SelectAllActionsWrapperAtEndAppear = "Polaris-IndexTable__SelectAllActionsWrapperAtEndAppear";
const BulkActionsWrapper = "Polaris-IndexTable__BulkActionsWrapper";
const BulkActionsWrapperVisible = "Polaris-IndexTable__BulkActionsWrapperVisible";
const PaginationWrapper = "Polaris-IndexTable__PaginationWrapper";
const PaginationWrapperScrolledPastTop = "Polaris-IndexTable__PaginationWrapperScrolledPastTop";
const ScrollBarContainer = "Polaris-IndexTable__ScrollBarContainer";
const ScrollBarContainerWithPagination = "Polaris-IndexTable__ScrollBarContainerWithPagination";
const ScrollBarContainerScrolledPastTop = "Polaris-IndexTable__ScrollBarContainerScrolledPastTop";
const ScrollBarContainerWithSelectAllActions = "Polaris-IndexTable__ScrollBarContainerWithSelectAllActions";
const ScrollBarContainerSelectAllActionsSticky = "Polaris-IndexTable__ScrollBarContainerSelectAllActionsSticky";
const scrollBarContainerCondensed = "Polaris-IndexTable--scrollBarContainerCondensed";
const scrollBarContainerHidden = "Polaris-IndexTable--scrollBarContainerHidden";
const ScrollBar = "Polaris-IndexTable__ScrollBar";
const disableTextSelection = "Polaris-IndexTable--disableTextSelection";
const EmptySearchResultWrapper = "Polaris-IndexTable__EmptySearchResultWrapper";
const condensedRow = "Polaris-IndexTable--condensedRow";
const CondensedList = "Polaris-IndexTable__CondensedList";
const HeaderWrapper = "Polaris-IndexTable__HeaderWrapper";
const ScrollBarContent = "Polaris-IndexTable__ScrollBarContent";
const styles = {
  IndexTable,
  IndexTableWrapper,
  "IndexTableWrapper-scrollBarHidden": "Polaris-IndexTable__IndexTableWrapper--scrollBarHidden",
  IndexTableWrapperWithSelectAllActions,
  LoadingPanel,
  LoadingPanelEntered,
  LoadingPanelRow,
  LoadingPanelText,
  Table,
  "Table-scrolling": "Polaris-IndexTable__Table--scrolling",
  "TableCell-first": "Polaris-IndexTable__TableCell--first",
  "StickyTable-scrolling": "Polaris-IndexTable__StickyTable--scrolling",
  TableCell,
  "TableHeading-first": "Polaris-IndexTable__TableHeading--first",
  "TableHeading-second": "Polaris-IndexTable__TableHeading--second",
  "Table-sticky": "Polaris-IndexTable__Table--sticky",
  StickyTable,
  "Table-unselectable": "Polaris-IndexTable__Table--unselectable",
  TableRow,
  "TableRow-unclickable": "Polaris-IndexTable__TableRow--unclickable",
  toneSuccess,
  "TableRow-child": "Polaris-IndexTable__TableRow--child",
  toneWarning,
  toneCritical,
  toneSubdued,
  "TableRow-subheader": "Polaris-IndexTable__TableRow--subheader",
  "TableRow-selected": "Polaris-IndexTable__TableRow--selected",
  "TableRow-hovered": "Polaris-IndexTable__TableRow--hovered",
  "TableRow-disabled": "Polaris-IndexTable__TableRow--disabled",
  ZebraStriping,
  TableHeading,
  "TableHeading-flush": "Polaris-IndexTable__TableHeading--flush",
  "TableHeading-align-center": "Polaris-IndexTable--tableHeadingAlignCenter",
  "TableHeading-align-end": "Polaris-IndexTable--tableHeadingAlignEnd",
  "TableHeading-extra-padding-right": "Polaris-IndexTable--tableHeadingExtraPaddingRight",
  "TableHeading-sortable": "Polaris-IndexTable__TableHeading--sortable",
  TableHeadingSortButton,
  TableHeadingSortIcon,
  "TableHeadingSortButton-heading-align-end": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEnd",
  "TableHeadingSortButton-heading-align-end-currently-sorted": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEndCurrentlySorted",
  "TableHeadingSortIcon-heading-align-end": "Polaris-IndexTable--tableHeadingSortIconHeadingAlignEnd",
  "TableHeadingSortButton-heading-align-end-previously-sorted": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEndPreviouslySorted",
  "right-aligned-sort-button-slide-out": "Polaris-IndexTable--rightAlignedSortButtonSlideOut",
  "reveal-right-aligned-sort-button-icon": "Polaris-IndexTable--revealRightAlignedSortButtonIcon",
  TableHeadingUnderline,
  TableHeadingTooltipUnderlinePlaceholder,
  "TableHeadingSortIcon-visible": "Polaris-IndexTable__TableHeadingSortIcon--visible",
  TableHeadingSortSvg,
  SortableTableHeadingWithCustomMarkup,
  SortableTableHeaderWrapper,
  ColumnHeaderCheckboxWrapper,
  FirstStickyHeaderElement,
  "TableHeading-unselectable": "Polaris-IndexTable__TableHeading--unselectable",
  "TableCell-flush": "Polaris-IndexTable__TableCell--flush",
  "Table-sticky-scrolling": "Polaris-IndexTable--tableStickyScrolling",
  "StickyTableHeader-sticky-scrolling": "Polaris-IndexTable--stickyTableHeaderStickyScrolling",
  "TableHeading-last": "Polaris-IndexTable__TableHeading--last",
  "Table-sticky-last": "Polaris-IndexTable--tableStickyLast",
  "StickyTableHeader-sticky-last": "Polaris-IndexTable--stickyTableHeaderStickyLast",
  "Table-sortable": "Polaris-IndexTable__Table--sortable",
  StickyTableHeader,
  "StickyTableHeader-isSticky": "Polaris-IndexTable__StickyTableHeader--isSticky",
  StickyTableHeadings,
  "StickyTableHeading-second": "Polaris-IndexTable__StickyTableHeading--second",
  unselectable,
  "StickyTableHeading-second-scrolling": "Polaris-IndexTable--stickyTableHeadingSecondScrolling",
  ScrollLeft,
  ScrollRight,
  "ScrollRight-onboarding": "Polaris-IndexTable__ScrollRight--onboarding",
  SelectAllActionsWrapper,
  SelectAllActionsWrapperWithPagination,
  SelectAllActionsWrapperSticky,
  SelectAllActionsWrapperAtEnd,
  SelectAllActionsWrapperAtEndAppear,
  BulkActionsWrapper,
  BulkActionsWrapperVisible,
  PaginationWrapper,
  PaginationWrapperScrolledPastTop,
  ScrollBarContainer,
  ScrollBarContainerWithPagination,
  ScrollBarContainerScrolledPastTop,
  ScrollBarContainerWithSelectAllActions,
  ScrollBarContainerSelectAllActionsSticky,
  scrollBarContainerCondensed,
  scrollBarContainerHidden,
  ScrollBar,
  disableTextSelection,
  EmptySearchResultWrapper,
  condensedRow,
  CondensedList,
  HeaderWrapper,
  "StickyTable-condensed": "Polaris-IndexTable__StickyTable--condensed",
  "StickyTableHeader-condensed": "Polaris-IndexTable__StickyTableHeader--condensed",
  ScrollBarContent
};
const _hoisted_1 = ["data-selectmode"];
const SCROLL_BAR_PADDING = 16;
const SCROLL_BAR_DEBOUNCE_PERIOD = 300;
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "IndexTableBase",
  props: {
    headings: {},
    promotedBulkActions: { default: () => [] },
    bulkActions: { default: () => [] },
    paginatedSelectAllActionText: {},
    paginatedSelectAllText: {},
    lastColumnSticky: { type: Boolean, default: false },
    selectable: { type: Boolean },
    sortable: {},
    defaultSortDirection: { default: "descending" },
    sortDirection: {},
    sortColumnIndex: {},
    sortToggleLabels: {},
    hasZebraStriping: { type: Boolean },
    pagination: {}
  },
  emits: ["sort"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const i18n = useI18n();
    const { hasSlot } = useHasSlot();
    const {
      loading,
      bulkSelectState,
      resourceName: contextResourceName,
      bulkActionsAccessibilityLabel,
      selectMode,
      selectable = toRef(props, "selectable"),
      paginatedSelectAllText,
      itemCount,
      hasMoreItems,
      selectedItemsCount,
      condensed
    } = useIndexContext();
    const handleSelectionChange = useIndexSelectionChangeContext();
    const {
      value: hasMoreLeftColumns,
      toggle: toggleHasMoreLeftColumns
    } = useToggle(false);
    const tablePosition = ref({ top: 0, left: 0 });
    const tableHeadingRects = ref([]);
    const scrollableContainerElement = ref(null);
    const scrollableContainerElementRef = ref(null);
    const tableElement = ref(null);
    const tableBodyElement = ref(null);
    const condensedListElement = ref(null);
    const tableInitialized = ref(false);
    const stickyWrapper = ref(null);
    const hideScrollContainer = ref(true);
    const canFitStickyColumn = ref(true);
    const tableHeadings = ref([]);
    const stickyTableHeadings = ref([]);
    const stickyHeaderWrapperElement = ref(null);
    const firstStickyHeaderElement = ref(null);
    const stickyHeaderElement = ref(null);
    const scrollBarElement = ref(null);
    const scrollContainerElement = ref(null);
    const scrollingWithBar = ref(false);
    const scrollingContainer = ref(false);
    const canScrollRight = ref(true);
    const isMounted = ref(false);
    const lastSortedColumnIndex = ref(props.sortColumnIndex);
    const renderAfterSelectEvent = ref(false);
    const lastSelectedItemsCount = ref(0);
    const hasSelected = ref(false);
    const selectedItemsCountValue = computed(() => {
      if (selectedItemsCount.value === SELECT_ALL_ITEMS || selectedItemsCount.value > 0) {
        return selectedItemsCount.value === SELECT_ALL_ITEMS ? `${itemCount.value}+` : selectedItemsCount.value;
      }
    });
    const selectAllActionsLabel = computed(() => i18n.translate("Polaris.IndexTable.selected", {
      selectedItemsCount: `${selectedItemsCountValue.value}`
    }));
    const paginatedSelectAllAction = computed(() => {
      if (!(selectable == null ? void 0 : selectable.value) || !(hasMoreItems == null ? void 0 : hasMoreItems.value)) {
        return;
      }
      const customActionText = props.paginatedSelectAllActionText ?? i18n.translate("Polaris.IndexTable.selectAllItems", {
        itemsLength: itemCount.value,
        resourceNamePlural: contextResourceName.plural.toLocaleLowerCase()
      });
      const actionText = selectedItemsCount.value === SELECT_ALL_ITEMS ? i18n.translate("Polaris.IndexTable.undo") : customActionText;
      return {
        content: actionText,
        onAction: handleSelectAllItemsInStore
      };
    });
    const stickyTableClassNames = computed(() => classNames(
      styles.StickyTable,
      hasMoreLeftColumns.value && styles["StickyTable-scrolling"],
      (condensed == null ? void 0 : condensed.value) && styles["StickyTable-condensed"]
    ));
    const scrollBarWrapperClassNames = computed(() => classNames(
      styles.ScrollBarContainer,
      props.pagination && styles.ScrollBarContainerWithPagination,
      (condensed == null ? void 0 : condensed.value) && styles.scrollBarContainerCondensed,
      hideScrollContainer.value && styles.scrollBarContainerHidden
    ));
    const scrollBarClassNames = computed(() => classNames(
      tableElement.value && tableInitialized.value && styles.ScrollBarContent
    ));
    const shouldShowActions = computed(
      () => !(condensed == null ? void 0 : condensed.value) || selectedItemsCount.value
    );
    const promotedActions = computed(
      () => shouldShowActions.value ? props.promotedBulkActions : []
    );
    const actions = computed(() => shouldShowActions.value ? props.bulkActions : []);
    const headerWrapperClassNames = computed(() => classNames(
      styles.HeaderWrapper,
      (!selectable.value || (condensed == null ? void 0 : condensed.value)) && styles.unselectable
    ));
    const stickyHeaderClassNames = computed(() => classNames(
      styles.StickyTableHeader,
      isSticky.value && styles["StickyTableHeader-isSticky"],
      // Has a sticky left column enabled
      canFitStickyColumn.value && styles["StickyTableHeader-sticky"],
      // ie; is scrolled to the right
      hasMoreLeftColumns.value && styles["StickyTableHeader-scrolling"],
      // Has a sticky right column enabled
      canFitStickyColumn.value && props.lastColumnSticky && styles["StickyTableHeader-sticky-last"],
      // ie; is scrolled to the left
      canFitStickyColumn.value && props.lastColumnSticky && canScrollRight.value && styles["StickyTableHeader-sticky-scrolling"]
    ));
    const condensedClassNames = computed(() => classNames(
      styles.CondensedList,
      props.hasZebraStriping && styles.ZebraStriping
    ));
    const isSortable = computed(() => {
      var _a;
      return (_a = props.sortable) == null ? void 0 : _a.some((v) => v);
    });
    const tableClassNames = computed(() => classNames(
      styles.Table,
      hasMoreLeftColumns.value && styles["Table-scrolling"],
      selectMode.value && styles.disableTextSelection,
      !selectable.value && styles["Table-unselectable"],
      canFitStickyColumn.value && styles["Table-sticky"],
      isSortable.value && styles["Table-sortable"],
      canFitStickyColumn.value && props.lastColumnSticky && styles["Table-sticky-last"],
      canFitStickyColumn.value && props.lastColumnSticky && canScrollRight.value && styles["Table-sticky-scrolling"],
      props.hasZebraStriping && styles.ZebraStriping
    ));
    const bulkActionsClassName = computed(() => classNames(
      styles.BulkActionsWrapper,
      selectMode.value && styles.BulkActionsWrapperVisible,
      (condensed == null ? void 0 : condensed.value) && styles["StickyTableHeader-condensed"],
      isSticky.value && styles["StickyTableHeader-isSticky"]
    ));
    const isSticky = ref(false);
    const onStickyChange = (value) => {
      isSticky.value = value;
    };
    const resizeTableHeadings = debounce(() => {
      if (!tableElement.value || !scrollableContainerElement.value) {
        return;
      }
      const boundingRect = scrollableContainerElement.value.getBoundingClientRect();
      tablePosition.value = {
        top: boundingRect.top,
        left: boundingRect.left
      };
      tableHeadingRects.value = tableHeadings.value.map((heading) => ({
        offsetWidth: heading.offsetWidth || 0,
        offsetLeft: heading.offsetLeft || 0
      }));
      if (tableHeadings.value.length === 0) {
        return;
      }
      if ((selectable == null ? void 0 : selectable.value) && tableHeadings.value.length > 1) {
        tableHeadings.value[1].style.left = `${tableHeadingRects.value[0].offsetWidth}px`;
        if (stickyTableHeadings.value.length) {
          stickyTableHeadings.value[1].style.left = `${tableHeadingRects.value[0].offsetWidth}px`;
        }
      }
      if (stickyTableHeadings.value.length) {
        stickyTableHeadings.value.forEach((heading, index) => {
          var _a;
          heading.style.minWidth = `${((_a = tableHeadingRects.value[index]) == null ? void 0 : _a.offsetWidth) || 0}px`;
        });
      }
    });
    onMounted(() => {
      isMounted.value = true;
      handleCanScrollRight();
      if (selectedItemsCount.value !== lastSelectedItemsCount.value) {
        renderAfterSelectEvent.value = true;
        lastSelectedItemsCount.value = selectedItemsCount.value;
      }
      if (!hasSelected.value && selectedItemsCount.value !== 0) {
        hasSelected.value = true;
      }
      if (scrollableContainerElementRef.value) {
        const { scrollableContainerRef } = scrollableContainerElementRef.value;
        scrollableContainerElement.value = scrollableContainerRef;
      }
      triggerResizeTableHeadings();
      triggerResizeTableScrollBar();
    });
    watch(
      () => [props.headings, firstStickyHeaderElement.value, tableInitialized.value],
      triggerResizeTableHeadings
    );
    watch(
      () => [tableInitialized.value, condensed == null ? void 0 : condensed.value],
      triggerResizeTableScrollBar
    );
    watch(
      () => tableInitialized.value,
      () => {
        if (tableInitialized.value) {
          handleCanFitStickyColumn();
        }
      }
    );
    const tableBodyRef = (node) => {
      if (node !== null && !tableInitialized.value) {
        tableInitialized.value = true;
      }
      tableBodyElement.value = node;
    };
    const handleSelectAllItemsInStore = () => {
      handleSelectionChange(
        selectedItemsCount.value === SELECT_ALL_ITEMS ? SelectionType.Page : SelectionType.All,
        true
      );
    };
    const debounceResizeTableScrollbar = () => debounce(
      resizeTableScrollBar,
      SCROLL_BAR_DEBOUNCE_PERIOD,
      {
        trailing: true
      }
    );
    const handleCanScrollRight = debounce(() => {
      if (!props.lastColumnSticky || !tableElement.value || !scrollableContainerElement.value) {
        return;
      }
      const tableRect = tableElement.value.getBoundingClientRect();
      const scrollableRect = scrollableContainerElement.value.getBoundingClientRect();
      canScrollRight.value = tableRect.width > scrollableRect.width;
    });
    const handleCanFitStickyColumn = () => {
      var _a;
      if (!scrollableContainerElement.value || !tableHeadings.value.length) {
        return;
      }
      const scrollableRect = (_a = scrollableContainerElement.value) == null ? void 0 : _a.getBoundingClientRect();
      const checkboxColumnWidth = selectable.value ? tableHeadings.value[0].getBoundingClientRect().width : 0;
      const firstStickyColumnWidth = tableHeadings.value[selectable.value ? 1 : 0].getBoundingClientRect().width;
      const lastColumnIsNotTheFirst = selectable.value ? tableHeadings.value.length > 2 : 1;
      const lastStickyColumnWidth = props.lastColumnSticky && lastColumnIsNotTheFirst ? tableHeadings.value[tableHeadings.value.length - 1].getBoundingClientRect().width : 0;
      const restOfContentMinWidth = 100;
      canFitStickyColumn.value = ((scrollableRect == null ? void 0 : scrollableRect.width) || 0) > firstStickyColumnWidth + checkboxColumnWidth + lastStickyColumnWidth + restOfContentMinWidth;
    };
    const handleResize = () => {
      var _a;
      (_a = scrollBarElement.value) == null ? void 0 : _a.style.setProperty(
        "--pc-index-table-scroll-bar-content-width",
        `0px`
      );
      resizeTableHeadings();
      debounceResizeTableScrollbar();
      handleCanScrollRight();
      handleCanFitStickyColumn();
    };
    const handleScrollContainerScroll = (tmpCanScrollLeft, tmpCanScrollRight) => {
      if (!scrollableContainerElement.value || !scrollBarElement.value) {
        return;
      }
      if (!scrollingWithBar.value) {
        scrollingContainer.value = true;
        scrollBarElement.value.scrollLeft = scrollableContainerElement.value.scrollLeft;
      }
      scrollingWithBar.value = false;
      if (stickyHeaderElement.value) {
        stickyHeaderElement.value.scrollLeft = scrollableContainerElement.value.scrollLeft;
      }
      if (tmpCanScrollLeft && !hasMoreLeftColumns.value || !tmpCanScrollLeft && hasMoreLeftColumns.value) {
        toggleHasMoreLeftColumns();
      }
      canScrollRight.value = tmpCanScrollRight;
    };
    const handleScrollBarScroll = () => {
      if (!scrollableContainerElement.value || !scrollBarElement.value) {
        return;
      }
      if (!scrollingContainer.value) {
        scrollingWithBar.value = true;
        scrollableContainerElement.value.scrollLeft = scrollBarElement.value.scrollLeft;
      }
      scrollingContainer.value = false;
    };
    const handleTogglePage = () => {
      handleSelectionChange(
        SelectionType.Page,
        Boolean(!(bulkSelectState == null ? void 0 : bulkSelectState.value) || (bulkSelectState == null ? void 0 : bulkSelectState.value) === "indeterminate")
      );
    };
    const getHeadingKey = (heading) => {
      if (heading.id) {
        return heading.id;
      }
      if (typeof heading.title === "string") {
        return heading.title;
      }
      return "";
    };
    function triggerResizeTableHeadings() {
      tableHeadings.value = getTableHeadingsBySelector(
        tableElement.value,
        "[data-index-table-heading]"
      );
      stickyTableHeadings.value = getTableHeadingsBySelector(
        stickyHeaderWrapperElement.value,
        "[data-index-table-sticky-heading]"
      );
      resizeTableHeadings();
    }
    function resizeTableScrollBar() {
      var _a, _b;
      if (scrollBarElement.value && tableElement.value && tableInitialized.value) {
        scrollBarElement.value.style.setProperty(
          "--pc-index-table-scroll-bar-content-width",
          `${tableElement.value.offsetWidth - SCROLL_BAR_PADDING}px`
        );
        hideScrollContainer.value = ((_a = scrollContainerElement.value) == null ? void 0 : _a.offsetWidth) === ((_b = tableElement.value) == null ? void 0 : _b.offsetWidth);
      }
    }
    function triggerResizeTableScrollBar() {
      resizeTableScrollBar();
      stickyWrapper.value = (condensed == null ? void 0 : condensed.value) ? condensedListElement.value : tableElement.value;
    }
    function handleSelectModeToggle() {
      handleSelectionChange(SelectionType.All, false);
    }
    function handleSelectPage(checked) {
      handleSelectionChange(SelectionType.Page, checked);
    }
    function handleSortHeadingClick(index, direction) {
      renderAfterSelectEvent.value = false;
      hasSelected.value = false;
      lastSortedColumnIndex.value = props.sortColumnIndex;
      emits("sort", index, direction);
    }
    const loadingMarkup = computed(() => {
      return (loading == null ? void 0 : loading.value) && h(
        "div",
        {
          class: classNames(
            styles.LoadingPanel,
            (loading == null ? void 0 : loading.value) && styles.LoadingPanelEntered
          )
        },
        () => h(
          "div",
          { class: styles.LoadingPanelRow },
          [
            h(_sfc_main$1, { size: "small" }),
            h(
              "span",
              { class: styles.LoadingPanelText },
              i18n.translate("Polaris.IndexTable.resourceLoadingAccessibilityLabel", {
                resourceNamePlural: contextResourceName.plural.toLocaleLowerCase()
              })
            )
          ]
        )
      );
    });
    const bulkActionsMarkup = computed(() => shouldShowActions.value && !(condensed == null ? void 0 : condensed.value) ? h(
      "div",
      { class: bulkActionsClassName.value },
      [
        h(
          _sfc_main$2,
          {
            selectMode: selectMode.value,
            paginatedSelectAllText: paginatedSelectAllText == null ? void 0 : paginatedSelectAllText.value,
            paginatedSelectAllAction: paginatedSelectAllAction.value,
            accessibilityLabel: bulkActionsAccessibilityLabel == null ? void 0 : bulkActionsAccessibilityLabel.value,
            selected: bulkSelectState == null ? void 0 : bulkSelectState.value,
            promotedActions: promotedActions.value,
            actions: actions.value,
            label: selectAllActionsLabel.value,
            buttonSize: "micro",
            onToggleAll: handleTogglePage,
            onSelectModeToggle: (condensed == null ? void 0 : condensed.value) && handleSelectModeToggle
          }
        ),
        loadingMarkup.value
      ]
    ) : null);
    const renderHeading = (heading, index, Tag, tagProps, id) => {
      var _a;
      const isSecond = index === 0;
      const isLast = index === props.headings.length - 1;
      const hasSortable = (_a = props.sortable) == null ? void 0 : _a.some((value) => value === true);
      const headingAlignment = heading.alignment || "start";
      const headingContentClassName = classNames(
        styles.TableHeading,
        headingAlignment === "center" && styles["TableHeading-align-center"],
        headingAlignment === "end" && styles["TableHeading-align-end"],
        hasSortable && styles["TableHeading-sortable"],
        isSecond && styles["TableHeading-second"],
        isLast && !heading.hidden && styles["TableHeading-last"],
        !selectable.value && styles["TableHeading-unselectable"],
        heading.flush && styles["TableHeading-flush"]
      );
      const stickyPositioningStyle = selectable.value !== false && isSecond && tableHeadingRects.value && tableHeadingRects.value.length > 0 ? { left: `${tableHeadingRects.value[0].offsetWidth}px` } : void 0;
      const headingContent = h(
        Tag,
        {
          id,
          class: headingContentClassName,
          key: getHeadingKey(heading),
          style: stickyPositioningStyle,
          ...tagProps
        },
        renderHeadingContent(heading, index)
      );
      if (index !== 0 || !selectable.value) {
        return [headingContent];
      }
      const checkboxClassName = classNames(
        styles.TableHeading,
        hasSortable && styles["TableHeading-sortable"],
        index === 0 && styles["TableHeading-first"]
      );
      const checkboxContent = h(
        Tag,
        {
          class: checkboxClassName,
          key: `${heading}-${index}`,
          ...tagProps
        },
        renderCheckboxContent()
      );
      return [checkboxContent, headingContent];
    };
    function renderCheckboxContent() {
      return h(
        "div",
        { class: styles.ColumnHeaderCheckboxWrapper },
        h(
          _sfc_main$8,
          {
            label: i18n.translate("Polaris.IndexTable.selectAllLabel", {
              resourceNamePlural: contextResourceName.plural
            }),
            labelHidden: true,
            checked: bulkSelectState == null ? void 0 : bulkSelectState.value,
            onChange: handleSelectPage
          }
        )
      );
    }
    function renderHeadingContent(heading, index) {
      var _a;
      let headingContent;
      const defaultTooltipProps = {
        width: heading.tooltipWidth ?? "default",
        activatorWrapper: "div",
        dismissOnMouseOut: true,
        persistOnClick: heading.tooltipPersistsOnClick
      };
      const defaultHeaderTooltipProps = {
        ...defaultTooltipProps,
        padding: "400",
        borderRadius: "200",
        preferredPosition: "above"
      };
      const headingTitle = h(
        _sfc_main$9,
        {
          as: "span",
          variant: "bodySm",
          fontWeight: "medium",
          visuallyHidden: heading.hidden
        },
        () => heading.title
      );
      if (heading.new) {
        headingContent = h(
          _sfc_main$a,
          { wrap: false, alignment: "center" },
          () => [
            headingTitle,
            h(_sfc_main$b, { tone: "new" }, i18n.translate("Polaris.IndexTable.onboardingBadgeText"))
          ]
        );
      } else {
        headingContent = headingTitle;
      }
      const style = {
        "--pc-index-table-heading-extra-padding-right": heading.paddingBlockEnd ? `var(--p-space-${heading.paddingBlockEnd})` : "0"
      };
      if ((_a = props.sortable) == null ? void 0 : _a[index]) {
        const isCurrentlySorted = index === props.sortColumnIndex;
        const isPreviouslySorted = !isCurrentlySorted && index === lastSortedColumnIndex.value;
        const isRenderAfterSelectEvent = renderAfterSelectEvent.value || !hasSelected.value && selectedItemsCount.value !== 0;
        const isAscending = props.sortDirection === "ascending";
        let newDirection = heading.defaultSortDirection ?? props.defaultSortDirection;
        let SourceComponent = newDirection === "ascending" ? SortAscendingIcon : SortDescendingIcon;
        if (isCurrentlySorted) {
          newDirection = isAscending ? "descending" : "ascending";
          SourceComponent = props.sortDirection === "ascending" ? SortAscendingIcon : SortDescendingIcon;
        }
        const iconMarkup = h(
          "span",
          {
            class: classNames(
              styles.TableHeadingSortIcon,
              (heading == null ? void 0 : heading.alignment) === "end" && styles["TableHeadingSortIcon-heading-align-end"],
              isCurrentlySorted && styles["TableHeadingSortIcon-visible"]
            )
          },
          () => h(SourceComponent, { className: styles.TableHeadingSortSvg, ariaHidden: true, focusable: false })
        );
        const defaultSortButtonProps = {
          onClick: () => handleSortHeadingClick(index, newDirection),
          class: classNames(
            styles.TableHeadingSortButton,
            !isCurrentlySorted && (heading == null ? void 0 : heading.alignment) === "end" && styles["TableHeadingSortButton-heading-align-end"],
            isCurrentlySorted && (heading == null ? void 0 : heading.alignment) === "end" && styles["TableHeadingSortButton-heading-align-end-currently-sorted"],
            isPreviouslySorted && !isRenderAfterSelectEvent && (heading == null ? void 0 : heading.alignment) === "end" && styles["TableHeadingSortButton-heading-align-end-previously-sorted"]
          ),
          tabIndex: selectMode.value ? -1 : 0
        };
        const sortMarkup = h(
          _sfc_main$c,
          defaultSortButtonProps,
          () => [
            iconMarkup,
            h(
              "span",
              {
                class: classNames(
                  props.sortToggleLabels && selectMode.value && heading.tooltipContent && styles.TableHeadingTooltipUnderlinePlaceholder
                )
              },
              () => headingContent
            )
          ]
        );
        if (!props.sortToggleLabels || selectMode.value) {
          return h(
            "div",
            { class: styles.SortableTableHeadingWithCustomMarkup },
            () => sortMarkup
          );
        }
        const tooltipDirection = isCurrentlySorted ? props.sortDirection : newDirection;
        const sortTooltipContent = props.sortToggleLabels[index][tooltipDirection];
        if (!heading.tooltipContent) {
          return h(
            "div",
            {
              style,
              class: classNames(
                heading.paddingBlockEnd && styles["TableHeading-extra-padding-right"]
              )
            },
            h(
              _sfc_main$d,
              {
                ...defaultTooltipProps,
                preferredPosition: "above"
              },
              {
                content: () => sortTooltipContent,
                default: () => sortMarkup
              }
            )
          );
        }
        if (heading.tooltipContent) {
          return h(
            "div",
            {
              style,
              class: classNames(
                styles.SortableTableHeadingWithCustomMarkup,
                heading.paddingBlockEnd && styles["TableHeading-extra-padding-right"]
              )
            },
            h(
              _sfc_main$c,
              { ...defaultSortButtonProps },
              () => [
                h(
                  _sfc_main$d,
                  { ...defaultHeaderTooltipProps },
                  {
                    content: () => heading.tooltipContent,
                    default: () => h(
                      "span",
                      { class: styles.TableHeadingUnderline },
                      headingContent
                    )
                  }
                ),
                h(
                  _sfc_main$d,
                  { ...defaultTooltipProps, preferredPosition: "above" },
                  () => iconMarkup
                )
              ]
            )
          );
        }
      }
      if (heading.tooltipContent) {
        return h(
          "div",
          {
            style,
            class: classNames(heading.paddingBlockEnd && styles["TableHeading-extra-padding-right"])
          },
          h(
            _sfc_main$d,
            { ...defaultHeaderTooltipProps, activatorWrapper: "span" },
            {
              content: () => heading.tooltipContent,
              default: () => h(
                "span",
                { class: classNames(styles.TableHeadingUnderline, styles.SortableTableHeaderWrapper) },
                headingContent
              )
            }
          )
        );
      }
      return h(
        "div",
        {
          style,
          class: classNames(heading.paddingBlockEnd && styles["TableHeading-extra-padding-right"])
        },
        headingContent
      );
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles).IndexTable)
      }, [
        createElementVNode("div", {
          class: normalizeClass(unref(styles).IndexTableWrapper)
        }, [
          !unref(condensed) && unref(loading) ? (openBlock(), createBlock(resolveDynamicComponent(loadingMarkup.value), { key: 0 })) : createCommentVNode("", true),
          unref(itemCount) > 0 ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            createVNode(unref(_sfc_main$3), {
              event: "resize",
              handler: handleResize
            }),
            createElementVNode("div", {
              class: normalizeClass(stickyTableClassNames.value),
              role: "presentation"
            }, [
              createVNode(unref(_sfc_main$4), {
                boundingElement: stickyWrapper.value,
                onStickyChange
              }, {
                default: withCtx(() => [
                  unref(condensed) ? (openBlock(), createElementBlock("div", {
                    key: 0,
                    class: normalizeClass(headerWrapperClassNames.value)
                  }, [
                    (openBlock(), createBlock(resolveDynamicComponent(loadingMarkup.value))),
                    renderSlot(_ctx.$slots, "sort")
                  ], 2)) : (openBlock(), createElementBlock("div", {
                    key: 1,
                    class: normalizeClass(stickyHeaderClassNames.value),
                    ref_key: "stickyHeaderWrapperElement",
                    ref: stickyHeaderWrapperElement
                  }, [
                    (openBlock(), createBlock(resolveDynamicComponent(loadingMarkup.value))),
                    createElementVNode("div", {
                      class: normalizeClass(unref(styles).StickyTableHeadings),
                      ref_key: "stickyHeaderElement",
                      ref: stickyHeaderElement
                    }, [
                      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.headings, (heading, index) => {
                        return openBlock(), createElementBlock(Fragment, {
                          key: getHeadingKey(heading)
                        }, [
                          (openBlock(true), createElementBlock(Fragment, null, renderList(renderHeading(heading, index, "div", { "data-index-table-sticky-heading": true }), (headingEl) => {
                            return openBlock(), createBlock(resolveDynamicComponent(headingEl));
                          }), 256))
                        ], 64);
                      }), 128))
                    ], 2)
                  ], 2)),
                  !unref(condensed) ? (openBlock(), createBlock(resolveDynamicComponent(bulkActionsMarkup.value), { key: 2 })) : createCommentVNode("", true)
                ]),
                _: 3
              }, 8, ["boundingElement"])
            ], 2),
            unref(condensed) ? (openBlock(), createElementBlock("ul", {
              key: 0,
              ref_key: "condensedListElement",
              ref: condensedListElement,
              class: normalizeClass(condensedClassNames.value),
              "data-selectmode": Boolean(unref(selectMode))
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 10, _hoisted_1)) : (openBlock(), createBlock(unref(_sfc_main$5), {
              key: 1,
              ref_key: "scrollableContainerElementRef",
              ref: scrollableContainerElementRef,
              onScroll: handleScrollContainerScroll
            }, {
              default: withCtx(() => [
                createElementVNode("table", {
                  ref_key: "tableElement",
                  ref: tableElement,
                  class: normalizeClass(tableClassNames.value)
                }, [
                  createElementVNode("thead", null, [
                    createElementVNode("tr", {
                      class: normalizeClass(unref(styles).HeadingRow)
                    }, [
                      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.headings, (heading, index) => {
                        return openBlock(), createElementBlock(Fragment, null, [
                          (openBlock(true), createElementBlock(Fragment, null, renderList(renderHeading(heading, index, "th", { "data-index-table-heading": true }, getHeadingKey(heading)), (headingEl) => {
                            return openBlock(), createBlock(resolveDynamicComponent(headingEl));
                          }), 256))
                        ], 64);
                      }), 256))
                    ], 2)
                  ]),
                  createElementVNode("tbody", { ref: tableBodyRef }, [
                    renderSlot(_ctx.$slots, "default")
                  ])
                ], 2)
              ]),
              _: 3
            }, 512))
          ], 64)) : (openBlock(), createElementBlock("div", {
            key: 2,
            class: normalizeClass(unref(styles).EmptySearchResultWrapper)
          }, [
            unref(hasSlot)(slots.emptyState) ? renderSlot(_ctx.$slots, "emptyState", { key: 0 }) : (openBlock(), createBlock(unref(_sfc_main$6), {
              key: 1,
              "with-illustration": "",
              title: unref(i18n).translate("Polaris.IndexTable.emptySearchTitle", { resourceNamePlural: unref(contextResourceName).plural }),
              description: unref(i18n).translate("Polaris.IndexTable.emptySearchDescription")
            }, null, 8, ["title", "description"]))
          ], 2)),
          unref(itemCount) > 0 ? (openBlock(), createElementBlock("div", {
            key: 3,
            ref_key: "scrollContainerElement",
            ref: scrollContainerElement,
            class: normalizeClass(scrollBarWrapperClassNames.value)
          }, [
            createElementVNode("div", {
              ref_key: "scrollBarElement",
              ref: scrollBarElement,
              class: normalizeClass(unref(styles).ScrollBar),
              onScroll: handleScrollBarScroll
            }, [
              createElementVNode("div", {
                class: normalizeClass(scrollBarClassNames.value)
              }, null, 2)
            ], 34)
          ], 2)) : createCommentVNode("", true),
          _ctx.pagination ? (openBlock(), createElementBlock("div", {
            key: 4,
            class: normalizeClass(unref(styles).PaginationWrapper)
          }, [
            createVNode(unref(_sfc_main$7), mergeProps({ type: "table" }, _ctx.pagination), null, 16)
          ], 2)) : createCommentVNode("", true)
        ], 2)
      ], 2);
    };
  }
});
export {
  _sfc_main as _,
  styles as s
};
//# sourceMappingURL=IndexTableBase.vue_vue_type_script_setup_true_lang.js.map
