import { defineComponent, useSlots, getCurrentInstance, ref, computed, onMounted, toRef, provide, openBlock, createBlock, resolveDynamicComponent, unref, normalizeClass, withCtx, createCommentVNode, renderSlot } from "vue";
import { u as useToggle } from "../../../../use/useToggle.js";
import { c as classNames, v as variationName } from "../../../../utilities/css.js";
import { b as useIndexRowContext, a as useIndexSelectionChangeContext } from "../../../IndexProvider/context.js";
import { a as SelectionType } from "../../../IndexProvider/types.js";
import { _ as _sfc_main$1 } from "../Checkbox/Checkbox.vue_vue_type_script_setup_true_lang.js";
import { s as styles } from "../../IndexTableBase.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Row",
  props: {
    id: {},
    selected: { type: [Boolean, String] },
    position: {},
    tone: {},
    disabled: { type: Boolean },
    selectionRange: {},
    rowType: { default: "data" },
    accessibilityLabel: {}
  },
  emits: ["navigation", "click"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    useSlots();
    const emits = __emit;
    const { selectable, selectMode, condensed } = useIndexRowContext();
    const onSelectionChange = useIndexSelectionChangeContext();
    const currentInstance = getCurrentInstance();
    const {
      value: hovered,
      setTrue: setHoverIn,
      setFalse: setHoverOut
    } = useToggle(false);
    const primaryLinkElement = ref(null);
    const isNavigating = ref(false);
    const tableRowRef = ref(null);
    const rowClassName = computed(() => {
      var _a;
      return classNames(
        styles.TableRow,
        props.rowType === "subheader" && styles["TableRow-subheader"],
        props.rowType === "child" && styles["TableRow-child"],
        selectable.value && (condensed == null ? void 0 : condensed.value) && styles.condensedRow,
        props.selected && styles["TableRow-selected"],
        hovered.value && !(condensed == null ? void 0 : condensed.value) && styles["TableRow-hovered"],
        props.disabled && styles["TableRow-disabled"],
        props.tone && styles[variationName("tone", props.tone)],
        !selectable.value && !((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onClick) && !primaryLinkElement.value && styles["TableRow-unclickable"]
      );
    });
    const handleInteraction = (event) => {
      event.stopPropagation();
      let selectionType = SelectionType.Single;
      if ("key" in event && event.key !== " " || !onSelectionChange) return;
      if (event.shiftKey) {
        selectionType = SelectionType.Multi;
      } else if (props.selectionRange) {
        selectionType = SelectionType.Range;
      }
      const selection = props.selectionRange ?? props.id;
      onSelectionChange(selectionType, !props.selected, selection, props.position);
    };
    const handleRowClick = (event) => {
      var _a, _b;
      if ((props.disabled || !selectable.value) && !((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onClick) && !primaryLinkElement.value) {
        return;
      }
      if (props.rowType === "subheader") {
        return;
      }
      if (!tableRowRef.value || isNavigating.value) {
        return;
      }
      event.stopPropagation();
      event.preventDefault();
      if ((_b = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _b.onClick) {
        emits("click");
        return;
      }
      if (primaryLinkElement.value && !selectMode.value) {
        isNavigating.value = true;
        const { ctrlKey, metaKey } = event;
        emits("navigation", props.id);
        if ((ctrlKey || metaKey) && primaryLinkElement.value instanceof HTMLAnchorElement) {
          isNavigating.value = false;
          window.open(primaryLinkElement.value.href, "_blank");
          return;
        }
        primaryLinkElement.value.dispatchEvent(
          new MouseEvent(event.type, event)
        );
      } else {
        isNavigating.value = false;
        handleInteraction(event);
      }
    };
    onMounted(() => {
      var _a;
      const el = (_a = tableRowRef.value) == null ? void 0 : _a.querySelector("[data-primary-link]");
      if (el) {
        primaryLinkElement.value = el;
      }
    });
    const contextValue = {
      itemId: toRef(props, "id"),
      selected: toRef(props, "selected"),
      disabled: toRef(props, "disabled"),
      position: toRef(props, "position"),
      onInteraction: handleInteraction
    };
    provide("rowContext", contextValue);
    provide("rowHoveredContext", hovered);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(unref(condensed) ? "li" : "tr"), {
        key: _ctx.id,
        id: _ctx.id,
        class: normalizeClass(rowClassName.value),
        ref_key: "tableRowRef",
        ref: tableRowRef,
        onClick: handleRowClick,
        onMouseenter: unref(setHoverIn),
        onMouseleave: unref(setHoverOut)
      }, {
        default: withCtx(() => [
          unref(selectable) ? (openBlock(), createBlock(unref(_sfc_main$1), {
            key: 0,
            accessibilityLabel: _ctx.accessibilityLabel
          }, null, 8, ["accessibilityLabel"])) : createCommentVNode("", true),
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 40, ["id", "class", "onMouseenter", "onMouseleave"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Row.vue_vue_type_script_setup_true_lang.js.map
