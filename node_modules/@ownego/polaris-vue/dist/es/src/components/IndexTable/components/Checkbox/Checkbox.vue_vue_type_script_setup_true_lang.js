import { defineComponent, ref, computed, onMounted, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, createVNode, withCtx, createTextVNode, toDisplayString } from "vue";
import { d as debounce } from "../../../../../polaris/polaris-react/src/utilities/debounce.js";
import { c as classNames } from "../../../../utilities/css.js";
import { u as useI18n } from "../../../../use/useI18n.js";
import { u as useIndexContext } from "../../../IndexProvider/context.js";
import { _ as _sfc_main$1 } from "../../../Checkbox/Checkbox.vue_vue_type_script_setup_true_lang.js";
import { s as styles$1 } from "../../IndexTableBase.vue_vue_type_script_setup_true_lang.js";
import { s as setRootProperty } from "../../../../../polaris/polaris-react/src/utilities/set-root-property.js";
import { u as useRowContext } from "../../context.js";
const Wrapper = "Polaris-IndexTable-Checkbox__Wrapper";
const styles = {
  Wrapper
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Checkbox",
  props: {
    accessibilityLabel: {}
  },
  setup(__props) {
    const props = __props;
    const i18n = useI18n();
    const indexContext = useIndexContext();
    const { resourceName } = indexContext;
    const { itemId, selected, disabled, position, onInteraction } = useRowContext();
    const checkboxNode = ref(null);
    const label = computed(() => props.accessibilityLabel || i18n.translate("Polaris.IndexTable.selectItem", {
      resourceName: resourceName == null ? void 0 : resourceName.singular
    }));
    const checkboxClassName = classNames(
      styles$1.TableCell,
      styles$1["TableCell-first"]
    );
    const handleResize = debounce(() => {
      if ((position == null ? void 0 : position.value) !== 0 || !checkboxNode.value) return;
      const { width } = checkboxNode.value.getBoundingClientRect();
      setRootProperty("--pc-checkbox-offset", `${width}px`);
    });
    onMounted(() => {
      handleResize();
      if (!checkboxNode.value) return;
      window.addEventListener("resize", handleResize);
    });
    onBeforeUnmount(() => {
      window.removeEventListener("resize", handleResize);
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("td", {
        ref_key: "checkboxNode",
        ref: checkboxNode,
        class: normalizeClass(unref(checkboxClassName))
      }, [
        createElementVNode("div", {
          class: normalizeClass(unref(styles).Wrapper),
          onClick: _cache[0] || (_cache[0] = //@ts-ignore
          (...args) => unref(onInteraction) && unref(onInteraction)(...args)),
          onKeyup: () => {
          }
        }, [
          createVNode(unref(_sfc_main$1), {
            id: `Select-${unref(itemId)}`,
            "label-hidden": "",
            checked: unref(selected),
            disabled: unref(disabled)
          }, {
            label: withCtx(() => [
              createTextVNode(toDisplayString(label.value), 1)
            ]),
            _: 1
          }, 8, ["id", "checked", "disabled"])
        ], 34)
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Checkbox.vue_vue_type_script_setup_true_lang.js.map
