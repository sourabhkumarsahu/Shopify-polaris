import { defineComponent, useSlots, computed, openBlock, createBlock, unref, withCtx, createVNode, mergeProps, createSlots, renderSlot } from "vue";
import { u as useHasSlot } from "../../use/useHasSlot.js";
import { _ as _sfc_main$1 } from "../IndexProvider/IndexProvider.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "./IndexTableBase.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "IndexTable",
  props: {
    headings: {},
    promotedBulkActions: {},
    bulkActions: {},
    paginatedSelectAllActionText: {},
    paginatedSelectAllText: {},
    lastColumnSticky: { type: Boolean },
    selectable: { type: Boolean, default: true },
    sortable: {},
    defaultSortDirection: {},
    sortDirection: {},
    sortColumnIndex: {},
    sortToggleLabels: {},
    hasZebraStriping: { type: Boolean },
    pagination: {},
    itemCount: {},
    selectedItemsCount: { default: 0 },
    resourceName: {},
    loading: { type: Boolean },
    hasMoreItems: { type: Boolean },
    condensed: { type: Boolean },
    onSelectionChange: {}
  },
  emits: ["sort", "selection-change"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const { hasSlot } = useHasSlot();
    const indexTableBaseProps = computed(() => {
      const {
        selectable,
        itemCount,
        selectedItemsCount,
        resourceName,
        loading,
        hasMoreItems,
        condensed,
        onSelectionChange: onSelectionChange2,
        paginatedSelectAllText,
        ...rest
      } = props;
      return rest;
    });
    const onSelectionChange = (selectionType, toggleType, selection) => {
      emits("selection-change", selectionType, toggleType, selection);
    };
    const onSort = (index, direction) => {
      emits("sort", index, direction);
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        selectable: _ctx.selectable && !_ctx.condensed,
        itemCount: _ctx.itemCount,
        selectedItemsCount: _ctx.selectedItemsCount,
        resourceName: _ctx.resourceName,
        loading: _ctx.loading,
        hasMoreItems: _ctx.hasMoreItems,
        condensed: _ctx.condensed,
        "paginated-select-all-text": _ctx.paginatedSelectAllText,
        onSelectionChange
      }, {
        default: withCtx(() => [
          createVNode(_sfc_main$2, mergeProps(indexTableBaseProps.value, { onSort }), createSlots({
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 2
          }, [
            unref(hasSlot)(slots.emptyState) ? {
              name: "emptyState",
              fn: withCtx(() => [
                renderSlot(_ctx.$slots, "emptyState")
              ]),
              key: "0"
            } : void 0,
            unref(hasSlot)(slots.sort) ? {
              name: "sort",
              fn: withCtx(() => [
                renderSlot(_ctx.$slots, "sort")
              ]),
              key: "1"
            } : void 0
          ]), 1040)
        ]),
        _: 3
      }, 8, ["selectable", "itemCount", "selectedItemsCount", "resourceName", "loading", "hasMoreItems", "condensed", "paginated-select-all-text"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=IndexTable.vue_vue_type_script_setup_true_lang.js.map
