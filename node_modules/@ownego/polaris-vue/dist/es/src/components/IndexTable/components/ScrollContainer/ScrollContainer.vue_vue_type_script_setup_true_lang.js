import { defineComponent, ref, onMounted, provide, openBlock, createElementBlock, normalizeClass, unref, renderSlot } from "vue";
import { d as debounce } from "../../../../../polaris/polaris-react/src/utilities/debounce.js";
import { s as scrollDefaultContext } from "../../context.js";
const ScrollContainer = "Polaris-IndexTable-ScrollContainer";
const styles = {
  ScrollContainer
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "ScrollContainer",
  emits: ["scroll"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const emits = __emit;
    const scrollableContainerRef = ref(null);
    const containerScroll = ref(scrollDefaultContext);
    onMounted(() => {
      if (scrollableContainerRef.value) {
        scrollableContainerRef.value.dispatchEvent(new Event("scroll"));
      }
    });
    const handleScroll = debounce(
      () => {
        if (!scrollableContainerRef.value) {
          return;
        }
        const availableScrollAmount = scrollableContainerRef.value.scrollWidth - scrollableContainerRef.value.offsetWidth;
        const canScrollLeft = scrollableContainerRef.value.scrollLeft > 0;
        const canScrollRight = scrollableContainerRef.value.scrollLeft < availableScrollAmount;
        emits("scroll", canScrollLeft, canScrollRight);
        containerScroll.value = {
          scrollableContainer: scrollableContainerRef.value,
          canScrollLeft,
          canScrollRight
        };
      },
      40,
      { trailing: true, leading: true, maxWait: 40 }
    );
    provide("scrollContext", containerScroll);
    __expose({ scrollableContainerRef });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "scrollableContainerRef",
        ref: scrollableContainerRef,
        class: normalizeClass(unref(styles).ScrollContainer),
        onScroll: _cache[0] || (_cache[0] = //@ts-ignore
        (...args) => unref(handleScroll) && unref(handleScroll)(...args))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 34);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=ScrollContainer.vue_vue_type_script_setup_true_lang.js.map
