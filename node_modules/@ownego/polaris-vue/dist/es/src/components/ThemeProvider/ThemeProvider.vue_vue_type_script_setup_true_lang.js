import { defineComponent, useSlots, computed, provide, openBlock, createBlock, resolveDynamicComponent, normalizeClass, withCtx, renderSlot } from "vue";
import { t as themeNameDefault, c as createThemeClassName } from "../../../vendor.js";
import { g as getTheme } from "../../utilities/use-theme.js";
import { c as classNames } from "../../utilities/css.js";
const themeContainer = "Polaris-ThemeProvider--themeContainer";
const styles = {
  themeContainer
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "ThemeProvider",
  props: {
    as: { default: "div" },
    className: {},
    theme: { default: themeNameDefault }
  },
  setup(__props) {
    const props = __props;
    useSlots();
    const classes = computed(() => classNames(
      createThemeClassName(props.theme),
      styles.themeContainer,
      props.className
    ));
    provide("themeName", props.theme);
    provide("theme", getTheme(props.theme));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.as), {
        class: normalizeClass(classes.value)
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=ThemeProvider.vue_vue_type_script_setup_true_lang.js.map
