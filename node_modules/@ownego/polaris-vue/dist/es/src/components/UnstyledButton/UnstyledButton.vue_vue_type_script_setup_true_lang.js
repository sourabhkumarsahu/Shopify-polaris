import { defineComponent, useAttrs, computed, openBlock, createElementBlock, normalizeProps, mergeProps, renderSlot, createBlock, unref, toHandlers, withCtx } from "vue";
import { h as handleMouseUpByBlurring } from "../../utilities/focus.js";
import { u as useDisableClick } from "../../utilities/use-disable-interaction.js";
import { _ as _sfc_main$1 } from "../UnstyledLink/UnstyledLink.vue_vue_type_script_setup_true_lang.js";
const _hoisted_1 = ["aria-disabled", "disabled", "type", "aria-busy", "aria-controls", "aria-expanded", "aria-describedby", "aria-checked", "aria-pressed", "tabindex"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "UnstyledButton",
  props: {
    className: {},
    id: {},
    url: {},
    external: { type: Boolean },
    target: {},
    download: { type: [String, Boolean] },
    submit: { type: Boolean },
    disabled: { type: Boolean },
    loading: { type: Boolean },
    pressed: { type: Boolean },
    accessibilityLabel: {},
    role: {},
    ariaControls: {},
    ariaExpanded: { type: Boolean },
    ariaDescribedBy: {},
    ariaChecked: {}
  },
  setup(__props) {
    const props = __props;
    const attrs = useAttrs();
    const getEventList = (events) => {
      const eventBindings = { mouseup: handleMouseUpByBlurring };
      for (const event of events) {
        const eventName = `on${capitalize(event)}`;
        if (attrs[eventName]) {
          eventBindings[event] = attrs[eventName];
        }
      }
      return eventBindings;
    };
    const buttonListeners = getEventList(
      ["blur", "focus", "keydown", "keypress", "keyup", "mouseover", "touchstart"]
    );
    const handleClick = () => useDisableClick(props.disabled, attrs.onClick);
    const commonProps = computed(() => ({
      id: props.id,
      class: props.className,
      "aria-label": props.accessibilityLabel
    }));
    const interactiveProps = computed(() => ({
      ...commonProps.value,
      role: props.role
    }));
    const linkListeners = getEventList(["blur", "focus", "mouseover", "touchstart"]);
    function capitalize(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    return (_ctx, _cache) => {
      return _ctx.url && _ctx.disabled ? (openBlock(), createElementBlock("a", normalizeProps(mergeProps({ key: 0 }, commonProps.value)), [
        renderSlot(_ctx.$slots, "default")
      ], 16)) : _ctx.url && !_ctx.disabled ? (openBlock(), createBlock(unref(_sfc_main$1), mergeProps({ key: 1 }, { ...unref(attrs), ...interactiveProps.value }, {
        url: _ctx.url,
        external: _ctx.external,
        download: _ctx.download ? _ctx.download : void 0,
        target: _ctx.target,
        onClick: handleClick
      }, toHandlers(unref(linkListeners))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16, ["url", "external", "download", "target"])) : (openBlock(), createElementBlock("button", mergeProps({ key: 2 }, { ...unref(attrs), ...interactiveProps.value }, {
        "aria-disabled": _ctx.disabled,
        disabled: _ctx.disabled,
        type: _ctx.submit ? "submit" : "button",
        "aria-busy": _ctx.loading ? true : void 0,
        "aria-controls": _ctx.ariaControls,
        "aria-expanded": _ctx.ariaExpanded,
        "aria-describedby": _ctx.ariaDescribedBy,
        "aria-checked": _ctx.ariaChecked,
        "aria-pressed": _ctx.pressed,
        tabindex: _ctx.disabled ? "-1" : void 0,
        onClick: handleClick
      }, toHandlers(unref(buttonListeners), true)), [
        renderSlot(_ctx.$slots, "default")
      ], 16, _hoisted_1));
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=UnstyledButton.vue_vue_type_script_setup_true_lang.js.map
