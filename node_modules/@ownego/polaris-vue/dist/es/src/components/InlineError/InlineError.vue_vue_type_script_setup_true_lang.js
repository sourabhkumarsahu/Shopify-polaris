import { defineComponent, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, createVNode, createBlock, withCtx, createTextVNode, toDisplayString, resolveDynamicComponent, createCommentVNode } from "vue";
import { e as errorTextID } from "./utils.js";
import { p as AlertCircleIcon } from "../../../vendor.js";
import { _ as _sfc_main$1 } from "../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
const InlineError = "Polaris-InlineError";
const Icon = "Polaris-InlineError__Icon";
const styles = {
  InlineError,
  Icon
};
const _hoisted_1 = ["id"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "InlineError",
  props: {
    message: {},
    fieldId: {}
  },
  setup(__props) {
    return (_ctx, _cache) => {
      return _ctx.message ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(unref(styles).InlineError),
        id: unref(errorTextID)(_ctx.fieldId)
      }, [
        createElementVNode("div", {
          class: normalizeClass(unref(styles).Icon)
        }, [
          createVNode(unref(_sfc_main$1), { source: unref(AlertCircleIcon) }, null, 8, ["source"])
        ], 2),
        typeof _ctx.message === "string" ? (openBlock(), createBlock(unref(_sfc_main$2), {
          key: 0,
          as: "span",
          variant: "bodyMd"
        }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString(_ctx.message), 1)
          ]),
          _: 1
        })) : (openBlock(), createBlock(resolveDynamicComponent(_ctx.message), { key: 1 }))
      ], 10, _hoisted_1)) : createCommentVNode("", true);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=InlineError.vue_vue_type_script_setup_true_lang.js.map
