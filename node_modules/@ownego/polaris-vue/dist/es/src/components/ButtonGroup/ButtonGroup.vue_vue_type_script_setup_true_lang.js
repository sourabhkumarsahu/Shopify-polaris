import { defineComponent, useSlots, computed, openBlock, createElementBlock, normalizeClass, Fragment, renderList, unref, createBlock } from "vue";
import { u as useExtractFragment } from "../../use/useExtractFragment.js";
import { c as classNames, v as variationName } from "../../utilities/css.js";
import { _ as _sfc_main$1 } from "./components/Item/Item.vue_vue_type_script_setup_true_lang.js";
const ButtonGroup = "Polaris-ButtonGroup";
const Item = "Polaris-ButtonGroup__Item";
const variantSegmented = "Polaris-ButtonGroup--variantSegmented";
const fullWidth = "Polaris-ButtonGroup--fullWidth";
const extraTight = "Polaris-ButtonGroup--extraTight";
const tight = "Polaris-ButtonGroup--tight";
const loose = "Polaris-ButtonGroup--loose";
const noWrap = "Polaris-ButtonGroup--noWrap";
const styles = {
  ButtonGroup,
  Item,
  "Item-plain": "Polaris-ButtonGroup__Item--plain",
  variantSegmented,
  "Item-focused": "Polaris-ButtonGroup__Item--focused",
  fullWidth,
  extraTight,
  tight,
  loose,
  noWrap
};
const _hoisted_1 = ["data-buttongroup-variant", "data-buttongroup-connected-top", "data-buttongroup-full-width", "data-buttongroup-no-wrap"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "ButtonGroup",
  props: {
    gap: {},
    variant: {},
    fullWidth: { type: Boolean },
    connectedTop: { type: Boolean },
    noWrap: { type: Boolean }
  },
  setup(__props) {
    const slots = useSlots();
    const { slotsElms } = useExtractFragment(slots.default);
    const props = __props;
    const className = computed(() => classNames(
      styles.ButtonGroup,
      props.gap && styles[props.gap],
      props.variant && styles[variationName("variant", props.variant)],
      props.fullWidth && styles.fullWidth,
      props.noWrap && styles.noWrap
    ));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value),
        "data-buttongroup-variant": _ctx.variant,
        "data-buttongroup-connected-top": _ctx.connectedTop,
        "data-buttongroup-full-width": _ctx.fullWidth,
        "data-buttongroup-no-wrap": _ctx.noWrap
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(slotsElms), (item, index) => {
          return openBlock(), createBlock(unref(_sfc_main$1), {
            key: index,
            "button-elm": item
          }, null, 8, ["button-elm"]);
        }), 128))
      ], 10, _hoisted_1);
    };
  }
});
export {
  _sfc_main as _,
  styles as s
};
//# sourceMappingURL=ButtonGroup.vue_vue_type_script_setup_true_lang.js.map
