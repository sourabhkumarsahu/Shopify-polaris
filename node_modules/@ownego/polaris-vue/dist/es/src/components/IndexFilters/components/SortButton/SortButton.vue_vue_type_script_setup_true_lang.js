import { defineComponent, mergeModels, useModel, onMounted, watch, getCurrentInstance, ref, computed, openBlock, createBlock, unref, withCtx, createVNode, createTextVNode, toDisplayString } from "vue";
import { u as useI18n } from "../../../../use/useI18n.js";
import { _ as _sfc_main$4 } from "../../../Box/Box.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../../../Button/Button.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$5 } from "../../../ChoiceList/ChoiceList.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$6 } from "./components/DirectionButton.vue_vue_type_script_setup_true_lang.js";
import { q as SortIcon } from "../../../../../vendor.js";
import { _ as _sfc_main$1 } from "../../../Popover/Popover.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../../../Tooltip/Tooltip.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "SortButton",
  props: /* @__PURE__ */ mergeModels({
    choices: {},
    selected: {},
    disabled: { type: Boolean },
    disclosureZIndexOverride: {}
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["change", "change-key", "change-direction"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const model = useModel(__props, "modelValue");
    onMounted(() => {
      model.value = props.selected;
    });
    watch(
      () => props.selected,
      (newVal) => {
        model.value = newVal;
      },
      { immediate: true }
    );
    const i18n = useI18n();
    const currentInstance = getCurrentInstance();
    const active = ref(false);
    const selectedValue = computed(() => props.selected[0].split(" "));
    const selectedValueKey = computed(() => selectedValue.value[0]);
    const selectedDirection = computed(() => selectedValue.value[1]);
    const choiceListChoices = computed(() => {
      const choiceCategories = props.choices.reduce(
        (acc, curr) => {
          const alreadyExists = acc.some((option) => option.label === curr.label);
          const [, currentValueDirection] = curr.value.split(" ");
          const isSameDirection = currentValueDirection === selectedDirection.value;
          if (!alreadyExists) {
            return [...acc, curr];
          }
          if (isSameDirection) {
            return acc.map((option) => {
              if (option.label === curr.label) {
                return curr;
              }
              return option;
            });
          }
          return acc;
        },
        []
      );
      return choiceCategories;
    });
    const selectedChoices = computed(() => {
      return props.choices.filter((choice) => {
        const [currentKey] = choice.value.split(" ");
        return currentKey === selectedValueKey.value;
      });
    });
    function handleClick() {
      active.value = !active.value;
    }
    function handleClose() {
      active.value = false;
    }
    function handleChangeChoiceList(value, _name) {
      var _a;
      if ((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onChangeKey) {
        const [key] = value[0].split(" ");
        emits("change-key", key);
      } else {
        emits("change", value);
      }
    }
    function handleChangeDirection($el) {
      var _a;
      if ((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onChangeDirection) {
        const [, direction] = $el[0].split(" ");
        emits("change-direction", direction);
      } else {
        emits("change", $el);
      }
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        "fluid-content": "",
        "autofocus-target": "first-node",
        "preferred-alignment": "right",
        active: active.value && !_ctx.disabled,
        "z-index-override": _ctx.disclosureZIndexOverride,
        onClose: handleClose
      }, {
        activator: withCtx(() => [
          createVNode(unref(_sfc_main$2), {
            "preferred-position": "above",
            content: unref(i18n).translate("Polaris.IndexFilters.SortButton.tooltip"),
            "hover-delay": 400,
            "z-index-override": _ctx.disclosureZIndexOverride
          }, null, 8, ["content", "z-index-override"]),
          createVNode(unref(_sfc_main$3), {
            size: "slim",
            icon: unref(SortIcon),
            disabled: _ctx.disabled,
            "accessibility-label": unref(i18n).translate("Polaris.IndexFilters.SortButton.ariaLabel"),
            onClick: handleClick
          }, null, 8, ["icon", "disabled", "accessibility-label"])
        ]),
        default: withCtx(() => [
          createVNode(unref(_sfc_main$4), {
            "min-width": "148px",
            "padding-inline-start": "300",
            "padding-inline-end": "300",
            "padding-block-start": "200",
            "padding-block-end": "200",
            "border-block-end-width": "025",
            "border-color": "border-secondary"
          }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$5), {
                modelValue: model.value,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
                title: unref(i18n).translate("Polaris.IndexFilters.SortButton.title"),
                choices: choiceListChoices.value,
                onChange: handleChangeChoiceList
              }, null, 8, ["modelValue", "title", "choices"])
            ]),
            _: 1
          }),
          createVNode(unref(_sfc_main$4), {
            "padding-inline-start": "300",
            "padding-inline-end": "150",
            "padding-block-start": "200",
            "padding-block-end": "200"
          }, {
            default: withCtx(() => {
              var _a, _b, _c, _d;
              return [
                createVNode(unref(_sfc_main$6), {
                  direction: "asc",
                  active: selectedDirection.value === "asc",
                  value: (_b = (_a = selectedChoices.value) == null ? void 0 : _a[0]) == null ? void 0 : _b.value,
                  onClick: handleChangeDirection
                }, {
                  default: withCtx(() => {
                    var _a2, _b2;
                    return [
                      createTextVNode(toDisplayString((_b2 = (_a2 = selectedChoices.value) == null ? void 0 : _a2[0]) == null ? void 0 : _b2.directionLabel), 1)
                    ];
                  }),
                  _: 1
                }, 8, ["active", "value"]),
                createVNode(unref(_sfc_main$6), {
                  direction: "desc",
                  active: selectedDirection.value === "desc",
                  value: (_d = (_c = selectedChoices.value) == null ? void 0 : _c[1]) == null ? void 0 : _d.value,
                  onClick: handleChangeDirection
                }, {
                  default: withCtx(() => {
                    var _a2, _b2;
                    return [
                      createTextVNode(toDisplayString((_b2 = (_a2 = selectedChoices.value) == null ? void 0 : _a2[1]) == null ? void 0 : _b2.directionLabel), 1)
                    ];
                  }),
                  _: 1
                }, 8, ["active", "value"])
              ];
            }),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["active", "z-index-override"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=SortButton.vue_vue_type_script_setup_true_lang.js.map
