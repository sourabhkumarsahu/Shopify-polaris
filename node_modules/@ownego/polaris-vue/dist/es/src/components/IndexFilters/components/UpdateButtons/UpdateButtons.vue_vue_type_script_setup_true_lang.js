import { defineComponent, ref, computed, watch, openBlock, createBlock, unref, withCtx, createTextVNode, toDisplayString, createCommentVNode, createVNode, createElementVNode } from "vue";
import { u as useI18n } from "../../../../use/useI18n.js";
import { f as focusFirstFocusableNode } from "../../../../utilities/focus.js";
import { u as useIsTouchDevice } from "../../../../utilities/use-is-touch-device.js";
import { _ as _sfc_main$2 } from "../../../Button/Button.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$5 } from "../../../Form/Form.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$6 } from "../../../FormLayout/FormLayout.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../../InlineStack/InlineStack.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../../../Modal/Modal.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../../../Modal/components/Section/Section.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$7 } from "../../../TextField/TextField.vue_vue_type_script_setup_true_lang.js";
const MAX_VIEW_NAME_LENGTH = 40;
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "UpdateButtons",
  props: {
    primaryAction: {},
    cancelAction: {},
    viewNames: {},
    disabled: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const i18n = useI18n();
    const isTouchDevice = useIsTouchDevice();
    const savedViewName = ref("");
    const savedViewModalOpen = ref(false);
    const container = ref(null);
    const hasSameNameError = computed(() => props.viewNames.some(
      (name) => name.trim().toLowerCase() === savedViewName.value.trim().toLowerCase()
    ));
    const isPrimaryActionDisabled = computed(() => {
      var _a;
      return hasSameNameError.value || !savedViewName.value || ((_a = props.primaryAction) == null ? void 0 : _a.loading) || savedViewName.value.length > MAX_VIEW_NAME_LENGTH;
    });
    const primaryModalAction = computed(() => {
      return {
        content: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.save"),
        onAction: handlePrimaryAction,
        disabled: isPrimaryActionDisabled.value
      };
    });
    const secondaryModalActions = computed(() => {
      return [
        {
          onAction: handleCloseModal,
          content: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.cancel")
        }
      ];
    });
    const buttonText = computed(() => {
      var _a;
      switch ((_a = props.primaryAction) == null ? void 0 : _a.type) {
        case "save":
          return i18n.translate("Polaris.IndexFilters.UpdateButtons.save");
        case "save-as":
        default:
          return i18n.translate("Polaris.IndexFilters.UpdateButtons.saveAs");
      }
    });
    async function handleClickSaveButton() {
      var _a, _b;
      if (((_a = props.primaryAction) == null ? void 0 : _a.type) === "save-as") {
        handleOpenModal();
      } else {
        await ((_b = props.primaryAction) == null ? void 0 : _b.onAction(""));
      }
    }
    function handleOpenModal() {
      savedViewModalOpen.value = true;
    }
    function handleCloseModal() {
      savedViewModalOpen.value = false;
    }
    function handleChange(value) {
      savedViewName.value = value;
    }
    async function handlePrimaryAction() {
      var _a;
      if (isPrimaryActionDisabled.value) return;
      await ((_a = props.primaryAction) == null ? void 0 : _a.onAction(savedViewName.value));
      handleCloseModal();
    }
    watch(
      () => [savedViewModalOpen.value, isTouchDevice.value],
      () => {
        if (!container.value || isTouchDevice.value) return;
        if (savedViewModalOpen.value) {
          focusFirstFocusableNode(container.value);
        }
      },
      { flush: "post" }
    );
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        align: "start",
        "block-align": "center",
        gap: "100"
      }, {
        default: withCtx(() => {
          var _a, _b;
          return [
            _ctx.cancelAction ? (openBlock(), createBlock(unref(_sfc_main$2), {
              key: 0,
              size: "micro",
              variant: "tertiary",
              disabled: _ctx.disabled,
              onClick: _ctx.cancelAction.onAction
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(unref(i18n).translate("Polaris.IndexFilters.UpdateButtons.cancel")), 1)
              ]),
              _: 1
            }, 8, ["disabled", "onClick"])) : createCommentVNode("", true),
            ((_a = _ctx.primaryAction) == null ? void 0 : _a.type) === "save-as" ? (openBlock(), createBlock(unref(_sfc_main$3), {
              key: 1,
              open: savedViewModalOpen.value,
              primaryAction: primaryModalAction.value,
              secondaryActions: secondaryModalActions.value
            }, {
              title: withCtx(() => [
                createTextVNode(toDisplayString(unref(i18n).translate("Polaris.IndexFilters.UpdateButtons.modal.title")), 1)
              ]),
              activator: withCtx(() => [
                createVNode(unref(_sfc_main$1), null, {
                  default: withCtx(() => {
                    var _a2;
                    return [
                      createVNode(unref(_sfc_main$2), {
                        size: "micro",
                        disabled: ((_a2 = _ctx.primaryAction) == null ? void 0 : _a2.disabled) || _ctx.disabled,
                        onClick: handleClickSaveButton
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(buttonText.value), 1)
                        ]),
                        _: 1
                      }, 8, ["disabled"])
                    ];
                  }),
                  _: 1
                })
              ]),
              default: withCtx(() => [
                createVNode(unref(_sfc_main$4), null, {
                  default: withCtx(() => [
                    createVNode(unref(_sfc_main$5), { onSubmit: handlePrimaryAction }, {
                      default: withCtx(() => [
                        createVNode(unref(_sfc_main$6), null, {
                          default: withCtx(() => [
                            createElementVNode("div", {
                              ref_key: "container",
                              ref: container
                            }, [
                              createVNode(unref(_sfc_main$7), {
                                modelValue: savedViewName.value,
                                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => savedViewName.value = $event),
                                "show-character-count": "",
                                "auto-complete": "off",
                                disabled: _ctx.disabled,
                                "max-length": MAX_VIEW_NAME_LENGTH,
                                label: unref(i18n).translate("Polaris.IndexFilters.UpdateButtons.modal.label"),
                                error: hasSameNameError.value ? unref(i18n).translate("Polaris.IndexFilters.UpdateButtons.modal.sameName", { name: savedViewName.value }) : void 0,
                                onChange: handleChange
                              }, null, 8, ["modelValue", "disabled", "label", "error"])
                            ], 512)
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    })
                  ]),
                  _: 1
                })
              ]),
              _: 1
            }, 8, ["open", "primaryAction", "secondaryActions"])) : (openBlock(), createBlock(unref(_sfc_main$2), {
              key: 2,
              size: "micro",
              disabled: ((_b = _ctx.primaryAction) == null ? void 0 : _b.disabled) || _ctx.disabled,
              onClick: handleClickSaveButton
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(buttonText.value), 1)
              ]),
              _: 1
            }, 8, ["disabled"]))
          ];
        }),
        _: 1
      });
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=UpdateButtons.vue_vue_type_script_setup_true_lang.js.map
