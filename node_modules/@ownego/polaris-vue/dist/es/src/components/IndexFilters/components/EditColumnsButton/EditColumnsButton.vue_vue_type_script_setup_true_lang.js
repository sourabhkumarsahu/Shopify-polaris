import { defineComponent, openBlock, createBlock, unref, withCtx, createVNode, createTextVNode, toDisplayString } from "vue";
import { u as useI18n } from "../../../../use/useI18n.js";
import { _ as _sfc_main$3 } from "../../../Button/Button.vue_vue_type_script_setup_true_lang.js";
import { L as LayoutColumns3Icon } from "../../../../../vendor.js";
import { _ as _sfc_main$2 } from "../../../Text/Text.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../../Tooltip/Tooltip.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "EditColumnsButton",
  props: {
    disabled: { type: Boolean }
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    const i18n = useI18n();
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        "preferred-position": "above",
        "hover-delay": 400
      }, {
        content: withCtx(() => [
          createVNode(unref(_sfc_main$2), {
            as: "span",
            variant: "bodyMd",
            alignment: "center"
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(unref(i18n).translate("Polaris.IndexFilters.EditColumnsButton.tooltip")), 1)
            ]),
            _: 1
          })
        ]),
        default: withCtx(() => [
          createVNode(unref(_sfc_main$3), {
            size: "slim",
            disabled: _ctx.disabled,
            icon: unref(LayoutColumns3Icon),
            "accessibility-label": unref(i18n).translate("Polaris.IndexFilters.EditColumnsButton.accessibilityLabel"),
            onClick: _cache[0] || (_cache[0] = ($event) => emits("click"))
          }, null, 8, ["disabled", "icon", "accessibility-label"])
        ]),
        _: 1
      });
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=EditColumnsButton.vue_vue_type_script_setup_true_lang.js.map
