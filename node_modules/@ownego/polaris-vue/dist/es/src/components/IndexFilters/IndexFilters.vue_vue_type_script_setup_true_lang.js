import { defineComponent, getCurrentInstance, ref, computed, watch, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle, createElementVNode, createVNode, Transition, withCtx, createBlock, createCommentVNode, Fragment, mergeProps } from "vue";
import { u as useI18n } from "../../use/useI18n.js";
import { u as useToggle } from "../../use/useToggle.js";
import { u as useIsSticky } from "../../use/useIsSticky.js";
import { u as useBreakpoints } from "../../use/useBreakpoints.js";
import { c as classNames } from "../../utilities/css.js";
import { u as useEventListener } from "../../utilities/use-event-listener.js";
import { _ as _sfc_main$9 } from "../Filters/Filters.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "./components/Container/Container.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$5 } from "./components/SearchFilterButton/SearchFilterButton.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$6 } from "./components/EditColumnsButton/EditColumnsButton.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$7 } from "./components/SortButton/SortButton.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$8 } from "./components/UpdateButtons/UpdateButtons.vue_vue_type_script_setup_true_lang.js";
import { I as IndexFiltersMode } from "./types.js";
import { _ as _sfc_main$2 } from "../InlineStack/InlineStack.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../Spinner/Spinner.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../Tabs/Tabs.vue_vue_type_script_setup_true_lang.js";
const IndexFiltersWrapper = "Polaris-IndexFilters__IndexFiltersWrapper";
const IndexFilters = "Polaris-IndexFilters";
const IndexFiltersSticky = "Polaris-IndexFilters__IndexFiltersSticky";
const IndexFiltersStickyFlush = "Polaris-IndexFilters__IndexFiltersStickyFlush";
const TabsWrapper = "Polaris-IndexFilters__TabsWrapper";
const SmallScreenTabsWrapper = "Polaris-IndexFilters__SmallScreenTabsWrapper";
const TabsWrapperLoading = "Polaris-IndexFilters__TabsWrapperLoading";
const DesktopLoading = "Polaris-IndexFilters__DesktopLoading";
const TabsLoading = "Polaris-IndexFilters__TabsLoading";
const ActionWrap = "Polaris-IndexFilters__ActionWrap";
const Spinner = "Polaris-IndexFilters__Spinner";
const ButtonWrap = "Polaris-IndexFilters__ButtonWrap";
const styles = {
  IndexFiltersWrapper,
  IndexFilters,
  IndexFiltersSticky,
  IndexFiltersStickyFlush,
  TabsWrapper,
  SmallScreenTabsWrapper,
  TabsWrapperLoading,
  DesktopLoading,
  TabsLoading,
  ActionWrap,
  Spinner,
  ButtonWrap
};
const TRANSITION_DURATION = "var(--p-motion-duration-150)";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "IndexFilters",
  props: {
    sortOptions: {},
    sortSelected: {},
    primaryAction: {},
    cancelAction: {},
    mode: {},
    disclosureZIndexOverride: {},
    disabled: { type: Boolean },
    disableQueryField: { type: Boolean },
    disableStickyMode: { type: Boolean },
    isFlushWhenSticky: { type: Boolean, default: false },
    canCreateNewView: { type: Boolean, default: true },
    filteringAccessibilityLabel: {},
    filteringAccessibilityTooltip: {},
    closeOnChildOverlayClick: { type: Boolean },
    disableKeyboardShortcuts: { type: Boolean },
    showEditColumnsButton: { type: Boolean },
    autoFocusSearchField: { type: Boolean, default: true },
    queryValue: { default: "" },
    queryPlaceholder: {},
    filters: {},
    appliedFilters: {},
    hideFilters: { type: Boolean },
    hideQueryField: { type: Boolean },
    borderlessQueryField: { type: Boolean },
    loading: { type: Boolean },
    mountedState: {},
    selectedViewName: {},
    tabs: {},
    selected: {}
  },
  emits: ["sort", "sort-key-change", "sort-direction-change", "filter-click", "set-mode", "create-new-view", "edit-start", "query-change", "query-clear", "clear-all", "query-blur", "query-focus", "add-filter-click", "select"],
  setup(__props, { emit: __emit }) {
    var _a;
    const DEFAULT_IGNORED_TAGS = ["INPUT", "SELECT", "TEXTAREA"];
    const defaultStyle = {
      transition: `opacity ${TRANSITION_DURATION} var(--p-motion-ease)`,
      opacity: 0
    };
    const transitionStyles = {
      entering: { opacity: 1 },
      entered: { opacity: 1 },
      exiting: { opacity: 0 },
      exited: { opacity: 0 },
      unmounted: { opacity: 0 }
    };
    const props = __props;
    const emits = __emit;
    const currentInstance = getCurrentInstance();
    const i18n = useI18n();
    const breakpoints = useBreakpoints();
    const {
      value: filtersFocused,
      setFalse: setFiltersUnFocused,
      setTrue: setFiltersFocused
    } = useToggle(props.mode === IndexFiltersMode.Filtering && props.autoFocusSearchField);
    const { intersectionRef, measurerRef, indexFilteringHeight, isSticky } = useIsSticky(props.mode, Boolean(props.disableStickyMode), props.isFlushWhenSticky);
    const defaultRef = ref(null);
    const filteringRef = ref(null);
    const transitionFiltersState = ref(props.mode === IndexFiltersMode.Filtering ? "entering" : "unmounted");
    const transitionButtonState = ref("entered");
    const mountedStateStyles = computed(() => {
      return transitionButtonState.value ? {
        ...defaultStyle,
        ...transitionStyles[transitionButtonState.value]
      } : {};
    });
    const isActionLoading = computed(() => {
      var _a2, _b;
      return ((_a2 = props.primaryAction) == null ? void 0 : _a2.loading) || ((_b = props.cancelAction) == null ? void 0 : _b.loading);
    });
    const searchFilterTooltipLabelId = computed(() => {
      return props.disableKeyboardShortcuts ? "Polaris.IndexFilters.searchFilterTooltip" : "Polaris.IndexFilters.searchFilterTooltipWithShortcut";
    });
    const searchFilterTooltip = computed(() => {
      return props.filteringAccessibilityTooltip || i18n.translate(searchFilterTooltipLabelId.value);
    });
    const searchFilterAriaLabel = computed(() => {
      return props.filteringAccessibilityLabel || i18n.translate("Polaris.IndexFilters.searchFilterAccessibilityLabel");
    });
    const isLoading = computed(() => isActionLoading.value || props.loading);
    const enhancedPrimaryAction = computed(() => {
      if (!props.primaryAction) return void 0;
      return {
        ...props.primaryAction,
        onAction: onExecutedPrimaryAction
      };
    });
    const enhancedCancelAction = computed(() => {
      if (!props.cancelAction) return void 0;
      return {
        ...props.cancelAction,
        onAction: onExecutedCancelAction
      };
    });
    const viewNames = computed(() => props.tabs.map(({ content }) => content));
    const tabsWrapperClassName = computed(() => classNames(
      styles.TabsWrapper,
      breakpoints.value.mdDown && styles.SmallScreenTabsWrapper,
      isLoading.value && styles.TabsWrapperLoading
    ));
    const indexFiltersClassName = computed(() => classNames(
      styles.IndexFilters,
      isSticky && styles.IndexFiltersSticky,
      isSticky && props.isFlushWhenSticky && styles.IndexFiltersStickyFlush
    ));
    const sortButtonEvents = computed(() => {
      var _a2, _b;
      let events = {
        onChange: (value) => emits("sort", value)
      };
      if ((_a2 = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a2.onSortKeyChange) {
        events = {
          ...events,
          onChangeKey: (key) => emits("sort-key-change", key)
        };
      }
      if ((_b = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _b.onSortDirectionChange) {
        events = {
          ...events,
          onChangeDirection: (direction) => emits("sort-direction-change", direction)
        };
      }
      return events;
    });
    const useExecutedCallback = (action, afterEffect) => {
      return async (name) => {
        if (!action) return;
        const executed = await (action == null ? void 0 : action(name));
        if (executed) {
          emits("set-mode", IndexFiltersMode.Default);
        }
      };
    };
    const onExecutedPrimaryAction = useExecutedCallback((_a = props.primaryAction) == null ? void 0 : _a.onAction);
    const onExecutedCancelAction = () => {
      var _a2;
      (_a2 = props.cancelAction) == null ? void 0 : _a2.onAction();
      emits("set-mode", IndexFiltersMode.Default);
    };
    const handleModeChange = (newMode, _oldMode) => {
      if (newMode === IndexFiltersMode.Filtering && props.autoFocusSearchField) {
        setFiltersFocused();
      } else {
        setFiltersUnFocused();
      }
    };
    useEventListener("keydown", (event) => {
      var _a2;
      const hasNoFiltersOrSearch = props.hideQueryField && props.hideFilters;
      if (props.disableKeyboardShortcuts || hasNoFiltersOrSearch) return;
      const { key } = event;
      const tag = (_a2 = document == null ? void 0 : document.activeElement) == null ? void 0 : _a2.tagName;
      if (props.mode !== IndexFiltersMode.Default && event.key === "Escape") {
        onPressEscape();
      }
      if (key === "f" && props.mode === IndexFiltersMode.Default) {
        if (tag && DEFAULT_IGNORED_TAGS.includes(tag)) {
          return;
        }
        onPressF();
        event.preventDefault();
      }
    });
    const beginEdit = (mode) => {
      emits("set-mode", mode);
      emits("edit-start", mode);
    };
    function handleClickEditColumnsButton() {
      beginEdit(IndexFiltersMode.EditingColumns);
    }
    function handleClickFilterButton() {
      beginEdit(IndexFiltersMode.Filtering);
    }
    function onPressEscape() {
      var _a2;
      (_a2 = props.cancelAction) == null ? void 0 : _a2.onAction();
      emits("set-mode", IndexFiltersMode.Default);
    }
    function handleChangeSearch(value) {
      emits("query-change", value);
    }
    function handleClearSearch() {
      emits("query-clear");
    }
    function handleQueryBlur() {
      setFiltersUnFocused();
    }
    function handleQueryFocus() {
      setFiltersFocused();
      emits("query-focus");
    }
    function onPressF() {
      if (props.mode !== IndexFiltersMode.Default) {
        return;
      }
      beginEdit(IndexFiltersMode.Filtering);
    }
    function onTransitionFiltersBeforeEnter() {
      setTimeout(() => transitionFiltersState.value = "entering", 1);
    }
    function onTransitionFiltersEnter() {
      setTimeout(() => transitionFiltersState.value = "entered", 1);
    }
    function onTransitionFiltersAfterEnter() {
      setTimeout(() => transitionFiltersState.value = "entered", 1);
    }
    function onTransitionFiltersBeforeLeave() {
      transitionFiltersState.value = "exiting";
    }
    function onTransitionFiltersLeave() {
      transitionFiltersState.value = "exited";
    }
    function onTransitionFiltersAfterLeave() {
      transitionFiltersState.value = "unmounted";
    }
    function onTransitionButtonBeforeEnter() {
      transitionButtonState.value = "entering";
    }
    function onTransitionButtonEnter() {
      transitionButtonState.value = "entered";
    }
    function onTransitionButtonAfterEnter() {
      transitionButtonState.value = "entered";
    }
    function onTransitionButtonBeforeLeave() {
      transitionButtonState.value = "exiting";
    }
    function onTransitionButtonLeave() {
      transitionButtonState.value = "exited";
    }
    function onTransitionButtonAfterLeave() {
      transitionButtonState.value = "unmounted";
    }
    watch(
      () => props.mode,
      (newValue, oldValue) => {
        if (newValue !== oldValue) {
          handleModeChange(newValue);
        }
      },
      { flush: "post" }
    );
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles).IndexFiltersWrapper),
        style: normalizeStyle({ height: `${unref(indexFilteringHeight)}px` })
      }, [
        createElementVNode("div", {
          ref_key: "intersectionRef",
          ref: intersectionRef
        }, null, 512),
        createElementVNode("div", {
          ref_key: "measurerRef",
          ref: measurerRef,
          class: normalizeClass(indexFiltersClassName.value)
        }, [
          createElementVNode("div", {
            ref_key: "defaultRef",
            ref: defaultRef
          }, [
            createVNode(Transition, {
              name: "custom-index-filters-button-transition",
              css: false,
              onBeforeEnter: onTransitionButtonBeforeEnter,
              onEnter: onTransitionButtonEnter,
              onAfterEnter: onTransitionButtonAfterEnter,
              onBeforeLeave: onTransitionButtonBeforeLeave,
              onLeave: onTransitionButtonLeave,
              onAfterLeave: onTransitionButtonAfterLeave
            }, {
              default: withCtx(() => [
                _ctx.mode !== unref(IndexFiltersMode).Filtering ? (openBlock(), createBlock(unref(_sfc_main$1), { key: 0 }, {
                  default: withCtx(() => [
                    createVNode(unref(_sfc_main$2), {
                      align: "start",
                      "block-align": "center",
                      gap: { xs: "0", md: "200" },
                      wrap: false
                    }, {
                      default: withCtx(() => [
                        createElementVNode("div", {
                          class: normalizeClass(tabsWrapperClassName.value)
                        }, [
                          createElementVNode("div", {
                            class: normalizeClass(unref(styles).TabsInner),
                            style: normalizeStyle({ ...defaultStyle, ...transitionStyles[transitionButtonState.value] })
                          }, [
                            createVNode(unref(_sfc_main$3), {
                              tabs: _ctx.tabs,
                              selected: _ctx.selected,
                              disabled: Boolean(_ctx.mode !== unref(IndexFiltersMode).Default || _ctx.disabled),
                              "can-create-new-view": _ctx.canCreateNewView,
                              "disclosure-z-index-override": _ctx.disclosureZIndexOverride,
                              onSelect: _cache[0] || (_cache[0] = ($event) => emits("select", $event)),
                              onCreateNewView: _cache[1] || (_cache[1] = ($event) => emits("create-new-view", $event))
                            }, null, 8, ["tabs", "selected", "disabled", "can-create-new-view", "disclosure-z-index-override"])
                          ], 6),
                          isLoading.value && unref(breakpoints).mdDown ? (openBlock(), createElementBlock("div", {
                            key: 0,
                            class: normalizeClass(unref(styles).TabsLoading)
                          }, [
                            createVNode(unref(_sfc_main$4), { size: "small" })
                          ], 2)) : createCommentVNode("", true)
                        ], 2),
                        createElementVNode("div", {
                          class: normalizeClass(unref(styles).ActionWrap)
                        }, [
                          isLoading.value && !unref(breakpoints).mdDown ? (openBlock(), createElementBlock("div", {
                            key: 0,
                            class: normalizeClass(unref(styles).DesktopLoading)
                          }, [
                            createVNode(unref(_sfc_main$4), { size: "small" })
                          ], 2)) : createCommentVNode("", true),
                          !(_ctx.hideFilters && _ctx.hideQueryField) && _ctx.mode === unref(IndexFiltersMode).Default ? (openBlock(), createBlock(unref(_sfc_main$5), {
                            key: 1,
                            label: searchFilterAriaLabel.value,
                            "tooltip-content": searchFilterTooltip.value,
                            disabled: _ctx.disabled,
                            "hide-query-field": _ctx.hideQueryField,
                            "hide-filters": _ctx.hideFilters,
                            style: normalizeStyle(mountedStateStyles.value),
                            "disclosure-z-index-override": _ctx.disclosureZIndexOverride,
                            onClick: handleClickFilterButton
                          }, null, 8, ["label", "tooltip-content", "disabled", "hide-query-field", "hide-filters", "style", "disclosure-z-index-override"])) : createCommentVNode("", true),
                          _ctx.mode === unref(IndexFiltersMode).Default ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                            _ctx.showEditColumnsButton ? (openBlock(), createBlock(unref(_sfc_main$6), {
                              key: 0,
                              disabled: _ctx.disabled,
                              onClick: handleClickEditColumnsButton
                            }, null, 8, ["disabled"])) : createCommentVNode("", true),
                            _ctx.sortOptions && _ctx.sortOptions.length ? (openBlock(), createBlock(unref(_sfc_main$7), mergeProps({
                              key: 1,
                              choices: _ctx.sortOptions,
                              selected: _ctx.sortSelected || [""],
                              disabled: _ctx.disabled,
                              "disclosure-z-index-override": _ctx.disclosureZIndexOverride
                            }, sortButtonEvents.value), null, 16, ["choices", "selected", "disabled", "disclosure-z-index-override"])) : createCommentVNode("", true)
                          ], 64)) : createCommentVNode("", true),
                          _ctx.mode === unref(IndexFiltersMode).EditingColumns ? (openBlock(), createElementBlock(Fragment, { key: 3 }, [
                            enhancedCancelAction.value || enhancedPrimaryAction.value ? (openBlock(), createBlock(unref(_sfc_main$8), {
                              key: 0,
                              primaryAction: enhancedPrimaryAction.value,
                              cancelAction: enhancedCancelAction.value,
                              disabled: _ctx.disabled,
                              "view-names": viewNames.value
                            }, null, 8, ["primaryAction", "cancelAction", "disabled", "view-names"])) : createCommentVNode("", true)
                          ], 64)) : createCommentVNode("", true)
                        ], 2)
                      ]),
                      _: 1
                    })
                  ]),
                  _: 1
                })) : createCommentVNode("", true)
              ]),
              _: 1
            })
          ], 512),
          createElementVNode("div", {
            ref_key: "filteringRef",
            ref: filteringRef
          }, [
            createVNode(Transition, {
              name: "slide-fade",
              css: false,
              onBeforeEnter: onTransitionFiltersBeforeEnter,
              onEnter: onTransitionFiltersEnter,
              onAfterEnter: onTransitionFiltersAfterEnter,
              onBeforeLeave: onTransitionFiltersBeforeLeave,
              onLeave: onTransitionFiltersLeave,
              onAfterLeave: onTransitionFiltersAfterLeave
            }, {
              default: withCtx(() => [
                _ctx.mode === unref(IndexFiltersMode).Filtering ? (openBlock(), createBlock(unref(_sfc_main$9), {
                  key: 0,
                  "borderless-query-field": "",
                  "close-on-child-overlay-click": _ctx.closeOnChildOverlayClick,
                  "query-value": _ctx.queryValue,
                  "query-placeholder": _ctx.queryPlaceholder,
                  filters: _ctx.filters,
                  "applied-filters": _ctx.appliedFilters,
                  "hide-filters": _ctx.hideFilters,
                  "hide-query-field": _ctx.hideQueryField,
                  "disable-query-field": _ctx.disableQueryField,
                  focused: unref(filtersFocused),
                  loading: _ctx.loading || isActionLoading.value,
                  "mounted-state": unref(breakpoints).mdDown ? void 0 : transitionFiltersState.value,
                  onQueryChange: handleChangeSearch,
                  onQueryClear: handleClearSearch,
                  onQueryBlur: handleQueryBlur,
                  onQueryFocus: handleQueryFocus,
                  onAddFilterClick: _cache[2] || (_cache[2] = ($event) => emits("filter-click")),
                  onClearAll: _cache[3] || (_cache[3] = ($event) => emits("clear-all"))
                }, {
                  default: withCtx(() => [
                    createElementVNode("div", {
                      class: normalizeClass(unref(styles).ButtonWrap)
                    }, [
                      createVNode(unref(_sfc_main$2), {
                        gap: "200",
                        align: "start",
                        "block-align": "center"
                      }, {
                        default: withCtx(() => [
                          createElementVNode("div", {
                            style: normalizeStyle({ ...defaultStyle, ...transitionStyles[transitionFiltersState.value] })
                          }, [
                            enhancedCancelAction.value || enhancedPrimaryAction.value ? (openBlock(), createBlock(unref(_sfc_main$8), {
                              key: 0,
                              primaryAction: enhancedPrimaryAction.value,
                              cancelAction: enhancedCancelAction.value,
                              disabled: _ctx.disabled,
                              "view-names": viewNames.value
                            }, null, 8, ["primaryAction", "cancelAction", "disabled", "view-names"])) : createCommentVNode("", true)
                          ], 4),
                          _ctx.sortOptions && _ctx.sortOptions.length ? (openBlock(), createBlock(unref(_sfc_main$7), mergeProps({
                            key: 0,
                            choices: _ctx.sortOptions,
                            selected: _ctx.sortSelected || [""],
                            disabled: _ctx.disabled
                          }, sortButtonEvents.value), null, 16, ["choices", "selected", "disabled"])) : createCommentVNode("", true)
                        ]),
                        _: 1
                      })
                    ], 2)
                  ]),
                  _: 1
                }, 8, ["close-on-child-overlay-click", "query-value", "query-placeholder", "filters", "applied-filters", "hide-filters", "hide-query-field", "disable-query-field", "focused", "loading", "mounted-state"])) : createCommentVNode("", true)
              ]),
              _: 1
            })
          ], 512)
        ], 2)
      ], 6);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=IndexFilters.vue_vue_type_script_setup_true_lang.js.map
