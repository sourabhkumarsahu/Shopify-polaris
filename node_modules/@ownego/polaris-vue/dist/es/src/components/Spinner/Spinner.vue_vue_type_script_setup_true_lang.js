import { defineComponent, ref, computed, onMounted, openBlock, createElementBlock, Fragment, createElementVNode, normalizeClass, createBlock, unref, normalizeProps, guardReactiveProps, withCtx, createTextVNode, toDisplayString, createCommentVNode } from "vue";
import { c as classNames, v as variationName } from "../../utilities/css.js";
import { S as SpinnerIconLarge } from "../../assets/spinner-large.js";
import { S as SpinnerIconSmall } from "../../assets/spinner-small.js";
import { _ as _sfc_main$1 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
const Spinner = "Polaris-Spinner";
const sizeSmall = "Polaris-Spinner--sizeSmall";
const sizeLarge = "Polaris-Spinner--sizeLarge";
const styles = {
  Spinner,
  sizeSmall,
  sizeLarge
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Spinner",
  props: {
    size: { default: "large" },
    accessibilityLabel: {},
    hasFocusableParent: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const isAfterInitialMount = ref(false);
    const spanAttributes = computed(() => {
      return {
        ...!props.hasFocusableParent && { role: "status" }
      };
    });
    const className = computed(() => {
      return classNames(
        styles.Spinner,
        props.size && styles[variationName("size", props.size)]
      );
    });
    onMounted(() => {
      isAfterInitialMount.value = true;
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        createElementVNode("span", {
          class: normalizeClass(className.value)
        }, [
          _ctx.size === "large" ? (openBlock(), createBlock(unref(SpinnerIconLarge), { key: 0 })) : (openBlock(), createBlock(unref(SpinnerIconSmall), { key: 1 }))
        ], 2),
        createElementVNode("span", normalizeProps(guardReactiveProps(spanAttributes.value)), [
          isAfterInitialMount.value || !_ctx.hasFocusableParent ? (openBlock(), createBlock(unref(_sfc_main$1), {
            key: 0,
            "visually-hidden": "",
            as: "span"
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(_ctx.accessibilityLabel), 1)
            ]),
            _: 1
          })) : createCommentVNode("", true)
        ], 16)
      ], 64);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Spinner.vue_vue_type_script_setup_true_lang.js.map
