import { defineComponent, useSlots, computed, openBlock, createElementBlock, createElementVNode, normalizeClass, normalizeStyle, unref, renderSlot, createVNode, withCtx, Fragment, createTextVNode, toDisplayString, createCommentVNode } from "vue";
import { c as classNames, v as variationName, g as getResponsiveProps, a as getResponsiveValue, s as sanitizeCustomProperties } from "../../utilities/css.js";
import { u as useHasSlot } from "../../use/useHasSlot.js";
import { h as helpTextID } from "./utils.js";
import { _ as _sfc_main$2 } from "../InlineError/InlineError.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
const Choice = "Polaris-Choice";
const labelHidden = "Polaris-Choice--labelHidden";
const Label = "Polaris-Choice__Label";
const Control = "Polaris-Choice__Control";
const disabled = "Polaris-Choice--disabled";
const toneMagic = "Polaris-Choice--toneMagic";
const Descriptions = "Polaris-Choice__Descriptions";
const HelpText = "Polaris-Choice__HelpText";
const styles = {
  Choice,
  labelHidden,
  Label,
  Control,
  disabled,
  toneMagic,
  Descriptions,
  HelpText
};
const _hoisted_1 = { key: 0 };
const _hoisted_2 = ["for"];
const _hoisted_3 = ["id"];
const _hoisted_4 = ["for"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Choice",
  props: {
    id: {},
    label: {},
    disabled: { type: Boolean },
    labelHidden: { type: Boolean },
    labelClassName: {},
    fill: {},
    error: { type: [String, Array, Boolean] },
    helpText: {},
    tone: {},
    bleed: {},
    bleedBlockStart: {},
    bleedBlockEnd: {},
    bleedInlineStart: {},
    bleedInlineEnd: {}
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const { hasSlot } = useHasSlot();
    const hasHelpText = computed(() => hasSlot(slots.helpText) || props.helpText);
    const hasError = computed(() => props.error && typeof props.error !== "boolean");
    const hasDescription = computed(() => hasHelpText.value || hasError.value);
    const className = computed(() => classNames(
      styles.Choice,
      props.labelHidden && styles.labelHidden,
      props.disabled && styles.disabled,
      props.tone && styles[variationName("tone", props.tone)],
      props.labelClassName
    ));
    const labelStyle = computed(() => ({
      // Pass through overrides for bleed values if they're set by the prop
      ...getResponsiveProps(
        "choice",
        "bleed-block-end",
        "space",
        props.bleedBlockEnd || props.bleed
      ),
      ...getResponsiveProps(
        "choice",
        "bleed-block-start",
        "space",
        props.bleedBlockStart || props.bleed
      ),
      ...getResponsiveProps(
        "choice",
        "bleed-inline-start",
        "space",
        props.bleedInlineStart || props.bleed
      ),
      ...getResponsiveProps(
        "choice",
        "bleed-inline-end",
        "space",
        props.bleedInlineEnd || props.bleed
      ),
      ...Object.fromEntries(
        Object.entries(getResponsiveValue("choice", "fill", props.fill)).map(
          // Map "true" => "100%" and "false" => "auto" for use in
          // inline/block-size calc()
          ([key, value]) => [key, value ? "100%" : "auto"]
        )
      )
    }));
    return (_ctx, _cache) => {
      return hasDescription.value ? (openBlock(), createElementBlock("div", _hoisted_1, [
        createElementVNode("label", {
          class: normalizeClass(className.value),
          for: _ctx.id,
          style: normalizeStyle(unref(sanitizeCustomProperties)(labelStyle.value)),
          onClick: _cache[0] || (_cache[0] = ($event) => emits("click"))
        }, [
          createElementVNode("span", {
            class: normalizeClass(unref(styles).Control)
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2),
          createElementVNode("span", {
            class: normalizeClass(unref(styles).Label)
          }, [
            createVNode(unref(_sfc_main$1), {
              as: "span",
              variant: "bodyMd"
            }, {
              default: withCtx(() => [
                unref(hasSlot)(slots.label) ? renderSlot(_ctx.$slots, "label", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString(_ctx.label), 1)
                ], 64))
              ]),
              _: 3
            })
          ], 2)
        ], 14, _hoisted_2),
        createElementVNode("div", {
          class: normalizeClass(unref(styles).Descriptions)
        }, [
          _ctx.error && typeof _ctx.error !== "boolean" ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(styles).Error)
          }, [
            createVNode(unref(_sfc_main$2), {
              message: _ctx.error,
              "field-id": _ctx.id
            }, null, 8, ["message", "field-id"])
          ], 2)) : createCommentVNode("", true),
          hasHelpText.value ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass(unref(styles).HelpText),
            id: unref(helpTextID)(_ctx.id)
          }, [
            createVNode(unref(_sfc_main$1), {
              as: "span",
              tone: _ctx.disabled ? void 0 : "subdued"
            }, {
              default: withCtx(() => [
                unref(hasSlot)(slots.helpText) ? renderSlot(_ctx.$slots, "helpText", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString(_ctx.helpText), 1)
                ], 64))
              ]),
              _: 3
            }, 8, ["tone"])
          ], 10, _hoisted_3)) : createCommentVNode("", true)
        ], 2)
      ])) : (openBlock(), createElementBlock("label", {
        key: 1,
        class: normalizeClass(className.value),
        for: _ctx.id,
        style: normalizeStyle(unref(sanitizeCustomProperties)(labelStyle.value)),
        onClick: _cache[1] || (_cache[1] = ($event) => emits("click"))
      }, [
        createElementVNode("span", {
          class: normalizeClass(unref(styles).Control)
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 2),
        createElementVNode("span", {
          class: normalizeClass(unref(styles).Label)
        }, [
          createElementVNode("span", null, [
            unref(hasSlot)(slots.label) ? renderSlot(_ctx.$slots, "label", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ], 64))
          ])
        ], 2)
      ], 14, _hoisted_4));
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Choice.vue_vue_type_script_setup_true_lang.js.map
