import { defineComponent, ref, computed, onMounted, provide, openBlock, createElementBlock, renderSlot, createElementVNode } from "vue";
import { t as themeNameDefault, a as themeNames, c as createThemeClassName } from "../../../vendor.js";
import { I as I18n } from "../../../polaris/polaris-react/src/utilities/i18n/I18n.js";
import { S as ScrollLockManager } from "../../../polaris/polaris-react/src/utilities/scroll-lock-manager/scroll-lock-manager.js";
import { S as StickyManager } from "../../utilities/sticky-manager/sticky-manager.js";
import { g as getTheme } from "../../utilities/use-theme.js";
import { u as useMediaQueryContext } from "../../use/useMediaQuery.js";
import { u as useFocusManagerContext } from "../../use/useFocusManager.js";
import { u as useEphemeralPresenceManagerContext } from "../../use/useEphemeralPresenceManager.js";
const _hoisted_1 = { class: "polaris-app-provider" };
const MAX_SCROLLBAR_WIDTH = 20;
const SCROLLBAR_TEST_ELEMENT_PARENT_SIZE = 30;
const APP_FRAME_SCROLLABLE = "AppFrameScollable";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "AppProvider",
  props: {
    theme: {},
    i18n: {},
    linkComponent: {},
    features: {}
  },
  setup(__props) {
    const SCROLLBAR_TEST_ELEMENT_CHILD_SIZE = SCROLLBAR_TEST_ELEMENT_PARENT_SIZE + 10;
    const props = __props;
    const stickyManager = ref(new StickyManager());
    const scrollLockManager = new ScrollLockManager();
    const { isNavigationCollapsed } = useMediaQueryContext();
    const focusManager = useFocusManagerContext();
    const ephemeralPresenceManager = useEphemeralPresenceManagerContext();
    const portalsContainerRef = ref(null);
    const themeName = computed(() => props.theme ?? themeNameDefault);
    onMounted(() => {
      var _a;
      if (document != null) {
        if (!((_a = props.features) == null ? void 0 : _a.dynamicTopBarAndReframe)) {
          stickyManager.value.setContainer(document);
        } else {
          const scrollContainerElement = document.getElementById(APP_FRAME_SCROLLABLE);
          stickyManager.value.setContainer(scrollContainerElement || document);
        }
        setBodyStyles();
        setRootAttributes();
        const isSafari16 = navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome") && (navigator.userAgent.includes("Version/16.1") || navigator.userAgent.includes("Version/16.2") || navigator.userAgent.includes("Version/16.3"));
        const isMobileApp16 = navigator.userAgent.includes("Shopify Mobile/iOS") && (navigator.userAgent.includes("OS 16_1") || navigator.userAgent.includes("OS 16_2") || navigator.userAgent.includes("OS 16_3"));
        if (isSafari16 || isMobileApp16) {
          document.documentElement.classList.add(
            "Polaris-Safari-16-Font-Optical-Sizing-Patch"
          );
        }
      }
      measureScrollbars();
    });
    const setBodyStyles = () => {
      document.body.style.backgroundColor = "var(--p-color-bg)";
      document.body.style.color = "var(--p-color-text)";
    };
    const setRootAttributes = () => {
      const activeThemeName = themeName.value;
      themeNames.forEach((themeName2) => {
        document.documentElement.classList.toggle(
          createThemeClassName(themeName2),
          themeName2 === activeThemeName
        );
      });
    };
    function measureScrollbars() {
      var _a;
      const parentEl = document.createElement("div");
      parentEl.setAttribute(
        "style",
        `position: absolute; opacity: 0; transform: translate3d(-9999px, -9999px, 0); pointer-events: none; width:${SCROLLBAR_TEST_ELEMENT_PARENT_SIZE}px; height:${SCROLLBAR_TEST_ELEMENT_PARENT_SIZE}px;`
      );
      const child = document.createElement("div");
      child.setAttribute(
        "style",
        `width:100%; height: ${SCROLLBAR_TEST_ELEMENT_CHILD_SIZE}; overflow:scroll; ; scrollbar-width: thin;`
      );
      parentEl.appendChild(child);
      document.body.appendChild(parentEl);
      const scrollbarWidth = SCROLLBAR_TEST_ELEMENT_PARENT_SIZE - (((_a = parentEl.firstElementChild) == null ? void 0 : _a.clientWidth) ?? 0);
      const scrollbarWidthWithSafetyHatch = Math.min(
        scrollbarWidth,
        MAX_SCROLLBAR_WIDTH
      );
      document.documentElement.style.setProperty(
        "--pc-app-provider-scrollbar-width",
        `${scrollbarWidthWithSafetyHatch}px`
      );
      document.body.removeChild(parentEl);
    }
    provide("themeName", themeName);
    provide("theme", getTheme(themeName.value));
    provide("features", props.features ?? {});
    provide("i18n", new I18n(props.i18n));
    provide("scroll-lock-manager", scrollLockManager);
    provide("sticky-manager", stickyManager);
    provide("link", props.linkComponent);
    provide("media-query", { isNavigationCollapsed });
    provide("portals-manager", portalsContainerRef);
    provide("focus-manager", focusManager);
    provide("ephemeral-presence-manager", ephemeralPresenceManager);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, [
        renderSlot(_ctx.$slots, "default"),
        createElementVNode("div", {
          id: "PolarisPortalsContainer",
          ref_key: "portalsContainerRef",
          ref: portalsContainerRef
        }, null, 512)
      ]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=AppProvider.vue_vue_type_script_setup_true_lang.js.map
