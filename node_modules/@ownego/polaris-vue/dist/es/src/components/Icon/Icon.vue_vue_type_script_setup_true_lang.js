import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, createVNode, unref, withCtx, createTextVNode, toDisplayString, createBlock, resolveDynamicComponent, mergeProps, createCommentVNode } from "vue";
import { c as classNames, v as variationName } from "../../utilities/css.js";
import { u as useBreakpoints } from "../../use/useBreakpoints.js";
import { _ as _sfc_main$1 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
const Icon = "Polaris-Icon";
const toneInherit = "Polaris-Icon--toneInherit";
const toneBase = "Polaris-Icon--toneBase";
const toneSubdued = "Polaris-Icon--toneSubdued";
const toneCaution = "Polaris-Icon--toneCaution";
const toneWarning = "Polaris-Icon--toneWarning";
const toneCritical = "Polaris-Icon--toneCritical";
const toneInteractive = "Polaris-Icon--toneInteractive";
const toneInfo = "Polaris-Icon--toneInfo";
const toneSuccess = "Polaris-Icon--toneSuccess";
const tonePrimary = "Polaris-Icon--tonePrimary";
const toneEmphasis = "Polaris-Icon--toneEmphasis";
const toneMagic = "Polaris-Icon--toneMagic";
const toneTextCaution = "Polaris-Icon--toneTextCaution";
const toneTextWarning = "Polaris-Icon--toneTextWarning";
const toneTextCritical = "Polaris-Icon--toneTextCritical";
const toneTextInfo = "Polaris-Icon--toneTextInfo";
const toneTextPrimary = "Polaris-Icon--toneTextPrimary";
const toneTextSuccess = "Polaris-Icon--toneTextSuccess";
const toneTextMagic = "Polaris-Icon--toneTextMagic";
const Svg = "Polaris-Icon__Svg";
const Img = "Polaris-Icon__Img";
const Placeholder = "Polaris-Icon__Placeholder";
const styles = {
  Icon,
  toneInherit,
  toneBase,
  toneSubdued,
  toneCaution,
  toneWarning,
  toneCritical,
  toneInteractive,
  toneInfo,
  toneSuccess,
  tonePrimary,
  toneEmphasis,
  toneMagic,
  toneTextCaution,
  toneTextWarning,
  toneTextCritical,
  toneTextInfo,
  toneTextPrimary,
  toneTextSuccess,
  toneTextMagic,
  Svg,
  Img,
  Placeholder
};
const _hoisted_1 = ["src"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Icon",
  props: {
    source: {},
    tone: {},
    accessibilityLabel: {}
  },
  setup(__props) {
    const props = __props;
    const breakpoints = useBreakpoints();
    const { mdDown } = breakpoints.value;
    const sourceType = computed(() => {
      const functionTypes = ["function", "object"];
      if (functionTypes.includes(typeof props.source)) {
        return "function";
      }
      return props.source === "placeholder" ? "placeholder" : "external";
    });
    const className = computed(() => classNames(
      styles.Icon,
      props.tone && styles[variationName("tone", props.tone)],
      props.tone && styles.applyColor
    ));
    const iconAttrs = computed(() => {
      return mdDown ? { viewBox: "1 1 18 18" } : {};
    });
    if (props.tone && sourceType.value === "external") {
      console.warn("Recoloring external SVGs is not supported. Set the intended color on your SVG instead.");
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", {
        class: normalizeClass(className.value)
      }, [
        createVNode(unref(_sfc_main$1), {
          as: "span",
          "visually-hidden": ""
        }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString(_ctx.accessibilityLabel), 1)
          ]),
          _: 1
        }),
        sourceType.value === "function" ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.source), mergeProps({
          key: 0,
          class: unref(styles).Svg,
          focusable: false,
          "aria-hidden": true
        }, iconAttrs.value), null, 16, ["class"])) : createCommentVNode("", true),
        sourceType.value === "placeholder" ? (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(unref(styles).Placeholder)
        }, null, 2)) : createCommentVNode("", true),
        sourceType.value === "external" ? (openBlock(), createElementBlock("img", {
          key: 2,
          alt: "",
          class: normalizeClass(unref(styles).Img),
          src: `data:image/svg+xml;utf8,${_ctx.source}`,
          "aria-hidden": true
        }, null, 10, _hoisted_1)) : createCommentVNode("", true)
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Icon.vue_vue_type_script_setup_true_lang.js.map
