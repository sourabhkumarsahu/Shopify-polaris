{"version":3,"file":"Icon.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/Icon/Icon.vue"],"sourcesContent":["<template lang=\"pug\">\nspan(:class=\"className\")\n  Text(\n    as=\"span\",\n    visually-hidden,\n  ) {{ accessibilityLabel }}\n\n  component(\n    :is=\"source\",\n    v-if=\"sourceType === 'function'\",\n    :class=\"styles.Svg\",\n    :focusable=\"false\",\n    :aria-hidden=\"true\",\n    v-bind=\"iconAttrs\",\n  )\n\n  div(\n    v-if=\"sourceType === 'placeholder'\",\n    :class=\"styles.Placeholder\",\n  )\n\n  img(\n    v-if=\"sourceType === 'external'\",\n    alt=\"\",\n    :class=\"styles.Img\",\n    :src=\"`data:image/svg+xml;utf8,${source}`\",\n    :aria-hidden=\"true\",\n  )\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue';\nimport { classNames, variationName } from '@/utilities/css';\nimport { Text } from '@/components';\nimport type { IconSource } from '@/utilities/types';\nimport { useBreakpoints } from '@/use/useBreakpoints';\nimport type {\n  Tone,\n  Source,\n} from './type';\nimport styles from '@polaris/components/Icon/Icon.module.css';\n\nexport type IconProps = {\n  /** The SVG contents to display in the icon (icons should fit in a 20 Ã— 20 pixel viewBox) */\n  source: IconSource;\n  /** Set the color for the SVG fill */\n  tone?: Tone;\n  /** Descriptive text to be read to screenreaders */\n  accessibilityLabel?: string;\n};\n\nconst props = defineProps<IconProps>();\n\nconst breakpoints = useBreakpoints();\nconst { mdDown } = breakpoints.value;\n\nconst sourceType = computed<Source>(() => {\n  // Because of svgLoader so we need to check if the source is a function AND an object\n  const functionTypes = ['function', 'object']\n\n  if (functionTypes.includes(typeof props.source)) {\n    return 'function';\n  }\n\n  return props.source === 'placeholder' ? 'placeholder' : 'external';\n});\n\nconst className = computed(() => classNames(\n  styles.Icon,\n  props.tone && styles[variationName('tone', props.tone)],\n  props.tone && styles.applyColor,\n));\n\nconst iconAttrs = computed(() => {\n  return mdDown ? { viewBox: '1 1 18 18' } : {};\n});\n\nif (\n  props.tone\n  && sourceType.value === 'external'\n  // TODO: modify this condition to make it only work in dev env\n) {\n  console.warn('Recoloring external SVGs is not supported. Set the intended color on your SVG instead.');\n}\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,UAAM,QAAQ;AAEd,UAAM,cAAc;AACd,UAAA,EAAE,OAAO,IAAI,YAAY;AAEzB,UAAA,aAAa,SAAiB,MAAM;AAElC,YAAA,gBAAgB,CAAC,YAAY,QAAQ;AAE3C,UAAI,cAAc,SAAS,OAAO,MAAM,MAAM,GAAG;AACxC,eAAA;AAAA,MACT;AAEO,aAAA,MAAM,WAAW,gBAAgB,gBAAgB;AAAA,IAAA,CACzD;AAEK,UAAA,YAAY,SAAS,MAAM;AAAA,MAC/B,OAAO;AAAA,MACP,MAAM,QAAQ,OAAO,cAAc,QAAQ,MAAM,IAAI,CAAC;AAAA,MACtD,MAAM,QAAQ,OAAO;AAAA,IAAA,CACtB;AAEK,UAAA,YAAY,SAAS,MAAM;AAC/B,aAAO,SAAS,EAAE,SAAS,YAAA,IAAgB,CAAA;AAAA,IAAC,CAC7C;AAED,QACE,MAAM,QACH,WAAW,UAAU,YAExB;AACA,cAAQ,KAAK,wFAAwF;AAAA,IACvG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}