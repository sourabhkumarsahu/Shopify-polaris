{"version":3,"file":"ListBox.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/Listbox/ListBox.vue"],"sourcesContent":["<template lang=\"pug\">\ntemplate(v-if=\"keyboardEventsEnabled || textFieldFocused\")\n  KeypressListener(\n    keyEvent=\"keydown\",\n    :keyCode=\"Key.DownArrow\",\n    :handler=\"handleDownArrow\",\n  )\n  KeypressListener(\n    keyEvent=\"keydown\",\n    :keyCode=\"Key.UpArrow\",\n    :handler=\"handleUpArrow\",\n  )\n  KeypressListener(\n    keyEvent=\"keydown\",\n    :keyCode=\"Key.Enter\",\n    :handler=\"handleEnter\",\n  )\nText(as=\"span\", visually-hidden)\n  div(aria-live=\"polite\") {{ loading ? loading : null }}\nul(\n  v-if=\"slots.default\",\n  tabindex=\"0\",\n  role=\"listbox\",\n  :class=\"classNames(styles.Listbox)\",\n  :aria-label=\"inCombobox ? undefined : accessibilityLabel\",\n  :aria-labelledby=\"textFieldLabelId || undefined\",\n  :aria-busy=\"Boolean(loading)\",\n  :aria-activedescendant=\"activeDescendant\",\n  :id=\"listId\",\n  @focus=\"handleFocus\",\n  @blur=\"handleBlur\",\n  ref=\"listboxRef\",\n)\n  slot\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, provide, onMounted, type VNode, watch, onUpdated } from 'vue';\nimport { Text, KeypressListener } from '@/components';\nimport useId from '@/use/useId';\nimport { useComboboxListbox } from '@/use/useListbox';\nimport { classNames } from '@/utilities/css';\nimport { Key, type NavigableOption, type VueNode } from '@/utilities/types';\nimport { AutoSelection } from './utils';\nimport { scrollOptionIntoView } from '@polaris/utilities/listbox/utilities';\nimport { debounce } from '@polaris/utilities/debounce';\nimport { scrollable } from '@polaris/components/shared';\nimport styles from '@polaris/components/Listbox/Listbox.module.css';\n\ntype ArrowKeys = 'up' | 'down';\n\nconst OPTION_SELECTOR = '[data-listbox-option]';\nconst OPTION_VALUE_ATTRIBUTE = 'data-listbox-option-value';\nconst OPTION_ACTION_ATTRIBUTE = 'data-listbox-option-action';\nconst OPTION_FOCUS_ATTRIBUTE = 'data-focused';\n\ninterface ListBoxProps {\n  /** Indicates the default active option in the list. Patterns that support option creation should default the active option to the first option.\n   * @default FIRST_SELECTED\n   */\n  autoSelection?: AutoSelection;\n  /** Explicitly enable keyboard control */\n  enableKeyboardControl?: boolean;\n  /** Visually hidden text for screen readers */\n  accessibilityLabel?: string;\n  /** Provide a custom ID for the list element */\n  customListId?: string;\n}\n\ntype ListBoxEvents = {\n  'select': [value: string];\n  'active-option-change': [value: string];\n}\n\nconst props = withDefaults(defineProps<ListBoxProps>(), {\n  autoSelection: AutoSelection.FirstSelected,\n});\nconst emits = defineEmits<ListBoxEvents>();\nconst slots = defineSlots<{\n  /** Inner content of the listbox */\n  default?: (_?: VueNode) => VNode[];\n}>();\n\nconst comboboxListboxContext = useComboboxListbox();\n\nconst {\n  listboxId,\n  textFieldLabelId,\n  textFieldFocused,\n  willLoadMoreOptions,\n  setActiveOptionId,\n  setListboxId,\n  onOptionSelected,\n  onKeyToBottom,\n} = comboboxListboxContext;\n\nconst listboxRef = ref<HTMLUListElement | null>(null);\nconst scrollableRef = ref<HTMLElement | null>(null);\n\nconst loading = ref('');\nconst lazyLoading = ref(false);\nconst currentOptions = ref<HTMLElement[]>([]);\nconst keyboardEventsEnabled = ref(Boolean(props.enableKeyboardControl));\n\nconst activeOption = ref<NavigableOption | undefined>();\n\nconst uniqueId = String(useId());\nconst listId = computed(() => props.customListId || uniqueId);\nconst inCombobox = computed(() => Boolean(setActiveOptionId));\nconst activeDescendant = computed(() => activeOption.value?.domId);\n\nconst getNavigableOptions = () => {\n  if (!listboxRef.value) {\n    return [];\n  }\n\n  return [\n    ...new Set(\n      listboxRef.value.querySelectorAll<HTMLElement>(OPTION_SELECTOR),\n    ),\n  ];\n};\n\nconst getFirstNavigableOption = (\n  currentOpts: HTMLElement[],\n): boolean | Record<string, any> | void => {\n  const hasSelectedOptions = currentOpts.some(\n    (option) => option.getAttribute('aria-selected') === 'true',\n  );\n\n  let elementIndex = 0;\n  const element = currentOpts.find((option, index) => {\n    const isInteractable = option.getAttribute('aria-disabled') !== 'true';\n    let isFirstNavigableOption;\n\n    if (\n      hasSelectedOptions\n      && props.autoSelection === AutoSelection.FirstSelected\n    ) {\n      const isSelected = option.getAttribute('aria-selected') === 'true';\n      isFirstNavigableOption = isSelected && isInteractable;\n    } else {\n      isFirstNavigableOption = isInteractable;\n    }\n\n    if (isFirstNavigableOption) {elementIndex = index;}\n\n    return isFirstNavigableOption;\n  });\n\n  if (!element) {\n    return;\n  }\n\n  return {element, index: elementIndex};\n};\n\nconst handleScrollIntoView = (option: NavigableOption): void => {\n  if (scrollableRef.value) {\n    scrollOptionIntoView(option.element, scrollableRef.value);\n  }\n};\n\nconst handleScrollIntoViewDebounced = debounce(handleScrollIntoView, 50);\n\nconst handleKeyToBottom = (): void | Promise<void> => {\n  if (onKeyToBottom) {\n    lazyLoading.value = true;\n    return Promise.resolve(onKeyToBottom());\n  }\n};\n\nconst handleChangeActiveOption = (\n  nextOption?: NavigableOption,\n): void | Record<string, any> => {\n  if (!nextOption) {\n    activeOption.value = undefined;\n    return;\n  }\n\n  activeOption.value?.element.removeAttribute(OPTION_FOCUS_ATTRIBUTE);\n  nextOption?.element.setAttribute(OPTION_FOCUS_ATTRIBUTE, 'true');\n  handleScrollIntoViewDebounced(nextOption);\n  activeOption.value = nextOption;\n  setActiveOptionId?.(nextOption.domId);\n\n  emits('active-option-change', nextOption.value);\n};\n\nconst getFormattedOption = (\n  element: HTMLElement, index: number,\n): Record<string, any> => {\n  return {\n    element,\n    index,\n    domId: element.id,\n    value: element.getAttribute(OPTION_VALUE_ATTRIBUTE) || '',\n    disabled: element.getAttribute('aria-disabled') === 'true',\n    isAction: element.getAttribute(OPTION_ACTION_ATTRIBUTE) === 'true',\n  };\n};\n\nconst resetActiveOption = (): void => {\n  let nextOption;\n  const nextOptions = getNavigableOptions();\n  const nextActiveOption = getFirstNavigableOption(nextOptions);\n\n  if (nextOptions.length === 0 && currentOptions.value.length > 0) {\n    currentOptions.value = nextOptions;\n    handleChangeActiveOption();\n    return;\n  }\n\n  if (nextActiveOption) {\n    const { element, index } = nextActiveOption as Record<string, any>;\n    nextOption = getFormattedOption(element, index);\n  }\n\n  const optionIsAlreadyActive =\n      activeOption.value !== undefined && nextOption?.domId === activeOption.value?.domId;\n\n  const actionContentHasUpdated =\n      activeOption.value?.isAction &&\n      nextOption?.isAction &&\n      nextOption?.value !== activeOption?.value;\n\n  const currentValues = currentOptions.value.map((option) =>\n    option.getAttribute(OPTION_VALUE_ATTRIBUTE),\n  );\n\n  const nextValues = nextOptions.map((option) =>\n    option.getAttribute(OPTION_VALUE_ATTRIBUTE),\n  );\n\n  const listIsUnchanged =\n    nextValues.length === currentValues.length &&\n    nextValues.every((value, index) => {\n      return currentValues[index] === value;\n    });\n\n  if (listIsUnchanged) {\n    if (optionIsAlreadyActive && actionContentHasUpdated) {\n      currentOptions.value = nextOptions;\n      handleChangeActiveOption(nextOption as NavigableOption);\n    }\n\n    return;\n  }\n\n  const listIsAppended =\n    currentValues.length !== 0 &&\n    nextValues.length > currentValues.length &&\n    currentValues.every((value, index) => {\n      return nextValues[index] === value;\n    });\n\n  if (listIsAppended) {\n    currentOptions.value = nextOptions;\n    return;\n  }\n  currentOptions.value = nextOptions;\n\n  if (lazyLoading.value) {\n    lazyLoading.value = false;\n    return;\n  }\n\n  handleChangeActiveOption(nextOption as NavigableOption);\n};\n\nconst getNextValidOption = async (key: ArrowKeys): Promise<Record<string, any>> => {\n  const lastIndex = currentOptions.value.length - 1;\n  let currentIndex = activeOption.value?.index || 0;\n  let nextIndex = 0;\n  let element = activeOption.value?.element;\n  let totalOptions = -1;\n\n  if (!activeOption.value && props.autoSelection === AutoSelection.None) {\n    const nextOptions = getNavigableOptions();\n    const nextActiveOption = getFirstNavigableOption(nextOptions);\n    currentOptions.value = nextOptions;\n\n    const {\n      element: tmpElement,\n      index,\n    } = nextActiveOption as Record<string, any>;\n\n    return {\n      element: tmpElement,\n      nextIndex: index || 0,\n    };\n  }\n\n  while (totalOptions++ < lastIndex) {\n    nextIndex = getNextIndex(currentIndex, lastIndex, key);\n    element = currentOptions.value[nextIndex];\n    const triggerLazyLoad = nextIndex >= lastIndex;\n    const isDisabled = element?.getAttribute('aria-disabled') === 'true';\n\n    if (triggerLazyLoad && willLoadMoreOptions?.value) {\n      await handleKeyToBottom();\n    }\n\n    if (isDisabled) {\n      currentIndex = nextIndex;\n      element = undefined;\n      continue;\n    }\n\n    break;\n  }\n  return {element, nextIndex};\n};\n\nconst handleArrow = async (\n  type: ArrowKeys,\n  event: KeyboardEvent,\n): Promise<void> => {\n  event.preventDefault();\n\n  const { element, nextIndex } = await getNextValidOption(type) as Record<string, any>;\n\n  if (!element) {\n    return;\n  }\n\n  const nextOption = getFormattedOption(element, nextIndex);\n\n  handleChangeActiveOption(nextOption as NavigableOption);\n};\n\nconst handleDownArrow = (event: KeyboardEvent): void => {\n  handleArrow('down', event);\n};\n\nconst handleUpArrow = (event: KeyboardEvent): void => {\n  handleArrow('up', event);\n};\n\nconst handleEnter = (event: KeyboardEvent): void => {\n  event.preventDefault();\n  event.stopPropagation();\n\n  if (activeOption.value) {\n    onOptionSelect(activeOption.value as NavigableOption);\n  }\n};\n\nconst handleFocus = (): void => {\n  if (props.enableKeyboardControl) {\n    return;\n  }\n\n  keyboardEventsEnabled.value = true;\n};\n\nconst handleBlur = (event: FocusEvent): void => {\n  event.stopPropagation();\n\n  if (keyboardEventsEnabled.value) {\n    const nextActiveOption = getFirstNavigableOption(currentOptions.value);\n\n    if (nextActiveOption) {\n      const { element, index } = nextActiveOption as Record<string, any>;\n      const nextOption = getFormattedOption(element, index);\n\n      handleChangeActiveOption(nextOption as NavigableOption);\n    }\n  }\n\n  if (props.enableKeyboardControl) {\n    return;\n  }\n\n  keyboardEventsEnabled.value = false;\n};\n\nconst setLoading = (value: string): void => {\n  loading.value = value;\n};\n\nconst getNextIndex = (\n  currentIndex: number,\n  lastIndex: number,\n  direction: string,\n): number => {\n  let nextIndex;\n\n  if (direction === 'down') {\n    if (currentIndex === lastIndex) {\n      nextIndex = willLoadMoreOptions?.value ? currentIndex + 1 : 0;\n    } else {\n      nextIndex = currentIndex + 1;\n    }\n  } else {\n    nextIndex = currentIndex === 0 ? lastIndex : currentIndex - 1;\n  }\n\n  return nextIndex;\n};\n\nconst onOptionSelect = (option: NavigableOption): void => {\n  handleChangeActiveOption(option);\n\n  if (onOptionSelected) {\n    onOptionSelected();\n  }\n\n  emits('select', option.value);\n};\n\nonUpdated(() => {\n  if (\n    props.autoSelection !== AutoSelection.None\n    && !loading.value\n    && slots.default\n    && slots.default().length > 0\n  ) {\n    resetActiveOption();\n  }\n});\n\nonMounted(() => {\n  if (\n    props.autoSelection !== AutoSelection.None\n    && !loading.value\n    && slots.default\n    && slots.default().length > 0\n  ) {\n    resetActiveOption();\n  }\n\n  if (props.enableKeyboardControl && !keyboardEventsEnabled.value) {\n    keyboardEventsEnabled.value = true;\n  }\n\n  if (setListboxId && !listboxId?.value) {\n    setListboxId(listId.value);\n  }\n});\n\nwatch(\n  () => listboxRef.value,\n  () => {\n    if (listboxRef.value) {\n      scrollableRef.value = listboxRef.value.closest(scrollable.selector);\n    }\n  },\n);\n\nprovide('listbox', { onOptionSelect, setLoading });\nprovide('within-listbox', true);\n</script>\n"],"names":["_useSlots"],"mappings":"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"}