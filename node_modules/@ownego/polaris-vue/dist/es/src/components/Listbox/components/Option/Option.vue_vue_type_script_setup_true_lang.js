import { defineComponent, mergeModels, useSlots, useModel, onMounted, watch, inject, computed, ref, openBlock, createElementBlock, mergeProps, unref, createBlock, withCtx, renderSlot, Fragment } from "vue";
import { c as classNames } from "../../../../utilities/css.js";
import { u as useId } from "../../../../use/useId.js";
import { l as listboxWithinSectionDataSelector } from "../../../../../polaris/polaris-react/src/components/Listbox/components/Section/selectors.js";
import { _ as _sfc_main$2 } from "../TextOption/TextOption.vue_vue_type_script_setup_true_lang.js";
import { u as useHasSlot } from "../../../../use/useHasSlot.js";
import { b as useSection, c as useListbox, d as useAction } from "../../../../use/useListbox.js";
import { _ as _sfc_main$1 } from "../../../UnstyledLink/UnstyledLink.vue_vue_type_script_setup_true_lang.js";
const Option = "Polaris-Listbox-Option";
const divider = "Polaris-Listbox-Option--divider";
const styles = {
  Option,
  divider
};
const _hoisted_1 = ["id", "role", "data-within-section", "data-listbox-option-value", "data-listbox-option-action", "data-listbox-option-destructive", "aria-disabled", "aria-label", "aria-selected"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Option",
  props: /* @__PURE__ */ mergeModels({
    value: {},
    accessibilityLabel: {},
    selected: { type: Boolean },
    disabled: { type: Boolean },
    divider: { type: Boolean }
  }, {
    "modelValue": { type: Boolean },
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const props = __props;
    const slots = useSlots();
    const model = useModel(__props, "modelValue");
    onMounted(() => {
      model.value = props.selected;
    });
    watch(
      () => props.selected,
      (newVal) => {
        model.value = newVal;
      },
      { immediate: true }
    );
    const mappedActionContext = inject("mapped-action", computed(() => ({})));
    const sectionId = useSection();
    const listboxContext = useListbox();
    const { isSlotContainHtml } = useHasSlot();
    const isAction = useAction();
    const { role, url, external, onAction, destructive } = mappedActionContext.value;
    const { onOptionSelect } = listboxContext;
    const listItemRef = ref(null);
    const domId = String(useId());
    const isWithinSection = computed(() => Boolean(sectionId));
    const legacyRoleSupport = computed(() => role || "option");
    const className = computed(() => classNames(
      styles.Option,
      props.divider && styles.divider
    ));
    const sectionAttributes = computed(() => ({
      [listboxWithinSectionDataSelector.attribute]: isWithinSection.value
    }));
    const isSlotContainHtmlTags = computed(() => {
      return isSlotContainHtml(slots.default);
    });
    const handleOptionSelect = (event) => {
      if (props.disabled) return;
      event.preventDefault();
      event.stopPropagation();
      model.value = !model.value;
      onAction && onAction();
      if (listItemRef.value && !onAction) {
        onOptionSelect({
          domId,
          value: props.value,
          element: listItemRef.value,
          disabled: props.disabled
        });
      }
    };
    const handleMouseDown = (event) => {
      event.preventDefault();
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("li", mergeProps(sectionAttributes.value, {
        tabindex: "-1",
        "data-listbox-option": "",
        ref_key: "listItemRef",
        ref: listItemRef,
        id: unref(domId),
        class: className.value,
        role: legacyRoleSupport.value,
        "data-within-section": isWithinSection.value,
        "data-listbox-option-value": _ctx.value,
        "data-listbox-option-action": unref(isAction),
        "data-listbox-option-destructive": unref(destructive),
        "aria-disabled": _ctx.disabled,
        "aria-label": _ctx.accessibilityLabel,
        "aria-selected": _ctx.selected,
        onClick: handleOptionSelect,
        onKeydown: handleOptionSelect,
        onMousedown: handleMouseDown
      }), [
        unref(url) ? (openBlock(), createBlock(unref(_sfc_main$1), {
          key: 0,
          url: unref(url),
          external: unref(external)
        }, {
          default: withCtx(() => [
            isSlotContainHtmlTags.value ? renderSlot(_ctx.$slots, "default", { key: 0 }) : (openBlock(), createBlock(_sfc_main$2, {
              key: 1,
              modelValue: model.value,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
              disabled: _ctx.disabled
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            }, 8, ["modelValue", "disabled"]))
          ]),
          _: 3
        }, 8, ["url", "external"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          isSlotContainHtmlTags.value ? renderSlot(_ctx.$slots, "default", { key: 0 }) : (openBlock(), createBlock(_sfc_main$2, {
            key: 1,
            modelValue: model.value,
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => model.value = $event),
            disabled: _ctx.disabled
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["modelValue", "disabled"]))
        ], 64))
      ], 16, _hoisted_1);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Option.vue_vue_type_script_setup_true_lang.js.map
