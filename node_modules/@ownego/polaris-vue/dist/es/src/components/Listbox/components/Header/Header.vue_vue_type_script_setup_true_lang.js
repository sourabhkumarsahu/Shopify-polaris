import { defineComponent, useSlots, openBlock, createElementBlock, unref, renderSlot, createBlock, withCtx, createVNode } from "vue";
import { u as useHasSlot } from "../../../../use/useHasSlot.js";
import { b as useSection } from "../../../../use/useListbox.js";
import { _ as _sfc_main$1 } from "../../../Box/Box.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../../../Text/Text.vue_vue_type_script_setup_true_lang.js";
const _hoisted_1 = ["id"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Header",
  setup(__props) {
    const sectionId = useSection();
    const slots = useSlots();
    const { isSlotContainHtml } = useHasSlot();
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        id: unref(sectionId),
        "aria-hidden": ""
      }, [
        unref(isSlotContainHtml)(unref(slots).default) ? renderSlot(_ctx.$slots, "default", { key: 0 }) : (openBlock(), createBlock(unref(_sfc_main$1), {
          key: 1,
          "padding-block-start": "200",
          "padding-inline-start": "400",
          "padding-block-end": "200",
          "padding-inline-end": "400"
        }, {
          default: withCtx(() => [
            createVNode(unref(_sfc_main$2), {
              as: "span",
              variant: "headingSm",
              tone: "subdued"
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            })
          ]),
          _: 3
        }))
      ], 8, _hoisted_1);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Header.vue_vue_type_script_setup_true_lang.js.map
