import { defineComponent, mergeModels, useModel, onMounted, watch, computed, openBlock, createElementBlock, normalizeClass, createElementVNode, unref, createVNode, withCtx, renderSlot, Fragment, createBlock } from "vue";
import { C as CheckIcon } from "../../../../../vendor.js";
import { c as classNames } from "../../../../utilities/css.js";
import { e as useComboboxListboxOption, d as useAction } from "../../../../use/useListbox.js";
import { _ as _sfc_main$2 } from "../../../Box/Box.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../../Checkbox/Checkbox.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../../../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../../../InlineStack/InlineStack.vue_vue_type_script_setup_true_lang.js";
const TextOption = "Polaris-Listbox-TextOption";
const allowMultiple = "Polaris-Listbox-TextOption--allowMultiple";
const isAction = "Polaris-Listbox-TextOption--isAction";
const disabled = "Polaris-Listbox-TextOption--disabled";
const selected = "Polaris-Listbox-TextOption--selected";
const Content = "Polaris-Listbox-TextOption__Content";
const Checkbox = "Polaris-Listbox-TextOption__Checkbox";
const styles = {
  TextOption,
  allowMultiple,
  isAction,
  disabled,
  selected,
  Content,
  Checkbox
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "TextOption",
  props: /* @__PURE__ */ mergeModels({
    selected: { type: Boolean },
    disabled: { type: Boolean }
  }, {
    "modelValue": { type: Boolean },
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const props = __props;
    const model = useModel(__props, "modelValue");
    onMounted(() => {
      model.value = props.selected;
    });
    watch(
      () => props.selected,
      (newVal) => {
        model.value = newVal;
      },
      { immediate: true }
    );
    const { allowMultiple: allowMultiple2 } = useComboboxListboxOption();
    const isAction2 = useAction();
    const className = computed(() => classNames(
      styles.TextOption,
      props.selected && !allowMultiple2 && styles.selected,
      props.disabled && styles.disabled,
      allowMultiple2 && styles.allowMultiple,
      isAction2 && styles.isAction
    ));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        createElementVNode("div", {
          class: normalizeClass(unref(styles).Content)
        }, [
          unref(allowMultiple2) && !unref(isAction2) ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(styles).Checkbox)
          }, [
            createVNode(unref(_sfc_main$1), {
              modelValue: model.value,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
              disabled: _ctx.disabled
            }, {
              label: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            }, 8, ["modelValue", "disabled"])
          ], 2)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            _ctx.selected ? (openBlock(), createBlock(unref(_sfc_main$2), {
              key: 0,
              width: "100%"
            }, {
              default: withCtx(() => [
                createVNode(unref(_sfc_main$3), {
                  wrap: false,
                  align: "space-between",
                  gap: "200"
                }, {
                  default: withCtx(() => [
                    renderSlot(_ctx.$slots, "default"),
                    createVNode(unref(_sfc_main$3), { align: "end" }, {
                      default: withCtx(() => [
                        createVNode(unref(_sfc_main$4), { source: unref(CheckIcon) }, null, 8, ["source"])
                      ]),
                      _: 1
                    })
                  ]),
                  _: 3
                })
              ]),
              _: 3
            })) : renderSlot(_ctx.$slots, "default", { key: 1 })
          ], 64))
        ], 2)
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=TextOption.vue_vue_type_script_setup_true_lang.js.map
