import { defineComponent, computed, openBlock, createBlock, resolveDynamicComponent, normalizeClass, normalizeStyle, unref, withCtx, renderSlot } from "vue";
import { g as getResponsiveProps, c as classNames, s as sanitizeCustomProperties } from "../../utilities/css.js";
const listReset = "Polaris-Box--listReset";
const Box = "Polaris-Box";
const visuallyHidden = "Polaris-Box--visuallyHidden";
const printHidden = "Polaris-Box--printHidden";
const styles = {
  listReset,
  Box,
  visuallyHidden,
  printHidden
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Box",
  props: {
    as: { default: "div" },
    background: {},
    borderColor: {},
    borderStyle: {},
    borderRadius: {},
    borderEndStartRadius: {},
    borderEndEndRadius: {},
    borderStartStartRadius: {},
    borderStartEndRadius: {},
    borderWidth: {},
    borderBlockStartWidth: {},
    borderBlockEndWidth: {},
    borderInlineStartWidth: {},
    borderInlineEndWidth: {},
    color: {},
    minHeight: {},
    minWidth: {},
    maxWidth: {},
    overflowX: {},
    overflowY: {},
    padding: {},
    paddingBlock: {},
    paddingBlockStart: {},
    paddingBlockEnd: {},
    paddingInline: {},
    paddingInlineStart: {},
    paddingInlineEnd: {},
    role: {},
    shadow: {},
    width: {},
    position: {},
    insetBlockStart: {},
    insetBlockEnd: {},
    insetInlineStart: {},
    insetInlineEnd: {},
    opacity: {},
    outlineColor: {},
    outlineStyle: {},
    outlineWidth: {},
    printHidden: { type: Boolean },
    visuallyHidden: { type: Boolean },
    zIndex: {}
  },
  setup(__props) {
    const props = __props;
    const borderStyleValue = computed(() => props.borderStyle ? props.borderStyle : props.borderColor || props.borderWidth || props.borderBlockStartWidth || props.borderBlockEndWidth || props.borderInlineStartWidth || props.borderInlineEndWidth ? "solid" : void 0);
    const outlineStyleValue = computed(() => props.outlineStyle ? props.outlineStyle : props.outlineColor || props.outlineWidth ? "solid" : void 0);
    const style = computed(() => ({
      "--pc-box-color": props.color ? `var(--p-color-${props.color})` : void 0,
      "--pc-box-background": props.background ? `var(--p-color-${props.background})` : void 0,
      // eslint-disable-next-line no-nested-ternary
      "--pc-box-border-color": props.borderColor ? props.borderColor === "transparent" ? "transparent" : `var(--p-color-${props.borderColor})` : void 0,
      "--pc-box-border-style": borderStyleValue.value,
      "--pc-box-border-radius": props.borderRadius ? `var(--p-border-radius-${props.borderRadius})` : void 0,
      "--pc-box-border-end-start-radius": props.borderEndStartRadius ? `var(--p-border-radius-${props.borderEndStartRadius})` : void 0,
      "--pc-box-border-end-end-radius": props.borderEndEndRadius ? `var(--p-border-radius-${props.borderEndEndRadius})` : void 0,
      "--pc-box-border-start-start-radius": props.borderStartStartRadius ? `var(--p-border-radius-${props.borderStartStartRadius})` : void 0,
      "--pc-box-border-start-end-radius": props.borderStartEndRadius ? `var(--p-border-radius-${props.borderStartEndRadius})` : void 0,
      "--pc-box-border-width": props.borderWidth ? `var(--p-border-width-${props.borderWidth})` : void 0,
      "--pc-box-border-block-start-width": props.borderBlockStartWidth ? `var(--p-border-width-${props.borderBlockStartWidth})` : void 0,
      "--pc-box-border-block-end-width": props.borderBlockEndWidth ? `var(--p-border-width-${props.borderBlockEndWidth})` : void 0,
      "--pc-box-border-inline-start-width": props.borderInlineStartWidth ? `var(--p-border-width-${props.borderInlineStartWidth})` : void 0,
      "--pc-box-border-inline-end-width": props.borderInlineEndWidth ? `var(--p-border-width-${props.borderInlineEndWidth})` : void 0,
      "--pc-box-min-height": props.minHeight,
      "--pc-box-min-width": props.minWidth,
      "--pc-box-max-width": props.maxWidth,
      "--pc-box-outline-color": props.outlineColor ? `var(--p-color-${props.outlineColor})` : void 0,
      "--pc-box-outline-style": outlineStyleValue.value,
      "--pc-box-outline-width": props.outlineWidth ? `var(--p-border-width-${props.outlineWidth})` : void 0,
      "--pc-box-overflow-x": props.overflowX,
      "--pc-box-overflow-y": props.overflowY,
      ...getResponsiveProps(
        "box",
        "padding-block-start",
        "space",
        props.paddingBlockStart || props.paddingBlock || props.padding
      ),
      ...getResponsiveProps(
        "box",
        "padding-block-end",
        "space",
        props.paddingBlockEnd || props.paddingBlock || props.padding
      ),
      ...getResponsiveProps(
        "box",
        "padding-inline-start",
        "space",
        props.paddingInlineStart || props.paddingInline || props.padding
      ),
      ...getResponsiveProps(
        "box",
        "padding-inline-end",
        "space",
        props.paddingInlineEnd || props.paddingInline || props.padding
      ),
      "--pc-box-shadow": props.shadow ? `var(--p-shadow-${props.shadow})` : void 0,
      "--pc-box-width": props.width,
      position: props.position,
      "--pc-box-inset-block-start": props.insetBlockStart ? `var(--p-space-${props.insetBlockStart})` : void 0,
      "--pc-box-inset-block-end": props.insetBlockEnd ? `var(--p-space-${props.insetBlockEnd})` : void 0,
      "--pc-box-inset-inline-start": props.insetInlineStart ? `var(--p-space-${props.insetInlineStart})` : void 0,
      "--pc-box-inset-inline-end": props.insetInlineEnd ? `var(--p-space-${props.insetInlineEnd})` : void 0,
      zIndex: props.zIndex,
      opacity: props.opacity
    }));
    const className = computed(() => {
      return classNames(
        styles.Box,
        props.visuallyHidden && styles.visuallyHidden,
        props.printHidden && styles.printHidden,
        props.as === "ul" && styles.listReset
      );
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.as), {
        class: normalizeClass(className.value),
        style: normalizeStyle(unref(sanitizeCustomProperties)(style.value))
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "style"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Box.vue_vue_type_script_setup_true_lang.js.map
