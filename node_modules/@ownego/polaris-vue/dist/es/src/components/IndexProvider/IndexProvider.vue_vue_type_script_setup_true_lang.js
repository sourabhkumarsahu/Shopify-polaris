import { defineComponent, toRef, computed, provide, renderSlot } from "vue";
import { u as useBulkSelectionData, a as useHandleBulkSelection } from "./utils.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "IndexProvider",
  props: {
    selectable: { type: Boolean, default: true },
    itemCount: {},
    selectedItemsCount: { default: 0 },
    resourceName: {},
    loading: { type: Boolean },
    hasMoreItems: { type: Boolean },
    condensed: { type: Boolean },
    onSelectionChange: {},
    paginatedSelectAllText: {}
  },
  setup(__props) {
    const props = __props;
    const {
      paginatedSelectAllText,
      bulkActionsLabel,
      bulkActionsAccessibilityLabel,
      resourceName,
      selectMode,
      bulkSelectState
    } = useBulkSelectionData({
      selectedItemsCount: toRef(props, "selectedItemsCount"),
      itemCount: toRef(props, "itemCount"),
      hasMoreItems: toRef(props, "hasMoreItems"),
      resourceName: props.resourceName,
      defaultPaginatedSelectAllText: props.paginatedSelectAllText
    });
    const handleSelectionChange = useHandleBulkSelection({
      onSelectionChange: props.onSelectionChange
    });
    const selectModeRef = computed(() => selectMode.value && props.selectable);
    const contextValue = {
      itemCount: toRef(props, "itemCount"),
      selectMode: selectModeRef,
      selectable: toRef(props, "selectable"),
      resourceName,
      loading: toRef(props, "loading"),
      paginatedSelectAllText,
      hasMoreItems: toRef(props, "hasMoreItems"),
      bulkActionsLabel,
      bulkActionsAccessibilityLabel,
      bulkSelectState,
      selectedItemsCount: toRef(props, "selectedItemsCount"),
      condensed: toRef(props, "condensed")
    };
    provide("indexContext", contextValue);
    provide("indexRowContext", {
      selectable: toRef(props, "selectable"),
      selectMode: selectModeRef,
      condensed: toRef(props, "condensed")
    });
    provide("indexSelectionChangeContext", handleSelectionChange);
    return (_ctx, _cache) => {
      return renderSlot(_ctx.$slots, "default");
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=IndexProvider.vue_vue_type_script_setup_true_lang.js.map
