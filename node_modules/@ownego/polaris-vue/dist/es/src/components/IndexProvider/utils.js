import { computed, ref } from "vue";
import { u as useI18n } from "../../use/useI18n.js";
import { S as SELECT_ALL_ITEMS, a as SelectionType } from "./types.js";
function useBulkSelectionData({
  selectedItemsCount,
  itemCount,
  hasMoreItems,
  resourceName: passedResourceName,
  defaultPaginatedSelectAllText
}) {
  const i18n = useI18n();
  const selectable = computed(() => Boolean(selectedItemsCount));
  const selectMode = computed(() => selectedItemsCount.value === "All" || selectedItemsCount.value > 0);
  const defaultResourceName = {
    singular: i18n.translate("Polaris.IndexProvider.defaultItemSingular"),
    plural: i18n.translate("Polaris.IndexProvider.defaultItemPlural")
  };
  const resourceName = passedResourceName ? passedResourceName : defaultResourceName;
  const paginatedSelectAllText = computed(() => {
    if (!selectable || !hasMoreItems) {
      return;
    }
    if (selectedItemsCount.value === SELECT_ALL_ITEMS) {
      if (defaultPaginatedSelectAllText) {
        return defaultPaginatedSelectAllText;
      }
      return i18n.translate("Polaris.IndexProvider.allItemsSelected", {
        itemsLength: itemCount.value,
        resourceNamePlural: resourceName.plural.toLocaleLowerCase()
      });
    }
    return;
  });
  const bulkActionsLabel = computed(() => {
    const selectedItemsCountLabel = selectedItemsCount.value === SELECT_ALL_ITEMS ? `${itemCount.value}+` : selectedItemsCount.value;
    return i18n.translate("Polaris.IndexProvider.selected", {
      selectedItemsCount: selectedItemsCountLabel
    });
  });
  const bulkActionsAccessibilityLabel = computed(() => {
    const totalItemsCount = itemCount.value;
    const allSelected = selectedItemsCount.value === totalItemsCount;
    if (totalItemsCount === 1 && allSelected) {
      return i18n.translate(
        "Polaris.IndexProvider.a11yCheckboxDeselectAllSingle",
        {
          resourceNameSingular: resourceName.singular
        }
      );
    }
    if (totalItemsCount === 1) {
      return i18n.translate(
        "Polaris.IndexProvider.a11yCheckboxSelectAllSingle",
        {
          resourceNameSingular: resourceName.singular
        }
      );
    }
    if (allSelected) {
      return i18n.translate(
        "Polaris.IndexProvider.a11yCheckboxDeselectAllMultiple",
        {
          itemsLength: itemCount.value,
          resourceNamePlural: resourceName.plural
        }
      );
    }
    return i18n.translate(
      "Polaris.IndexProvider.a11yCheckboxSelectAllMultiple",
      {
        itemsLength: itemCount.value,
        resourceNamePlural: resourceName.plural
      }
    );
  });
  const bulkSelectState = computed(() => {
    if (!selectedItemsCount.value || selectedItemsCount.value === 0) {
      return void 0;
    } else if (selectedItemsCount.value === SELECT_ALL_ITEMS || selectedItemsCount.value === itemCount.value) {
      return true;
    }
    return "indeterminate";
  });
  return {
    paginatedSelectAllText,
    bulkActionsLabel,
    bulkActionsAccessibilityLabel,
    resourceName,
    selectMode,
    bulkSelectState,
    selectable
  };
}
function useHandleBulkSelection({
  onSelectionChange = () => {
  }
}) {
  const lastSelected = ref(null);
  const handleSelectionChange = (selectionType, toggleType, selection, sortOrder) => {
    const prevSelected = lastSelected.value;
    if (typeof sortOrder === "number") {
      lastSelected.value = sortOrder;
    }
    if (selectionType === SelectionType.Single || selectionType === SelectionType.Multi && (typeof prevSelected !== "number" || typeof sortOrder !== "number")) {
      onSelectionChange(SelectionType.Single, toggleType, selection);
    } else if (selectionType === SelectionType.Multi) {
      const min = Math.min(prevSelected, sortOrder);
      const max = Math.max(prevSelected, sortOrder);
      onSelectionChange(selectionType, toggleType, [min, max]);
    } else if (selectionType === SelectionType.Page || selectionType === SelectionType.All) {
      onSelectionChange(selectionType, toggleType);
    } else if (selectionType === SelectionType.Range) {
      onSelectionChange(SelectionType.Range, toggleType, selection);
    }
  };
  return handleSelectionChange;
}
export {
  useHandleBulkSelection as a,
  useBulkSelectionData as u
};
//# sourceMappingURL=utils.js.map
