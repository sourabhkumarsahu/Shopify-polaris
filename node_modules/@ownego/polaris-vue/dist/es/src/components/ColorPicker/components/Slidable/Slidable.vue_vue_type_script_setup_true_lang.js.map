{"version":3,"file":"Slidable.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../../../src/components/ColorPicker/components/Slidable/Slidable.vue"],"sourcesContent":["<template lang=\"pug\">\ndiv(\n  ref=\"nodeRef\",\n  :class=\"styles.Slidable\",\n  @mousedown=\"startDrag\",\n  @touchstart=\"startDrag\"\n)\n  EventListener(\n    v-if=\"isDragging\",\n    event=\"mouseup\",\n    :handler=\"handleDragEnd\",\n  )\n  EventListener(\n    v-if=\"isDragging\",\n    event=\"mousemove\",\n    :handler=\"handleMove\",\n    :passive=\"false\",\n  )\n  EventListener(\n    v-if=\"isDragging\",\n    event=\"touchmove\",\n    :handler=\"handleMove\",\n    :passive=\"false\",\n  )\n  EventListener(\n    v-if=\"isDragging\",\n    event=\"touchend\",\n    :handler=\"handleDragEnd\",\n  )\n  EventListener(\n    v-if=\"isDragging\",\n    event=\"touchcancel\",\n    :handler=\"handleDragEnd\",\n  )\n\n  div(\n    ref=\"draggerNode\",\n    :style=\"draggerPositioning\",\n    :class=\"styles.Dragger\",\n  )\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, onMounted, ref, onBeforeUnmount } from 'vue';\nimport { isServer } from '@polaris/utilities/target';\nimport { EventListener } from '@/components';\n\nimport styles from '@polaris/components/ColorPicker/ColorPicker.module.css';\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\nexport type SlidableProps = {\n  draggerX?: number;\n  draggerY?: number;\n}\n\ntype SlidableEvents = {\n  'change': [position: Position];\n  'dragger-height': [height: number];\n}\n\nconst props = defineProps<SlidableProps>();\nconst emits = defineEmits<SlidableEvents>();\n\nconst isDragging = ref(false);\n\nif (!isServer) {\n  window.addEventListener('touchmove', (event) => {\n    if (isDragging.value) {\n      event.preventDefault();\n    }\n  }, { passive: false });\n}\n\nconst nodeRef = ref<HTMLElement | null>(null);\nconst draggerNode = ref<HTMLElement | null>(null);\nconst observer = ref<ResizeObserver | null>(null);\n\nconst draggerPositioning = computed(() => ({\n  transform: `translate3d(${props.draggerX}px, ${props.draggerY}px, 0)`,\n}));\n\nonMounted(() => {\n  if (!draggerNode.value) {\n    return;\n  }\n\n  observer.value = new ResizeObserver(() => {\n    /**\n     * This is a workaround to enable event listeners to be\n     * re-attached when moving from one document to another\n     * when using a React portal across iframes.\n     * Using a resize observer works because when the clientWidth\n     * will go from 0 to the real width after the node\n     * gets rendered in its new place.\n     */\n    // if (window !== draggerNode.value?.ownerDocument.defaultView) {\n    //   (window as Window) = draggerNode.value?.ownerDocument.defaultView as Window;\n    // }\n    handleResize();\n  });\n\n  observer.value.observe(draggerNode.value);\n});\n\nonBeforeUnmount(() => {\n  observer.value?.disconnect();\n});\n\nconst startDrag = (event: MouseEvent | TouchEvent) => {\n  if (isMouseDownEvent(event)) {\n    handleDraggerMove(event.clientX, event.clientY);\n  }\n\n  isDragging.value = true;\n};\n\nconst handleResize = () => {\n  if (!draggerNode.value) {\n    return;\n  }\n\n  emits('dragger-height', draggerNode.value.clientWidth);\n}\n\nconst handleDragEnd = () => {\n  isDragging.value = false;\n};\n\nconst handleMove = (event: MouseEvent | TouchEvent) => {\n  event.stopImmediatePropagation();\n  event.stopPropagation();\n\n  if (event.cancelable) {\n    event.preventDefault();\n  }\n\n  if (isMouseMoveEvent(event)) {\n    handleDraggerMove(event.clientX, event.clientY);\n    return;\n  }\n\n  handleDraggerMove(event.touches[0].clientX, event.touches[0].clientY);\n};\n\nconst handleDraggerMove = (x: number, y: number) => {\n  if (!nodeRef.value) {\n    return;\n  }\n\n  const rect = nodeRef.value.getBoundingClientRect();\n  const offsetX = x - rect.left;\n  const offsetY = y - rect.top;\n\n  emits('change', { x: offsetX, y: offsetY });\n};\n\nfunction isMouseMoveEvent(event: Event): event is MouseEvent {\n  return event.type === 'mousemove';\n}\n\nfunction isMouseDownEvent(event: MouseEvent | TouchEvent): event is MouseEvent {\n  return event.type === 'mousedown';\n}\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAgEA,UAAM,QAAQ;AACd,UAAM,QAAQ;AAER,UAAA,aAAa,IAAI,KAAK;AAE5B,QAAI,CAAC,UAAU;AACN,aAAA,iBAAiB,aAAa,CAAC,UAAU;AAC9C,YAAI,WAAW,OAAO;AACpB,gBAAM,eAAe;AAAA,QACvB;AAAA,MAAA,GACC,EAAE,SAAS,MAAA,CAAO;AAAA,IACvB;AAEM,UAAA,UAAU,IAAwB,IAAI;AACtC,UAAA,cAAc,IAAwB,IAAI;AAC1C,UAAA,WAAW,IAA2B,IAAI;AAE1C,UAAA,qBAAqB,SAAS,OAAO;AAAA,MACzC,WAAW,eAAe,MAAM,QAAQ,OAAO,MAAM,QAAQ;AAAA,IAC7D,EAAA;AAEF,cAAU,MAAM;AACV,UAAA,CAAC,YAAY,OAAO;AACtB;AAAA,MACF;AAES,eAAA,QAAQ,IAAI,eAAe,MAAM;AAY3B;MAAA,CACd;AAEQ,eAAA,MAAM,QAAQ,YAAY,KAAK;AAAA,IAAA,CACzC;AAED,oBAAgB,MAAM;;AACpB,qBAAS,UAAT,mBAAgB;AAAA,IAAW,CAC5B;AAEK,UAAA,YAAY,CAAC,UAAmC;AAChD,UAAA,iBAAiB,KAAK,GAAG;AACT,0BAAA,MAAM,SAAS,MAAM,OAAO;AAAA,MAChD;AAEA,iBAAW,QAAQ;AAAA,IAAA;AAGrB,UAAM,eAAe,MAAM;AACrB,UAAA,CAAC,YAAY,OAAO;AACtB;AAAA,MACF;AAEM,YAAA,kBAAkB,YAAY,MAAM,WAAW;AAAA,IAAA;AAGvD,UAAM,gBAAgB,MAAM;AAC1B,iBAAW,QAAQ;AAAA,IAAA;AAGf,UAAA,aAAa,CAAC,UAAmC;AACrD,YAAM,yBAAyB;AAC/B,YAAM,gBAAgB;AAEtB,UAAI,MAAM,YAAY;AACpB,cAAM,eAAe;AAAA,MACvB;AAEI,UAAA,iBAAiB,KAAK,GAAG;AACT,0BAAA,MAAM,SAAS,MAAM,OAAO;AAC9C;AAAA,MACF;AAEkB,wBAAA,MAAM,QAAQ,CAAC,EAAE,SAAS,MAAM,QAAQ,CAAC,EAAE,OAAO;AAAA,IAAA;AAGhE,UAAA,oBAAoB,CAAC,GAAW,MAAc;AAC9C,UAAA,CAAC,QAAQ,OAAO;AAClB;AAAA,MACF;AAEM,YAAA,OAAO,QAAQ,MAAM,sBAAsB;AAC3C,YAAA,UAAU,IAAI,KAAK;AACnB,YAAA,UAAU,IAAI,KAAK;AAEzB,YAAM,UAAU,EAAE,GAAG,SAAS,GAAG,SAAS;AAAA,IAAA;AAG5C,aAAS,iBAAiB,OAAmC;AAC3D,aAAO,MAAM,SAAS;AAAA,IACxB;AAEA,aAAS,iBAAiB,OAAqD;AAC7E,aAAO,MAAM,SAAS;AAAA,IACxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}