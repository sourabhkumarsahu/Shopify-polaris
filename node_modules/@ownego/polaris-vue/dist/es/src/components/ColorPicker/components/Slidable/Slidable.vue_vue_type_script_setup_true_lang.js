import { defineComponent, ref, computed, onMounted, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, unref, createBlock, createCommentVNode, createElementVNode, normalizeStyle } from "vue";
import { i as isServer } from "../../../../../polaris/polaris-react/src/utilities/target.js";
import { s as styles } from "../../ColorPicker.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../../EventListener/EventListener.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Slidable",
  props: {
    draggerX: {},
    draggerY: {}
  },
  emits: ["change", "dragger-height"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const isDragging = ref(false);
    if (!isServer) {
      window.addEventListener("touchmove", (event) => {
        if (isDragging.value) {
          event.preventDefault();
        }
      }, { passive: false });
    }
    const nodeRef = ref(null);
    const draggerNode = ref(null);
    const observer = ref(null);
    const draggerPositioning = computed(() => ({
      transform: `translate3d(${props.draggerX}px, ${props.draggerY}px, 0)`
    }));
    onMounted(() => {
      if (!draggerNode.value) {
        return;
      }
      observer.value = new ResizeObserver(() => {
        handleResize();
      });
      observer.value.observe(draggerNode.value);
    });
    onBeforeUnmount(() => {
      var _a;
      (_a = observer.value) == null ? void 0 : _a.disconnect();
    });
    const startDrag = (event) => {
      if (isMouseDownEvent(event)) {
        handleDraggerMove(event.clientX, event.clientY);
      }
      isDragging.value = true;
    };
    const handleResize = () => {
      if (!draggerNode.value) {
        return;
      }
      emits("dragger-height", draggerNode.value.clientWidth);
    };
    const handleDragEnd = () => {
      isDragging.value = false;
    };
    const handleMove = (event) => {
      event.stopImmediatePropagation();
      event.stopPropagation();
      if (event.cancelable) {
        event.preventDefault();
      }
      if (isMouseMoveEvent(event)) {
        handleDraggerMove(event.clientX, event.clientY);
        return;
      }
      handleDraggerMove(event.touches[0].clientX, event.touches[0].clientY);
    };
    const handleDraggerMove = (x, y) => {
      if (!nodeRef.value) {
        return;
      }
      const rect = nodeRef.value.getBoundingClientRect();
      const offsetX = x - rect.left;
      const offsetY = y - rect.top;
      emits("change", { x: offsetX, y: offsetY });
    };
    function isMouseMoveEvent(event) {
      return event.type === "mousemove";
    }
    function isMouseDownEvent(event) {
      return event.type === "mousedown";
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "nodeRef",
        ref: nodeRef,
        class: normalizeClass(unref(styles).Slidable),
        onMousedown: startDrag,
        onTouchstart: startDrag
      }, [
        isDragging.value ? (openBlock(), createBlock(unref(_sfc_main$1), {
          key: 0,
          event: "mouseup",
          handler: handleDragEnd
        })) : createCommentVNode("", true),
        isDragging.value ? (openBlock(), createBlock(unref(_sfc_main$1), {
          key: 1,
          event: "mousemove",
          handler: handleMove,
          passive: false
        })) : createCommentVNode("", true),
        isDragging.value ? (openBlock(), createBlock(unref(_sfc_main$1), {
          key: 2,
          event: "touchmove",
          handler: handleMove,
          passive: false
        })) : createCommentVNode("", true),
        isDragging.value ? (openBlock(), createBlock(unref(_sfc_main$1), {
          key: 3,
          event: "touchend",
          handler: handleDragEnd
        })) : createCommentVNode("", true),
        isDragging.value ? (openBlock(), createBlock(unref(_sfc_main$1), {
          key: 4,
          event: "touchcancel",
          handler: handleDragEnd
        })) : createCommentVNode("", true),
        createElementVNode("div", {
          ref_key: "draggerNode",
          ref: draggerNode,
          style: normalizeStyle(draggerPositioning.value),
          class: normalizeClass(unref(styles).Dragger)
        }, null, 6)
      ], 34);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Slidable.vue_vue_type_script_setup_true_lang.js.map
