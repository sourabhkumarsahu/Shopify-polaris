import { defineComponent, ref, computed, onMounted, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, unref, createVNode } from "vue";
import { c as calculateDraggerY, h as hueForDraggerY } from "../../../../../polaris/polaris-react/src/components/ColorPicker/components/HuePicker/utilities.js";
import { s as styles } from "../../ColorPicker.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../Slidable/Slidable.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "HuePicker",
  props: {
    hue: {}
  },
  emits: ["change"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const sliderHeight = ref(0);
    const draggerHeight = ref(0);
    const huePickerRef = ref(null);
    const observer = ref(null);
    const draggerY = computed(() => {
      return calculateDraggerY(props.hue, sliderHeight.value, draggerHeight.value);
    });
    onMounted(() => {
      if (!huePickerRef.value) {
        return;
      }
      observer.value = new ResizeObserver(() => {
        setSliderHeight();
      });
      observer.value.observe(huePickerRef.value);
      setSliderHeight();
    });
    onBeforeUnmount(() => {
      var _a;
      (_a = observer.value) == null ? void 0 : _a.disconnect();
    });
    const setSliderHeight = () => {
      if (!huePickerRef.value) {
        return;
      }
      sliderHeight.value = huePickerRef.value.clientHeight;
    };
    const setDraggerHeight = (height) => {
      draggerHeight.value = height;
    };
    const handleChange = ({ y }) => {
      const hue = hueForDraggerY(y, sliderHeight.value);
      emits("change", hue);
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "huePickerRef",
        ref: huePickerRef,
        class: normalizeClass(unref(styles).HuePicker)
      }, [
        createVNode(unref(_sfc_main$1), {
          "dragger-y": draggerY.value,
          "dragger-x": 0,
          onChange: handleChange,
          onDraggerHeight: setDraggerHeight
        }, null, 8, ["dragger-y"])
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=HuePicker.vue_vue_type_script_setup_true_lang.js.map
