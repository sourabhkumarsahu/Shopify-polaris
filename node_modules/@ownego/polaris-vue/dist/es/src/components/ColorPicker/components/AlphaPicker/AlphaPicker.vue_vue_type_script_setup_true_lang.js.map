{"version":3,"file":"AlphaPicker.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../../../src/components/ColorPicker/components/AlphaPicker/AlphaPicker.vue"],"sourcesContent":["<template lang=\"pug\">\ndiv(\n  :class=\"styles.AlphaPicker\",\n  ref=\"alphaPickerRef\",\n)\n  div(\n    :class=\"styles.ColorLayer\",\n    :style=\"{ background }\",\n  )\n  Slidable(\n    :draggerY=\"draggerY\",\n    :draggerX=\"0\",\n    @change=\"handleChange\",\n    @dragger-height=\"setDraggerHeight\",\n  )\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, onMounted, ref, onBeforeUnmount } from 'vue';\nimport type { HSBColor } from '@polaris/utilities/color-types';\nimport { hsbToRgb } from '@/utilities/color-transformers';\nimport { Slidable } from '../Slidable';\n\nimport { calculateDraggerY, alphaForDraggerY } from '@polaris/components/ColorPicker/components/AlphaPicker/utilities';\nimport styles from '@polaris/components/ColorPicker/ColorPicker.module.css';\n\nexport type AlphaPickerProps = {\n  color: HSBColor\n  alpha: number;\n}\n\ntype AlphaPickerEvents = {\n  'change': [hue: number];\n}\n\nconst props = defineProps<AlphaPickerProps>();\nconst emits = defineEmits<AlphaPickerEvents>();\n\nconst sliderHeight = ref(0);\nconst draggerHeight = ref(0);\nconst alphaPickerRef = ref<HTMLElement | null>(null);\nconst observer = ref<ResizeObserver | null>(null);\n\nconst draggerY = computed(() => {\n  return calculateDraggerY(props.alpha, sliderHeight.value, draggerHeight.value);\n});\n\nconst background = computed(() => {\n  return alphaGradientForColor(props.color);\n});\n\nonMounted(() => {\n  if (!alphaPickerRef.value) { return; }\n\n  observer.value = new ResizeObserver(() => { setSliderHeight(); });\n\n  observer.value.observe(alphaPickerRef.value);\n\n  setSliderHeight();\n});\n\nonBeforeUnmount(() => {\n  observer.value?.disconnect();\n});\n\nconst setSliderHeight = () => {\n  if (alphaPickerRef.value) {\n    sliderHeight.value = alphaPickerRef.value.clientHeight;\n  }\n};\n\nconst setDraggerHeight = (height: number) => {\n  draggerHeight.value = height;\n};\n\nconst handleChange = ({ y }: { x: number; y: number }) => {\n  const alpha = alphaForDraggerY(y, sliderHeight.value);\n  emits('change', alpha);\n};\n\nfunction alphaGradientForColor(color: HSBColor) {\n  const {red, green, blue} = hsbToRgb(color);\n  const rgb = `${red}, ${green}, ${blue}`;\n  return `linear-gradient(to top, rgba(${rgb}, 0) 18px, rgba(${rgb}, 1) calc(100% - 18px))`;\n}\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;AAmCA,UAAM,QAAQ;AACd,UAAM,QAAQ;AAER,UAAA,eAAe,IAAI,CAAC;AACpB,UAAA,gBAAgB,IAAI,CAAC;AACrB,UAAA,iBAAiB,IAAwB,IAAI;AAC7C,UAAA,WAAW,IAA2B,IAAI;AAE1C,UAAA,WAAW,SAAS,MAAM;AAC9B,aAAO,kBAAkB,MAAM,OAAO,aAAa,OAAO,cAAc,KAAK;AAAA,IAAA,CAC9E;AAEK,UAAA,aAAa,SAAS,MAAM;AACzB,aAAA,sBAAsB,MAAM,KAAK;AAAA,IAAA,CACzC;AAED,cAAU,MAAM;AACV,UAAA,CAAC,eAAe,OAAO;AAAE;AAAA,MAAQ;AAE5B,eAAA,QAAQ,IAAI,eAAe,MAAM;AAAkB;MAAA,CAAI;AAEvD,eAAA,MAAM,QAAQ,eAAe,KAAK;AAE3B;IAAA,CACjB;AAED,oBAAgB,MAAM;;AACpB,qBAAS,UAAT,mBAAgB;AAAA,IAAW,CAC5B;AAED,UAAM,kBAAkB,MAAM;AAC5B,UAAI,eAAe,OAAO;AACX,qBAAA,QAAQ,eAAe,MAAM;AAAA,MAC5C;AAAA,IAAA;AAGI,UAAA,mBAAmB,CAAC,WAAmB;AAC3C,oBAAc,QAAQ;AAAA,IAAA;AAGxB,UAAM,eAAe,CAAC,EAAE,QAAkC;AACxD,YAAM,QAAQ,iBAAiB,GAAG,aAAa,KAAK;AACpD,YAAM,UAAU,KAAK;AAAA,IAAA;AAGvB,aAAS,sBAAsB,OAAiB;AAC9C,YAAM,EAAC,KAAK,OAAO,KAAI,IAAI,SAAS,KAAK;AACzC,YAAM,MAAM,GAAG,GAAG,KAAK,KAAK,KAAK,IAAI;AAC9B,aAAA,gCAAgC,GAAG,mBAAmB,GAAG;AAAA,IAClE;;;;;;;;;;;;;;;;;;;;;"}