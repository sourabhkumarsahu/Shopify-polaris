{"version":3,"file":"AccountConnection.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/AccountConnection/AccountConnection.vue"],"sourcesContent":["<template lang=\"pug\">\nCard\n  SettingAction\n    template(#action)\n      ButtonFrom(\n        v-if=\"action\",\n        :action=\"action\",\n        :overrides=\"{ variant: connected ? undefined : 'primary' }\",\n      )\n\n    InlineStack(gap=\"400\")\n      span(v-if=\"connected\")\n        Avatar(\n          accessibility-label=\"\",\n          :name=\"accountName\",\n          :initials=\"initials\",\n          :source=\"avatarUrl\",\n        )\n\n      BlockStack(gap=\"100\")\n        Text(\n          as=\"h2\",\n          variant=\"headingSm\",\n        )\n          slot(\n            v-if=\"hasSlot(slots.title)\",\n            name=\"title\",\n          )\n          span(v-else) {{ accountName }}\n\n        Text(\n          v-if=\"hasSlot(slots.details)\",\n          as=\"span\",\n          variant=\"bodyMd\",\n          tone=\"subdued\",\n        )\n          slot(name=\"details\")\n\n  Box(\n    v-if=\"hasSlot(slots['term-of-service'])\"\n    :padding-block-start=\"breakpoints.mdUp ? '400' : '500'\",\n  )\n    Text(\n      as=\"span\",\n      variant=\"bodyMd\",\n    )\n      slot(name=\"term-of-service\")\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, useSlots } from 'vue';\nimport { useBreakpoints } from '@/use/useBreakpoints';\nimport { useHasSlot } from '@/use/useHasSlot';\nimport {\n  Avatar,\n  ButtonFrom,\n  SettingAction,\n  Card,\n  Box,\n  InlineStack,\n  Text,\n  BlockStack,\n} from '@/components';\nimport type { Action, VueNode } from '@/utilities/types';\n\nexport interface AccountConnectionProps {\n  /** The name of the service */\n  accountName?: string;\n  /** URL for the userâ€™s avatar image */\n  avatarUrl?: string;\n  /** Set if the account is connected */\n  connected?: boolean;\n  /** Action for account connection */\n  action?: Action;\n}\n\nexport type AccountConnectionSlots = {\n  /** Content to display as title */\n  title: (_: VueNode) => any;\n  /** Content to display as additional details */\n  details: (_: VueNode) => any;\n  /** Content to display as terms of service */\n  'term-of-service': (_: VueNode) => any;\n};\n\nconst breakpoints = useBreakpoints();\nconst { hasSlot } = useHasSlot();\n\nconst props = withDefaults(defineProps<AccountConnectionProps>(), {\n  connected: false,\n  accountName: '',\n});\n\ndefineSlots<AccountConnectionSlots>();\n\nconst slots = useSlots();\n\nconst initials = computed(() => {\n  return props.accountName\n    ? props.accountName\n      .split(/\\s+/)\n      .map((name) => name[0])\n      .join('')\n  : undefined;\n});\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAqFA,UAAM,cAAc;AACd,UAAA,EAAE,YAAY;AAEpB,UAAM,QAAQ;AAOd,UAAM,QAAQ;AAER,UAAA,WAAW,SAAS,MAAM;AAC9B,aAAO,MAAM,cACT,MAAM,YACL,MAAM,KAAK,EACX,IAAI,CAAC,SAAS,KAAK,CAAC,CAAC,EACrB,KAAK,EAAE,IACV;AAAA,IAAA,CACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}