import { defineComponent, ref, computed, watch, openBlock, createElementBlock, normalizeClass, createElementVNode, createVNode, unref, withCtx, createTextVNode, toDisplayString } from "vue";
import { c as classNames } from "../../../../utilities/css.js";
import { u as useI18n } from "../../../../use/useI18n.js";
import { f as isSameDay } from "../../../../../polaris/polaris-react/src/utilities/dates.js";
import { m as monthName } from "../../../../../polaris/polaris-react/src/components/DatePicker/utilities.js";
import { s as styles } from "../../DatePicker.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../../Text/Text.vue_vue_type_script_setup_true_lang.js";
const _hoisted_1 = ["tabindex", "aria-label", "aria-disabled", "aria-pressed"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Day",
  props: {
    focused: { type: Boolean },
    day: {},
    selected: { type: Boolean },
    inRange: { type: Boolean },
    inHoveringRange: { type: Boolean },
    disabled: { type: Boolean },
    lastDayOfMonth: {},
    isLastSelectedDay: { type: Boolean },
    isFirstSelectedDay: { type: Boolean },
    isHoveringRight: { type: Boolean },
    rangeIsDifferent: { type: Boolean },
    weekday: {},
    selectedAccessibilityLabelPrefix: {}
  },
  emits: ["click", "hover", "focus"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const dayNode = ref(null);
    const hoverValue = computed(() => props.lastDayOfMonth || props.day);
    const today = computed(() => props.day ? isSameDay(/* @__PURE__ */ new Date(), props.day) : null);
    const date = computed(() => {
      var _a;
      return (_a = props.day) == null ? void 0 : _a.getDate();
    });
    const tabIndex = computed(() => (props.focused || props.selected || today.value || date.value === 1) && !props.disabled ? 0 : -1);
    const ariaLabel = computed(() => {
      var _a;
      return [
        props.selected && props.selectedAccessibilityLabelPrefix ? `${props.selectedAccessibilityLabelPrefix} ` : "",
        `${today.value ? i18n.translate("Polaris.DatePicker.today") : ""}`,
        `${props.weekday ? props.weekday : ""} `,
        `${props.day ? i18n.translate(
          `Polaris.DatePicker.months.${monthName(props.day.getMonth())}`
        ) : null} `,
        `${date.value} `,
        `${(_a = props.day) == null ? void 0 : _a.getFullYear()}`
      ].join("");
    });
    const dayCellClassName = computed(() => classNames(
      styles.DayCell,
      props.selected && styles["DayCell-selected"],
      (props.inRange || props.inHoveringRange) && !props.disabled && styles["DayCell-inRange"],
      props.isLastSelectedDay && styles["DayCell-lastInRange"],
      props.isFirstSelectedDay && styles["DayCell-firstInRange"],
      props.isHoveringRight && styles["DayCell-hoverRight"],
      props.rangeIsDifferent && styles["DayCell-hasRange"]
    ));
    const dayClassName = computed(() => classNames(
      styles.Day,
      props.selected && styles["Day-selected"],
      props.disabled && styles["Day-disabled"],
      today.value && styles["Day-today"],
      (props.inRange || props.inHoveringRange) && !props.disabled && styles["Day-inRange"],
      props.isLastSelectedDay && styles["Day-lastInRange"],
      props.isFirstSelectedDay && styles["Day-firstInRange"],
      props.isHoveringRight && styles["Day-hoverRight"],
      props.rangeIsDifferent && styles["Day-hasRange"]
    ));
    watch(
      () => props.focused,
      () => {
        if (props.focused && dayNode.value) {
          dayNode.value.focus();
        }
      }
    );
    const handleClick = () => {
      if (props.disabled || !props.day) {
        return;
      }
      emits("click", props.day);
    };
    const handleHover = () => {
      emits("hover", hoverValue.value);
    };
    return (_ctx, _cache) => {
      return _ctx.day ? (openBlock(), createElementBlock("td", {
        key: 0,
        class: normalizeClass(dayCellClassName.value)
      }, [
        createElementVNode("button", {
          ref_key: "dayNode",
          ref: dayNode,
          tabindex: tabIndex.value,
          class: normalizeClass(dayClassName.value),
          "aria-label": ariaLabel.value,
          "aria-disabled": _ctx.disabled,
          "aria-pressed": _ctx.selected,
          onMouseover: handleHover,
          onClick: handleClick
        }, [
          createVNode(unref(_sfc_main$1), {
            as: "span",
            variant: "bodySm",
            alignment: "center",
            "font-weight": today.value ? "bold" : "regular"
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(date.value), 1)
            ]),
            _: 1
          }, 8, ["font-weight"])
        ], 42, _hoisted_1)
      ], 2)) : (openBlock(), createElementBlock("td", {
        key: 1,
        class: normalizeClass(unref(styles).EmptyDayCell),
        onMouseover: handleHover
      }, null, 34));
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Day.vue_vue_type_script_setup_true_lang.js.map
