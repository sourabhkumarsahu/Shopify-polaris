import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, createVNode, withCtx, createTextVNode, toDisplayString, Fragment, renderList, createBlock } from "vue";
import { h as getWeeksForMonth, f as isSameDay, j as getOrderedWeekdays, k as dateIsSelected, l as dateIsInRange, i as isDateBefore, e as isDateAfter, d as isDateDisabled, m as getNewRange } from "../../../../../polaris/polaris-react/src/utilities/dates.js";
import { u as useI18n } from "../../../../use/useI18n.js";
import { m as monthName, w as weekdayName } from "../../../../../polaris/polaris-react/src/components/DatePicker/utilities.js";
import { _ as _sfc_main$3 } from "../Day/Day.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../Weekday/Weekday.vue_vue_type_script_setup_true_lang.js";
import { s as styles } from "../../DatePicker.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../../Text/Text.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Month",
  props: {
    focusedDate: {},
    selected: {},
    hoverDate: {},
    month: {},
    year: {},
    disableDatesBefore: {},
    disableDatesAfter: {},
    disableSpecificDates: {},
    allowRange: { type: Boolean },
    weekStartsOn: {},
    accessibilityLabelPrefixes: {}
  },
  emits: ["change", "hover", "focus"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const isInHoveringRange = props.allowRange ? hoveringDateIsInRange : () => false;
    const now = /* @__PURE__ */ new Date();
    const current = computed(() => now.getMonth() === props.month && now.getFullYear() === props.year);
    const weeks = computed(() => getWeeksForMonth(props.month, props.year, props.weekStartsOn));
    const lastDayOfMonth = computed(() => {
      return new Date(props.year, props.month + 1, 0);
    });
    const rangeIsDifferent = computed(() => !(props.selected && isSameDay(props.selected.start, props.selected.end)));
    const weekdaysOrdered = computed(() => {
      return getOrderedWeekdays(props.weekStartsOn);
    });
    const isDayDisabled = (day) => {
      return props.disableDatesBefore && isDateBefore(day, props.disableDatesBefore) || props.disableDatesAfter && isDateAfter(day, props.disableDatesAfter) || props.disableSpecificDates && isDateDisabled(day, props.disableSpecificDates);
    };
    const isFirstSelectedDay = (day) => {
      return props.allowRange && props.selected && isDateStart(day, props.selected);
    };
    const isLastSelectedDay = (day) => {
      return props.allowRange && props.selected && (!isSameDay(props.selected.start, props.selected.end) && isDateEnd(day, props.selected) || props.hoverDate && isSameDay(props.selected.start, props.selected.end) && isDateAfter(props.hoverDate, props.selected.start) && isSameDay(day, props.hoverDate) && !isFirstSelectedDay(day));
    };
    const isHoveringRight = (day) => {
      return props.hoverDate && isDateBefore(day, props.hoverDate);
    };
    const accessibilityLabelPrefix = (day) => {
      const [firstAccessibilityLabelPrefix, lastAccessibilityLabelPrefix] = props.accessibilityLabelPrefixes;
      if (props.allowRange && isFirstSelectedDay(day) || !props.allowRange && firstAccessibilityLabelPrefix) {
        return firstAccessibilityLabelPrefix;
      }
      if (props.allowRange && isLastSelectedDay(day)) {
        return lastAccessibilityLabelPrefix;
      }
    };
    const handleDateClick = (selectedDate) => {
      const selectedValue = getNewRange(props.allowRange ? props.selected : void 0, selectedDate);
      emits("change", selectedValue);
    };
    const weekdayLabel = (weekday) => {
      return i18n.translate(`Polaris.DatePicker.days.${weekdayName(weekday)}`);
    };
    function hoveringDateIsInRange(day, range, hoverEndDate) {
      if (day == null) {
        return false;
      }
      const { start, end } = range;
      return Boolean(isSameDay(start, end) && day > start && day <= hoverEndDate);
    }
    function isDateEnd(day, range) {
      if (day == null) return false;
      const { end } = range;
      return Boolean(end && isSameDay(end, day));
    }
    function isDateStart(day, range) {
      if (day == null) return false;
      const { start } = range;
      return Boolean(start && isSameDay(start, day));
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles).MonthContainer)
      }, [
        createElementVNode("table", {
          role: "grid",
          class: normalizeClass(unref(styles).Month)
        }, [
          createElementVNode("caption", {
            class: normalizeClass(unref(styles).Title)
          }, [
            createVNode(unref(_sfc_main$1), {
              as: "span",
              variant: "bodyMd",
              alignment: "center",
              "font-weight": current.value ? "bold" : "medium"
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(unref(i18n).translate(`Polaris.DatePicker.months.${unref(monthName)(_ctx.month)}`)) + " " + toDisplayString(_ctx.year), 1)
              ]),
              _: 1
            }, 8, ["font-weight"])
          ], 2),
          createElementVNode("thead", null, [
            createElementVNode("tr", {
              class: normalizeClass(unref(styles).WeekHeadings)
            }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(weekdaysOrdered.value, (weekday) => {
                return openBlock(), createBlock(unref(_sfc_main$2), {
                  key: weekday,
                  title: unref(i18n).translate(`Polaris.DatePicker.daysAbbreviated.${unref(weekdayName)(weekday)}`),
                  label: weekdayLabel(weekday),
                  current: current.value && (/* @__PURE__ */ new Date()).getDay() === weekday
                }, null, 8, ["title", "label", "current"]);
              }), 128))
            ], 2)
          ]),
          createElementVNode("tbody", null, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(weeks.value, (week, index) => {
              return openBlock(), createElementBlock("tr", {
                key: index,
                class: normalizeClass(unref(styles).Week)
              }, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(week, (day, dayIndex) => {
                  return openBlock(), createElementBlock(Fragment, { key: dayIndex }, [
                    !day ? (openBlock(), createBlock(unref(_sfc_main$3), {
                      key: 0,
                      "last-day-of-month": lastDayOfMonth.value,
                      onHover: _cache[0] || (_cache[0] = ($event) => emits("hover", null))
                    }, null, 8, ["last-day-of-month"])) : (openBlock(), createBlock(unref(_sfc_main$3), {
                      key: 1,
                      "selected-accessibility-label-prefix": accessibilityLabelPrefix(day),
                      weekday: weekdayLabel(dayIndex),
                      focused: _ctx.focusedDate && unref(isSameDay)(day, _ctx.focusedDate),
                      day,
                      selected: _ctx.selected && unref(dateIsSelected)(day, _ctx.selected),
                      "in-range": _ctx.selected && unref(dateIsInRange)(day, _ctx.selected),
                      disabled: isDayDisabled(day),
                      "in-hovering-range": _ctx.selected && _ctx.hoverDate && unref(isInHoveringRange)(day, _ctx.selected, _ctx.hoverDate),
                      "is-last-selected-day": isLastSelectedDay(day),
                      "is-first-selected-day": isFirstSelectedDay(day),
                      "is-hovering-right": isHoveringRight(day),
                      "range-is-different": rangeIsDifferent.value,
                      onFocus: ($event) => emits("focus", day),
                      onClick: ($event) => handleDateClick(day),
                      onHover: ($event) => emits("hover", day)
                    }, null, 8, ["selected-accessibility-label-prefix", "weekday", "focused", "day", "selected", "in-range", "disabled", "in-hovering-range", "is-last-selected-day", "is-first-selected-day", "is-hovering-right", "range-is-different", "onFocus", "onClick", "onHover"]))
                  ], 64);
                }), 128))
              ], 2);
            }), 128))
          ])
        ], 2)
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Month.vue_vue_type_script_setup_true_lang.js.map
