import { defineComponent, mergeModels, useModel, ref, computed, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, createVNode, createBlock, createCommentVNode } from "vue";
import { c as classNames } from "../../utilities/css.js";
import { g as getNextDisplayYear, a as getNextDisplayMonth, b as getPreviousDisplayYear, c as getPreviousDisplayMonth, i as isDateBefore, d as isDateDisabled, e as isDateAfter } from "../../../polaris/polaris-react/src/utilities/dates.js";
import { u as useI18n } from "../../use/useI18n.js";
import { d as ArrowLeftIcon, o as ArrowRightIcon } from "../../../vendor.js";
import { _ as _sfc_main$1 } from "../Button/Button.vue_vue_type_script_setup_true_lang.js";
import { m as monthName } from "../../../polaris/polaris-react/src/components/DatePicker/utilities.js";
import { _ as _sfc_main$2 } from "./components/Month/Month.vue_vue_type_script_setup_true_lang.js";
const DatePicker = "Polaris-DatePicker";
const MonthLayout = "Polaris-DatePicker__MonthLayout";
const MonthContainer = "Polaris-DatePicker__MonthContainer";
const Month = "Polaris-DatePicker__Month";
const DayCell = "Polaris-DatePicker__DayCell";
const Day = "Polaris-DatePicker__Day";
const EmptyDayCell = "Polaris-DatePicker__EmptyDayCell";
const Weekday = "Polaris-DatePicker__Weekday";
const Header = "Polaris-DatePicker__Header";
const Title = "Polaris-DatePicker__Title";
const Week = "Polaris-DatePicker__Week";
const styles = {
  DatePicker,
  MonthLayout,
  MonthContainer,
  Month,
  DayCell,
  "DayCell-inRange": "Polaris-DatePicker__DayCell--inRange",
  Day,
  "Day-inRange": "Polaris-DatePicker__Day--inRange",
  "Day-selected": "Polaris-DatePicker__Day--selected",
  "Day-disabled": "Polaris-DatePicker__Day--disabled",
  EmptyDayCell,
  Weekday,
  Header,
  Title,
  "Day-firstInRange": "Polaris-DatePicker__Day--firstInRange",
  "Day-hasRange": "Polaris-DatePicker__Day--hasRange",
  "Day-hoverRight": "Polaris-DatePicker__Day--hoverRight",
  "Day-lastInRange": "Polaris-DatePicker__Day--lastInRange",
  Week
};
const _hoisted_1 = ["id"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "DatePicker",
  props: /* @__PURE__ */ mergeModels({
    id: {},
    month: {},
    year: {},
    allowRange: { type: Boolean },
    disableDatesBefore: {},
    disableDatesAfter: {},
    disableSpecificDates: {},
    multiMonth: { type: Boolean },
    weekStartsOn: { default: 0 },
    dayAccessibilityLabelPrefix: {}
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["change", "month-change"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const model = useModel(__props, "modelValue");
    const hoverDate = ref();
    const focusDate = ref();
    const showNextYear = computed(() => getNextDisplayYear(props.month, props.year));
    const showNextMonth = computed(() => getNextDisplayMonth(props.month));
    const showNextToNextYear = computed(() => getNextDisplayYear(showNextMonth.value, showNextYear.value));
    const showNextToNextMonth = computed(() => getNextDisplayMonth(showNextMonth.value));
    const showPreviousYear = computed(() => getPreviousDisplayYear(props.month, props.year));
    const showPreviousMonth = computed(() => getPreviousDisplayMonth(props.month));
    const previousMonthName = computed(() => i18n.translate(
      `Polaris.DatePicker.months.${monthName(showPreviousMonth.value)}`
    ));
    const nextMonth = computed(() => {
      if (props.multiMonth) {
        return i18n.translate(
          `Polaris.DatePicker.months.${monthName(showNextToNextMonth.value)}`
        );
      }
      return i18n.translate(
        `Polaris.DatePicker.months.${monthName(showNextMonth.value)}`
      );
    });
    const nextYear = computed(() => {
      if (props.multiMonth) {
        return showNextToNextYear.value;
      }
      return showNextYear.value;
    });
    const firstDatePickerAccessibilityLabelPrefix = computed(() => {
      if (props.allowRange) {
        return i18n.translate("Polaris.DatePicker.startDate");
      }
      return props.dayAccessibilityLabelPrefix;
    });
    const secondDatePickerAccessibilityLabelPrefix = i18n.translate("Polaris.DatePicker.end");
    const accessibilityLabelPrefixes = computed(() => [
      firstDatePickerAccessibilityLabelPrefix.value,
      secondDatePickerAccessibilityLabelPrefix
    ]);
    const datePickerClassName = classNames(styles.DatePicker);
    const handleFocus = (date) => {
      focusDate.value = date;
    };
    const setFocusDateAndHandleMonthChange = (date) => {
      emits("month-change", date.getMonth(), date.getFullYear());
      hoverDate.value = date;
      focusDate.value = date;
    };
    const handleDateSelection = (range) => {
      hoverDate.value = range.end;
      focusDate.value = new Date(range.end);
      model.value = range;
      emits("change", range);
    };
    const handleMonthChangeClick = (month, year) => {
      focusDate.value = void 0;
      emits("month-change", month, year);
    };
    const handleHover = (date) => {
      hoverDate.value = date || void 0;
    };
    const handleKeyUp = (event) => {
      const { key } = event;
      const range = deriveRange(model.value);
      const focusedDate = focusDate.value || range && range.start;
      if (!focusedDate) {
        return;
      }
      if (key === "ArrowUp") {
        const previousWeek = new Date(focusedDate);
        previousWeek.setDate(focusedDate.getDate() - 7);
        if (!(props.disableDatesBefore && isDateBefore(previousWeek, props.disableDatesBefore) || props.disableSpecificDates && isDateDisabled(previousWeek, props.disableSpecificDates))) {
          setFocusDateAndHandleMonthChange(previousWeek);
        }
      }
      if (key === "ArrowDown") {
        const nextWeek = new Date(focusedDate);
        nextWeek.setDate(focusedDate.getDate() + 7);
        if (!(props.disableDatesAfter && isDateAfter(nextWeek, props.disableDatesAfter) || props.disableSpecificDates && isDateDisabled(nextWeek, props.disableSpecificDates))) {
          setFocusDateAndHandleMonthChange(nextWeek);
        }
      }
      if (key === "ArrowRight") {
        const nextDay = new Date(focusedDate);
        nextDay.setDate(focusedDate.getDate() + 1);
        if (!(props.disableDatesAfter && isDateAfter(nextDay, props.disableDatesAfter) || props.disableSpecificDates && isDateDisabled(nextDay, props.disableSpecificDates))) {
          setFocusDateAndHandleMonthChange(nextDay);
        }
      }
      if (key === "ArrowLeft") {
        const previousDay = new Date(focusedDate);
        previousDay.setDate(focusedDate.getDate() - 1);
        if (!(props.disableDatesBefore && isDateBefore(previousDay, props.disableDatesBefore) || props.disableSpecificDates && isDateDisabled(previousDay, props.disableSpecificDates))) {
          setFocusDateAndHandleMonthChange(previousDay);
        }
      }
    };
    const handleKeyDown = (event) => {
      const { key } = event;
      if (key === "ArrowUp" || key === "ArrowDown" || key === "ArrowRight" || key === "ArrowLeft") {
        event.preventDefault();
        event.stopPropagation();
      }
    };
    function deriveRange(selected) {
      return selected instanceof Date ? { start: selected, end: selected } : selected;
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        id: _ctx.id,
        class: normalizeClass(unref(datePickerClassName)),
        onKeydown: handleKeyDown,
        onKeyup: handleKeyUp
      }, [
        createElementVNode("div", {
          class: normalizeClass(unref(styles).Header)
        }, [
          createVNode(unref(_sfc_main$1), {
            variant: "tertiary",
            icon: unref(ArrowLeftIcon),
            "accessibility-label": unref(i18n).translate("Polaris.DatePicker.previousMonth", { previousMonthName: previousMonthName.value, showPreviousYear: showPreviousYear.value }),
            onClick: _cache[0] || (_cache[0] = () => handleMonthChangeClick(showPreviousMonth.value, showPreviousYear.value))
          }, null, 8, ["icon", "accessibility-label"]),
          createVNode(unref(_sfc_main$1), {
            variant: "tertiary",
            icon: unref(ArrowRightIcon),
            "accessibility-label": unref(i18n).translate("Polaris.DatePicker.nextMonth", { nextMonth: nextMonth.value, nextYear: nextYear.value }),
            onClick: _cache[1] || (_cache[1] = () => handleMonthChangeClick(showNextMonth.value, showNextYear.value))
          }, null, 8, ["icon", "accessibility-label"])
        ], 2),
        createElementVNode("div", {
          class: normalizeClass(unref(styles).MonthLayout)
        }, [
          createVNode(unref(_sfc_main$2), {
            "focused-date": focusDate.value,
            month: _ctx.month,
            year: _ctx.year,
            selected: deriveRange(model.value),
            "hover-date": hoverDate.value,
            "disable-dates-before": _ctx.disableDatesBefore,
            "disable-dates-after": _ctx.disableDatesAfter,
            "disable-specific-dates": _ctx.disableSpecificDates,
            "allow-range": _ctx.allowRange,
            "week-starts-on": _ctx.weekStartsOn,
            "accessibility-label-prefixes": accessibilityLabelPrefixes.value,
            onChange: handleDateSelection,
            onHover: handleHover,
            onFocus: handleFocus
          }, null, 8, ["focused-date", "month", "year", "selected", "hover-date", "disable-dates-before", "disable-dates-after", "disable-specific-dates", "allow-range", "week-starts-on", "accessibility-label-prefixes"]),
          _ctx.multiMonth ? (openBlock(), createBlock(unref(_sfc_main$2), {
            key: 0,
            "focused-date": focusDate.value,
            month: showNextMonth.value,
            year: showNextYear.value,
            selected: deriveRange(model.value),
            "hover-date": hoverDate.value,
            "disable-dates-before": _ctx.disableDatesBefore,
            "disable-dates-after": _ctx.disableDatesAfter,
            "disable-specific-dates": _ctx.disableSpecificDates,
            "allow-range": _ctx.allowRange,
            "week-starts-on": _ctx.weekStartsOn,
            "accessibility-label-prefixes": accessibilityLabelPrefixes.value,
            onChange: handleDateSelection,
            onHover: handleHover,
            onFocus: handleFocus
          }, null, 8, ["focused-date", "month", "year", "selected", "hover-date", "disable-dates-before", "disable-dates-after", "disable-specific-dates", "allow-range", "week-starts-on", "accessibility-label-prefixes"])) : createCommentVNode("", true)
        ], 2)
      ], 42, _hoisted_1);
    };
  }
});
export {
  _sfc_main as _,
  styles as s
};
//# sourceMappingURL=DatePicker.vue_vue_type_script_setup_true_lang.js.map
