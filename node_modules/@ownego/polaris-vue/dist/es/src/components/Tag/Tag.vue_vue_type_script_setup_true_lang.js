import { defineComponent, getCurrentInstance, useSlots, computed, openBlock, createElementBlock, normalizeClass, createVNode, unref, withCtx, createElementVNode, renderSlot, createBlock, createCommentVNode } from "vue";
import { c as classNames, v as variationName } from "../../utilities/css.js";
import { h as handleMouseUpByBlurring } from "../../utilities/focus.js";
import { h as XSmallIcon } from "../../../vendor.js";
import { _ as _sfc_main$2 } from "../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
const Tag = "Polaris-Tag";
const disabled = "Polaris-Tag--disabled";
const clickable = "Polaris-Tag--clickable";
const linkable = "Polaris-Tag--linkable";
const removable = "Polaris-Tag--removable";
const Button = "Polaris-Tag__Button";
const Link = "Polaris-Tag__Link";
const segmented = "Polaris-Tag--segmented";
const Text = "Polaris-Tag__Text";
const sizeLarge = "Polaris-Tag--sizeLarge";
const overlay = "Polaris-Tag--overlay";
const styles = {
  Tag,
  disabled,
  clickable,
  linkable,
  removable,
  Button,
  Link,
  segmented,
  Text,
  sizeLarge,
  overlay
};
const _hoisted_1 = ["disabled"];
const _hoisted_2 = ["title"];
const _hoisted_3 = ["aria-disabled"];
const _hoisted_4 = ["href"];
const _hoisted_5 = ["title"];
const _hoisted_6 = ["title"];
const _hoisted_7 = ["aria-label", "disabled"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Tag",
  props: {
    disabled: { type: Boolean, default: false },
    accessibilityLabel: {},
    url: {},
    size: {}
  },
  emits: ["remove", "click"],
  setup(__props, { emit: __emit }) {
    const currentInstance = getCurrentInstance();
    const slots = useSlots();
    const props = __props;
    const emits = __emit;
    const hasEventClick = computed(() => {
      var _a;
      return Boolean((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onClick);
    });
    const hasEventRemove = computed(() => {
      var _a;
      return Boolean((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onRemove);
    });
    const segmented2 = computed(() => hasEventClick.value && props.url);
    const className = computed(() => {
      return classNames(
        styles.Tag,
        props.disabled && styles.disabled,
        hasEventClick.value && styles.clickable,
        hasEventRemove.value && styles.removable,
        props.url && !props.disabled && styles.linkable,
        segmented2.value && styles.segmented,
        props.size && styles[variationName("size", props.size)]
      );
    });
    const classLink = computed(() => classNames(styles.Link, segmented2.value && styles.segmented));
    const classRemove = computed(() => classNames(styles.Button, segmented2.value && styles.segmented));
    const tagTitle = computed(() => {
      if (props.accessibilityLabel) {
        return props.accessibilityLabel;
      }
      if (slots.default && slots.default()[0].children) {
        return slots.default()[0].children;
      }
      return "";
    });
    const ariaLabel = computed(() => {
      return `Remove ${tagTitle.value || ""}`;
    });
    const onMouseUp = handleMouseUpByBlurring;
    return (_ctx, _cache) => {
      return hasEventClick.value ? (openBlock(), createElementBlock("button", {
        key: 0,
        type: "button",
        disabled: _ctx.disabled,
        class: normalizeClass(className.value),
        onClick: _cache[0] || (_cache[0] = ($event) => emits("click"))
      }, [
        createVNode(unref(_sfc_main$1), {
          as: "span",
          variant: "bodySm",
          truncate: ""
        }, {
          default: withCtx(() => [
            createElementVNode("span", {
              title: tagTitle.value,
              class: normalizeClass(unref(styles).Text)
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 10, _hoisted_2)
          ]),
          _: 3
        })
      ], 10, _hoisted_1)) : (openBlock(), createElementBlock("span", {
        key: 1,
        class: normalizeClass(className.value),
        "aria-disabled": _ctx.disabled
      }, [
        _ctx.url && !_ctx.disabled ? (openBlock(), createElementBlock("a", {
          key: 0,
          class: normalizeClass(classLink.value),
          href: _ctx.url
        }, [
          createVNode(unref(_sfc_main$1), {
            as: "span",
            variant: "bodySm",
            truncate: ""
          }, {
            default: withCtx(() => [
              createElementVNode("span", {
                title: tagTitle.value,
                class: normalizeClass(unref(styles).Text)
              }, [
                renderSlot(_ctx.$slots, "default")
              ], 10, _hoisted_5)
            ]),
            _: 3
          })
        ], 10, _hoisted_4)) : (openBlock(), createBlock(unref(_sfc_main$1), {
          key: 1,
          as: "span",
          variant: "bodySm",
          truncate: ""
        }, {
          default: withCtx(() => [
            createElementVNode("span", {
              title: tagTitle.value,
              class: normalizeClass(unref(styles).Text)
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 10, _hoisted_6)
          ]),
          _: 3
        })),
        _ctx.size === "large" ? (openBlock(), createElementBlock("span", {
          key: 2,
          class: normalizeClass(unref(styles).overlay)
        }, null, 2)) : createCommentVNode("", true),
        hasEventRemove.value ? (openBlock(), createElementBlock("button", {
          key: 3,
          type: "button",
          "aria-label": ariaLabel.value,
          class: normalizeClass(classRemove.value),
          disabled: _ctx.disabled,
          onClick: _cache[1] || (_cache[1] = ($event) => emits("remove")),
          onMouseup: _cache[2] || (_cache[2] = //@ts-ignore
          (...args) => unref(onMouseUp) && unref(onMouseUp)(...args))
        }, [
          createVNode(unref(_sfc_main$2), { source: unref(XSmallIcon) }, null, 8, ["source"])
        ], 42, _hoisted_7)) : createCommentVNode("", true)
      ], 10, _hoisted_3));
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Tag.vue_vue_type_script_setup_true_lang.js.map
