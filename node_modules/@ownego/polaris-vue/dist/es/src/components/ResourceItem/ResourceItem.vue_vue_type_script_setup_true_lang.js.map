{"version":3,"file":"ResourceItem.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/ResourceItem/ResourceItem.vue"],"sourcesContent":["<template lang=\"pug\">\nli(:class=\"listItemClassName\", :dataHref=\"dataHref\")\n  div(:class=\"styles.ItemWrapper\")\n    div(\n      ref=\"node\",\n      :class=\"className\",\n      @click=\"disabled ? () => {} : handleClick\",\n      @focus=\"handleFocus\",\n      @blur=\"handleBlur\",\n      @keyup=\"handleKeyUp\",\n      @mouseout=\"handleMouseOut\",\n      :data-href=\"url\",\n    )\n      template(v-if=\"!disabled\")\n        UnstyledLink(\n          v-if=\"url\",\n          :aria-describedby=\"id\",\n          :aria-label=\"ariaLabel\",\n          :class=\"styles.Link\",\n          :url=\"url\",\n          :external=\"external\",\n          :tabIndex=\"tabIndex\",\n          :id=\"overlayId\",\n        )\n        button(\n          v-else,\n          :class=\"styles.Button\",\n          :aria-label=\"ariaLabel\",\n          :aria-controls=\"ariaControls\",\n          :aria-expanded=\"ariaExpanded\",\n          @click=\"handleClick\",\n          :tabIndex=\"tabIndex\",\n          ref=\"buttonOverlay\",\n        )\n      Box(\n        :id=\"id\",\n        position=\"relative\",\n        padding-inline-start=\"300\",\n        padding-inline-end=\"300\",\n        padding-block-start=\"300\",\n        padding-block-end=\"300\",\n        :zIndex=\"'var(--pc-resource-item-content-stacking-order)'\",\n      )\n        InlineGrid(:columns=\"{ xs: '1fr auto' }\")\n          InlineGrid(\n            :columns=\"{ xs: hasSlot(slots.media) || isSelectable ? 'auto 1fr' : '1fr' }\",\n            gap=\"300\",\n          )\n            InlineStack(\n              v-if=\"hasSlot(slots.media) || isSelectable\",\n              gap=\"300\",\n              :block-align=\"hasSlot(slots.media) || isSelectable ? 'center' : getAlignment(verticalAlignment)\",\n            )\n              div(\n                v-if=\"selectable\",\n                :class=\"styles.CheckboxWrapper\"\n                @click=\"stopPropagation\",\n                @change=\"handleLargerSelectionArea\",\n              )\n                Checkbox(\n                  v-model=\"selected\",\n                  labelHidden,\n                  fill,\n                  :label=\"checkboxAccessibilityLabel\",\n                  :disabled=\"loading || disabled\",\n                  :label-class-name=\"styles.CheckboxLabel\",\n                  bleed-inline-start=\"300\",\n                  bleed-inline-end=\"300\",\n                  bleed-block-start=\"300\",\n                  bleed-block-end=\"300\",\n                )\n              div(v-if=\"hasSlot(slots.media)\")\n                slot(name=\"media\")\n            InlineStack(:block-align=\"getAlignment(verticalAlignment)\")\n              Box(width=\"100%\", padding=\"0\")\n                slot\n          //-ActionsMarkup\n          template(v-if=\"shortcutActions && !loading\")\n            template(\n              v-if=\"persistActions\",\n            )\n              div(\n                v-if=\"breakpoints?.lgUp\",\n                :Class=\"styles.Actions\",\n                @click=\"stopPropagation\",\n              )\n                ButtonGroup\n                  ButtonFrom(\n                    v-for=\"action, index in shortcutActions\",\n                    :key=\"String(index)\",\n                    :action=\"action\",\n                    :overrides=\"{ variant: 'tertiary' }\",\n                  )\n            template(v-else)\n              div(\n                v-if=\"breakpoints?.lgUp\",\n                :Class=\"styles.Actions\",\n                @click=\"stopPropagation\",\n              )\n                Box(position=\"absolute\", inset-block-start=\"400\", insert-inline-end=\"500\")\n                  ButtonGroup(variant=\"segmented\")\n                    ButtonFrom(\n                      v-for=\"action, index in shortcutActions\",\n                      :key=\"String(index)\",\n                      :action=\"action\",\n                      :overrides=\"{ size: 'slim' }\",\n                    )\n          //-DisclosureMarkup\n          template(v-if=\"shortcutActions && !loading\")\n            template(\n              v-if=\"persistActions\",\n            )\n              div(\n                v-if=\"!selectMode && breakpoints?.lgDown\",\n                @click=\"stopPropagation\",\n              )\n                Popover(\n                  :active=\"actionsMenuVisible\",\n                  @close=\"handleCloseRequest\",\n                )\n                  template(#activator)\n                    Button(\n                      variant=\"tertiary\",\n                      :accessibilityLabel=\"disclosureAccessibilityLabel\",\n                      :icon=\"MenuHorizontalIcon\",\n                      @click=\"handleActionsClick\",\n                    )\n                  ActionList(:items=\"shortcutActions\")\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, inject, ref, useSlots, watch } from 'vue';\nimport { classNames } from '@/utilities/css';\nimport useI18n from '@/use/useI18n';\nimport { useHasSlot } from '@/use/useHasSlot';\nimport useId from '@/use/useId';\nimport {\n  Box,\n  ActionList,\n  Popover,\n  UnstyledLink,\n  ButtonGroup,\n  Checkbox,\n  Button,\n  ButtonFrom,\n  InlineGrid,\n  InlineStack,\n} from '@/components';\nimport { useBreakpoints } from '@/use/useBreakpoints';\nimport type { DisableableAction } from '@/utilities/types';\nimport { SELECT_ALL_ITEMS } from '@/components/IndexProvider/types';\nimport type { ResourceListSelectedItems, ResourceListContextType } from '@/utilities/types';\nimport type { InlineStackProps } from '../InlineStack/types';\nimport styles from '@polaris/components/ResourceItem/ResourceItem.module.css';\nimport MenuHorizontalIcon from '@icons/MenuHorizontalIcon.svg';\n\ntype Alignment = 'leading' | 'trailing' | 'center' | 'fill' | 'baseline';\n\ninterface ResourceItemProps {\n  /** Whether or not interaction is disabled */\n  disabled?: boolean;\n  /** Visually hidden text for screen readers used for item link*/\n  accessibilityLabel?: string;\n  /** Individual item name used by various text labels */\n  name?: string;\n  /** Id of the element the item onClick controls */\n  ariaControls?: string;\n  /** Tells screen reader the controlled element is expanded */\n  ariaExpanded?: boolean;\n  /** Unique identifier for the item */\n  id: string;\n  /** Makes the shortcut actions always visible */\n  persistActions?: boolean;\n  /** 1 or 2 shortcut actions; must be available on the page linked to by url */\n  shortcutActions?: DisableableAction[];\n  /** The order the item is rendered */\n  sortOrder?: number;\n  /** URL for the resourceâ€™s details page (required unless onClick is provided) */\n  url?: string;\n  /** Allows url to open in a new tab */\n  external?: boolean;\n  /** Adjust vertical alignment of elements */\n  verticalAlignment?: Alignment;\n  /** Prefetched url attribute to bind to the main element being returned */\n  dataHref?: string;\n}\n\nconst props = withDefaults(defineProps<ResourceItemProps>(), {\n  persistActions: false,\n});\n\nconst emits = defineEmits<{\n  (e: 'click', id: string): void;\n}>();\n\nconst slots = useSlots();\nconst i18n = useI18n();\nconst { hasSlot } = useHasSlot();\nconst breakpoints = useBreakpoints();\n\nconst {\n  selectedItems,\n  selectable,\n  selectMode,\n  loading,\n  resourceName,\n  onSelectionChange,\n} = inject('resource-list-context', {}) as ResourceListContextType;\n\nconst actionsMenuVisible = ref(false);\nconst focused = ref(false);\nconst focusedInner = ref(false);\nconst selected = ref(isSelected(props.id, selectedItems?.value));\n\nconst overlayId = useId();\nconst node = ref<HTMLDivElement | null>(null);\nconst buttonOverlay = ref<HTMLButtonElement | null>(null);\n\nconst isSelectable = computed(() => selectable);\n\nconst className = computed(() => classNames(\n  styles.ResourceItem,\n  focused.value && styles.focused,\n  isSelectable.value && styles.selectable,\n  selected.value && styles.selected,\n  selectMode && styles.selectMode,\n  props.persistActions && styles.persistActions,\n  focusedInner.value && styles.focusedInner,\n));\n\nconst listItemClassName = computed(() => classNames(\n  styles.ListItem,\n  focused.value && !focusedInner.value && styles.focused,\n));\n\nconst disclosureAccessibilityLabel = computed(() => props.name\n  ? i18n.translate('Polaris.ResourceList.Item.actionsDropdownLabel', {\n    accessibilityLabel: props.name,\n  })\n  : i18n.translate('Polaris.ResourceList.Item.actionsDropdown'),\n);\n\nconst checkboxAccessibilityLabel = computed(() => {\n  return props.name || props.accessibilityLabel || i18n.translate('Polaris.Common.checkbox');\n});\n\nconst tabIndex = computed(() => loading ? -1 : 0);\n\nconst ariaLabel = computed(() => {\n  return props.accessibilityLabel ||\n  i18n.translate('Polaris.ResourceList.Item.viewItem', {\n    itemName: props.name || (resourceName && resourceName.singular) || '',\n  });\n});\n\nwatch(\n  () => selectedItems?.value,\n  (newVal, oldVal) => {\n    if (newVal !== oldVal) {\n      selected.value = isSelected(props.id, newVal);\n    }\n  },\n);\n\nconst handleFocus = (event: Event) => {\n  if (\n    event.target === buttonOverlay.value ||\n    (node.value && event.target === node.value.querySelector(`#${overlayId}`))\n  ) {\n    focused.value = true;\n    focusedInner.value = false;\n  } else if (node.value && node.value.contains(event.target as HTMLElement)) {\n    focused.value = true;\n    focusedInner.value = true;\n  }\n};\n\nconst handleBlur = (event: Event) => {\n  const { relatedTarget } = event as FocusEvent;\n  if (\n    node.value &&\n    relatedTarget instanceof Element &&\n    node.value.contains(relatedTarget)\n  ) {\n    return;\n  }\n\n  focused.value = false;\n  focusedInner.value = false;\n};\n\nconst handleMouseOut = () => {\n  if (focused.value) {\n    focused.value = false;\n    focusedInner.value = false;\n  }\n};\n\nconst handleLargerSelectionArea = (event: Event) => {\n  event.stopPropagation();\n  const e = event as MouseEvent;\n  handleSelection(!selected.value, e.shiftKey);\n};\n\nconst handleSelection = (value: boolean, shiftKey: boolean) => {\n  const {\n    id,\n    sortOrder,\n  } = props;\n\n  if (!id || !onSelectionChange) {\n    return;\n  }\n\n  focused.value = value;\n  focusedInner.value = value;\n\n  onSelectionChange(!value, id, sortOrder, shiftKey);\n};\n\nconst handleClick = (event: MouseEvent) => {\n  event.stopPropagation();\n  const { id, url } = props;\n\n  const { ctrlKey, metaKey } = event;\n  const anchor = node.value && node.value.querySelector('a');\n\n  if (selectMode) {\n    handleLargerSelectionArea(event);\n    return;\n  }\n\n  if (anchor === event.target) {\n    return;\n  }\n\n  emits('click', id);\n\n  if (url && (ctrlKey || metaKey)) {\n    window.open(url, '_blank');\n    return;\n  }\n\n  if (url && anchor) {\n    anchor.click();\n  }\n};\n\nconst handleKeyUp = (event: KeyboardEvent) => {\n  const { key } = event;\n\n  if (key === 'Enter' && props.url && !selectMode && !props.disabled) {\n    emits('click', props.id);\n  }\n};\n\nconst handleActionsClick = () => {\n  actionsMenuVisible.value = !actionsMenuVisible.value;\n};\n\nconst handleCloseRequest = () => {\n  actionsMenuVisible.value = false;\n};\n\nconst stopPropagation = (e: Event) => {\n  e.stopPropagation();\n};\n\nfunction isSelected(id: string, tmpSelectedItems?: ResourceListSelectedItems) {\n  return Boolean(\n    tmpSelectedItems &&\n      ((Array.isArray(tmpSelectedItems) && tmpSelectedItems.includes(id)) ||\n        tmpSelectedItems === SELECT_ALL_ITEMS),\n  );\n}\n\nfunction getAlignment(alignment?: Alignment): InlineStackProps['blockAlign'] {\n  switch (alignment) {\n    case 'leading':\n      return 'start';\n    case 'trailing':\n      return 'end';\n    case 'center':\n      return 'center';\n    case 'fill':\n      return 'stretch';\n    case 'baseline':\n      return 'baseline';\n    default:\n      return 'start';\n  }\n}\n</script>\n"],"names":["selectable","focused","focusedInner","selected"],"mappings":"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"}