import { defineComponent, useSlots, inject, ref, computed, watch, openBlock, createElementBlock, normalizeClass, createElementVNode, unref, Fragment, createBlock, createCommentVNode, createVNode, withCtx, renderSlot, renderList } from "vue";
import { c as classNames } from "../../utilities/css.js";
import { u as useI18n } from "../../use/useI18n.js";
import { u as useHasSlot } from "../../use/useHasSlot.js";
import { u as useId } from "../../use/useId.js";
import { u as useBreakpoints } from "../../use/useBreakpoints.js";
import { _ as _sfc_main$a } from "../ActionList/ActionList.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../Box/Box.vue_vue_type_script_setup_true_lang.js";
import { M as MenuHorizontalIcon } from "../../../vendor.js";
import { _ as _sfc_main$9 } from "../Button/Button.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$7 } from "../Button/ButtonFrom.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$6 } from "../ButtonGroup/ButtonGroup.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$5 } from "../Checkbox/Checkbox.vue_vue_type_script_setup_true_lang.js";
import { S as SELECT_ALL_ITEMS } from "../IndexProvider/types.js";
import { _ as _sfc_main$3 } from "../InlineGrid/InlineGrid.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../InlineStack/InlineStack.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$8 } from "../Popover/Popover.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../UnstyledLink/UnstyledLink.vue_vue_type_script_setup_true_lang.js";
const ResourceItem = "Polaris-ResourceItem";
const Actions = "Polaris-ResourceItem__Actions";
const ItemWrapper = "Polaris-ResourceItem__ItemWrapper";
const CheckboxWrapper = "Polaris-ResourceItem__CheckboxWrapper";
const focusedInner = "Polaris-ResourceItem--focusedInner";
const focused = "Polaris-ResourceItem--focused";
const selected = "Polaris-ResourceItem--selected";
const Link = "Polaris-ResourceItem__Link";
const Button = "Polaris-ResourceItem__Button";
const selectable = "Polaris-ResourceItem--selectable";
const disabled = "Polaris-ResourceItem--disabled";
const ListItem = "Polaris-ResourceItem__ListItem";
const hasBulkActions = "Polaris-ResourceItem--hasBulkActions";
const styles = {
  ResourceItem,
  Actions,
  ItemWrapper,
  CheckboxWrapper,
  focusedInner,
  focused,
  selected,
  Link,
  Button,
  selectable,
  disabled,
  ListItem,
  hasBulkActions
};
const _hoisted_1 = ["dataHref"];
const _hoisted_2 = ["data-href"];
const _hoisted_3 = ["aria-label", "aria-controls", "aria-expanded", "tabIndex"];
const _hoisted_4 = { key: 1 };
const _hoisted_5 = ["Class"];
const _hoisted_6 = ["Class"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "ResourceItem",
  props: {
    disabled: { type: Boolean },
    accessibilityLabel: {},
    name: {},
    ariaControls: {},
    ariaExpanded: { type: Boolean },
    id: {},
    persistActions: { type: Boolean, default: false },
    shortcutActions: {},
    sortOrder: {},
    url: {},
    external: { type: Boolean },
    verticalAlignment: {},
    dataHref: {}
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const slots = useSlots();
    const i18n = useI18n();
    const { hasSlot } = useHasSlot();
    const breakpoints = useBreakpoints();
    const {
      selectedItems,
      selectable: selectable2,
      selectMode,
      loading,
      resourceName,
      onSelectionChange
    } = inject("resource-list-context", {});
    const actionsMenuVisible = ref(false);
    const focused2 = ref(false);
    const focusedInner2 = ref(false);
    const selected2 = ref(isSelected(props.id, selectedItems == null ? void 0 : selectedItems.value));
    const overlayId = useId();
    const node = ref(null);
    const buttonOverlay = ref(null);
    const isSelectable = computed(() => selectable2);
    const className = computed(() => classNames(
      styles.ResourceItem,
      focused2.value && styles.focused,
      isSelectable.value && styles.selectable,
      selected2.value && styles.selected,
      selectMode && styles.selectMode,
      props.persistActions && styles.persistActions,
      focusedInner2.value && styles.focusedInner
    ));
    const listItemClassName = computed(() => classNames(
      styles.ListItem,
      focused2.value && !focusedInner2.value && styles.focused
    ));
    const disclosureAccessibilityLabel = computed(
      () => props.name ? i18n.translate("Polaris.ResourceList.Item.actionsDropdownLabel", {
        accessibilityLabel: props.name
      }) : i18n.translate("Polaris.ResourceList.Item.actionsDropdown")
    );
    const checkboxAccessibilityLabel = computed(() => {
      return props.name || props.accessibilityLabel || i18n.translate("Polaris.Common.checkbox");
    });
    const tabIndex = computed(() => loading ? -1 : 0);
    const ariaLabel = computed(() => {
      return props.accessibilityLabel || i18n.translate("Polaris.ResourceList.Item.viewItem", {
        itemName: props.name || resourceName && resourceName.singular || ""
      });
    });
    watch(
      () => selectedItems == null ? void 0 : selectedItems.value,
      (newVal, oldVal) => {
        if (newVal !== oldVal) {
          selected2.value = isSelected(props.id, newVal);
        }
      }
    );
    const handleFocus = (event) => {
      if (event.target === buttonOverlay.value || node.value && event.target === node.value.querySelector(`#${overlayId}`)) {
        focused2.value = true;
        focusedInner2.value = false;
      } else if (node.value && node.value.contains(event.target)) {
        focused2.value = true;
        focusedInner2.value = true;
      }
    };
    const handleBlur = (event) => {
      const { relatedTarget } = event;
      if (node.value && relatedTarget instanceof Element && node.value.contains(relatedTarget)) {
        return;
      }
      focused2.value = false;
      focusedInner2.value = false;
    };
    const handleMouseOut = () => {
      if (focused2.value) {
        focused2.value = false;
        focusedInner2.value = false;
      }
    };
    const handleLargerSelectionArea = (event) => {
      event.stopPropagation();
      const e = event;
      handleSelection(!selected2.value, e.shiftKey);
    };
    const handleSelection = (value, shiftKey) => {
      const {
        id,
        sortOrder
      } = props;
      if (!id || !onSelectionChange) {
        return;
      }
      focused2.value = value;
      focusedInner2.value = value;
      onSelectionChange(!value, id, sortOrder, shiftKey);
    };
    const handleClick = (event) => {
      event.stopPropagation();
      const { id, url } = props;
      const { ctrlKey, metaKey } = event;
      const anchor = node.value && node.value.querySelector("a");
      if (selectMode) {
        handleLargerSelectionArea(event);
        return;
      }
      if (anchor === event.target) {
        return;
      }
      emits("click", id);
      if (url && (ctrlKey || metaKey)) {
        window.open(url, "_blank");
        return;
      }
      if (url && anchor) {
        anchor.click();
      }
    };
    const handleKeyUp = (event) => {
      const { key } = event;
      if (key === "Enter" && props.url && !selectMode && !props.disabled) {
        emits("click", props.id);
      }
    };
    const handleActionsClick = () => {
      actionsMenuVisible.value = !actionsMenuVisible.value;
    };
    const handleCloseRequest = () => {
      actionsMenuVisible.value = false;
    };
    const stopPropagation = (e) => {
      e.stopPropagation();
    };
    function isSelected(id, tmpSelectedItems) {
      return Boolean(
        tmpSelectedItems && (Array.isArray(tmpSelectedItems) && tmpSelectedItems.includes(id) || tmpSelectedItems === SELECT_ALL_ITEMS)
      );
    }
    function getAlignment(alignment) {
      switch (alignment) {
        case "leading":
          return "start";
        case "trailing":
          return "end";
        case "center":
          return "center";
        case "fill":
          return "stretch";
        case "baseline":
          return "baseline";
        default:
          return "start";
      }
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("li", {
        class: normalizeClass(listItemClassName.value),
        dataHref: _ctx.dataHref
      }, [
        createElementVNode("div", {
          class: normalizeClass(unref(styles).ItemWrapper)
        }, [
          createElementVNode("div", {
            ref_key: "node",
            ref: node,
            class: normalizeClass(className.value),
            onClick: _cache[1] || (_cache[1] = ($event) => _ctx.disabled ? () => {
            } : handleClick),
            onFocus: handleFocus,
            onBlur: handleBlur,
            onKeyup: handleKeyUp,
            onMouseout: handleMouseOut,
            "data-href": _ctx.url
          }, [
            !_ctx.disabled ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              _ctx.url ? (openBlock(), createBlock(unref(_sfc_main$1), {
                key: 0,
                "aria-describedby": _ctx.id,
                "aria-label": ariaLabel.value,
                class: normalizeClass(unref(styles).Link),
                url: _ctx.url,
                external: _ctx.external,
                tabIndex: tabIndex.value,
                id: unref(overlayId)
              }, null, 8, ["aria-describedby", "aria-label", "class", "url", "external", "tabIndex", "id"])) : (openBlock(), createElementBlock("button", {
                key: 1,
                class: normalizeClass(unref(styles).Button),
                "aria-label": ariaLabel.value,
                "aria-controls": _ctx.ariaControls,
                "aria-expanded": _ctx.ariaExpanded,
                onClick: handleClick,
                tabIndex: tabIndex.value,
                ref_key: "buttonOverlay",
                ref: buttonOverlay
              }, null, 10, _hoisted_3))
            ], 64)) : createCommentVNode("", true),
            createVNode(unref(_sfc_main$2), {
              id: _ctx.id,
              position: "relative",
              "padding-inline-start": "300",
              "padding-inline-end": "300",
              "padding-block-start": "300",
              "padding-block-end": "300",
              zIndex: "var(--pc-resource-item-content-stacking-order)"
            }, {
              default: withCtx(() => [
                createVNode(unref(_sfc_main$3), { columns: { xs: "1fr auto" } }, {
                  default: withCtx(() => {
                    var _a, _b, _c;
                    return [
                      createVNode(unref(_sfc_main$3), {
                        columns: { xs: unref(hasSlot)(unref(slots).media) || isSelectable.value ? "auto 1fr" : "1fr" },
                        gap: "300"
                      }, {
                        default: withCtx(() => [
                          unref(hasSlot)(unref(slots).media) || isSelectable.value ? (openBlock(), createBlock(unref(_sfc_main$4), {
                            key: 0,
                            gap: "300",
                            "block-align": unref(hasSlot)(unref(slots).media) || isSelectable.value ? "center" : getAlignment(_ctx.verticalAlignment)
                          }, {
                            default: withCtx(() => [
                              unref(selectable2) ? (openBlock(), createElementBlock("div", {
                                key: 0,
                                class: normalizeClass(unref(styles).CheckboxWrapper),
                                onClick: stopPropagation,
                                onChange: handleLargerSelectionArea
                              }, [
                                createVNode(unref(_sfc_main$5), {
                                  modelValue: selected2.value,
                                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => selected2.value = $event),
                                  labelHidden: "",
                                  fill: "",
                                  label: checkboxAccessibilityLabel.value,
                                  disabled: unref(loading) || _ctx.disabled,
                                  "label-class-name": unref(styles).CheckboxLabel,
                                  "bleed-inline-start": "300",
                                  "bleed-inline-end": "300",
                                  "bleed-block-start": "300",
                                  "bleed-block-end": "300"
                                }, null, 8, ["modelValue", "label", "disabled", "label-class-name"])
                              ], 34)) : createCommentVNode("", true),
                              unref(hasSlot)(unref(slots).media) ? (openBlock(), createElementBlock("div", _hoisted_4, [
                                renderSlot(_ctx.$slots, "media")
                              ])) : createCommentVNode("", true)
                            ]),
                            _: 3
                          }, 8, ["block-align"])) : createCommentVNode("", true),
                          createVNode(unref(_sfc_main$4), {
                            "block-align": getAlignment(_ctx.verticalAlignment)
                          }, {
                            default: withCtx(() => [
                              createVNode(unref(_sfc_main$2), {
                                width: "100%",
                                padding: "0"
                              }, {
                                default: withCtx(() => [
                                  renderSlot(_ctx.$slots, "default")
                                ]),
                                _: 3
                              })
                            ]),
                            _: 3
                          }, 8, ["block-align"])
                        ]),
                        _: 3
                      }, 8, ["columns"]),
                      _ctx.shortcutActions && !unref(loading) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                        _ctx.persistActions ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                          ((_a = unref(breakpoints)) == null ? void 0 : _a.lgUp) ? (openBlock(), createElementBlock("div", {
                            key: 0,
                            Class: unref(styles).Actions,
                            onClick: stopPropagation
                          }, [
                            createVNode(unref(_sfc_main$6), null, {
                              default: withCtx(() => [
                                (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.shortcutActions, (action, index) => {
                                  return openBlock(), createBlock(unref(_sfc_main$7), {
                                    key: String(index),
                                    action,
                                    overrides: { variant: "tertiary" }
                                  }, null, 8, ["action"]);
                                }), 128))
                              ]),
                              _: 1
                            })
                          ], 8, _hoisted_5)) : createCommentVNode("", true)
                        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                          ((_b = unref(breakpoints)) == null ? void 0 : _b.lgUp) ? (openBlock(), createElementBlock("div", {
                            key: 0,
                            Class: unref(styles).Actions,
                            onClick: stopPropagation
                          }, [
                            createVNode(unref(_sfc_main$2), {
                              position: "absolute",
                              "inset-block-start": "400",
                              "insert-inline-end": "500"
                            }, {
                              default: withCtx(() => [
                                createVNode(unref(_sfc_main$6), { variant: "segmented" }, {
                                  default: withCtx(() => [
                                    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.shortcutActions, (action, index) => {
                                      return openBlock(), createBlock(unref(_sfc_main$7), {
                                        key: String(index),
                                        action,
                                        overrides: { size: "slim" }
                                      }, null, 8, ["action"]);
                                    }), 128))
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            })
                          ], 8, _hoisted_6)) : createCommentVNode("", true)
                        ], 64))
                      ], 64)) : createCommentVNode("", true),
                      _ctx.shortcutActions && !unref(loading) ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                        _ctx.persistActions ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                          !unref(selectMode) && ((_c = unref(breakpoints)) == null ? void 0 : _c.lgDown) ? (openBlock(), createElementBlock("div", {
                            key: 0,
                            onClick: stopPropagation
                          }, [
                            createVNode(unref(_sfc_main$8), {
                              active: actionsMenuVisible.value,
                              onClose: handleCloseRequest
                            }, {
                              activator: withCtx(() => [
                                createVNode(unref(_sfc_main$9), {
                                  variant: "tertiary",
                                  accessibilityLabel: disclosureAccessibilityLabel.value,
                                  icon: unref(MenuHorizontalIcon),
                                  onClick: handleActionsClick
                                }, null, 8, ["accessibilityLabel", "icon"])
                              ]),
                              default: withCtx(() => [
                                createVNode(unref(_sfc_main$a), { items: _ctx.shortcutActions }, null, 8, ["items"])
                              ]),
                              _: 1
                            }, 8, ["active"])
                          ])) : createCommentVNode("", true)
                        ], 64)) : createCommentVNode("", true)
                      ], 64)) : createCommentVNode("", true)
                    ];
                  }),
                  _: 3
                })
              ]),
              _: 3
            }, 8, ["id"])
          ], 42, _hoisted_2)
        ], 2)
      ], 10, _hoisted_1);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=ResourceItem.vue_vue_type_script_setup_true_lang.js.map
