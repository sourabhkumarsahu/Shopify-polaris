import { defineComponent, computed, onMounted, unref, openBlock, createBlock, Teleport, createVNode, withCtx, renderSlot, createCommentVNode } from "vue";
import { t as themeNameDefault } from "../../../vendor.js";
import { u as useId } from "../../use/useId.js";
import { u as usePortalsManager } from "../../use/usePortalsManager.js";
import { a as useThemeName } from "../../use/useTheme.js";
import { _ as _sfc_main$1 } from "../ThemeProvider/ThemeProvider.vue_vue_type_script_setup_true_lang.js";
import { i as isThemeNameLocal } from "../ThemeProvider/utils.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Portal",
  props: {
    idPrefix: {}
  },
  emits: ["portal-created"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const container = usePortalsManager();
    const uniqueId = useId();
    const themeName = useThemeName();
    const portalId = computed(() => {
      return props.idPrefix ? `${props.idPrefix}-${uniqueId}` : uniqueId;
    });
    onMounted(() => {
      emits("portal-created");
    });
    return (_ctx, _cache) => {
      return unref(container) ? (openBlock(), createBlock(Teleport, {
        key: 0,
        to: unref(container)
      }, [
        createVNode(unref(_sfc_main$1), {
          theme: unref(isThemeNameLocal)(unref(themeName)) ? unref(themeName) : unref(themeNameDefault),
          "data-portal-id": portalId.value
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["theme", "data-portal-id"])
      ], 8, ["to"])) : createCommentVNode("", true);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Portal.vue_vue_type_script_setup_true_lang.js.map
