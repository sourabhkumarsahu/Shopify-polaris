import { defineComponent, useSlots, computed, openBlock, createBlock, unref, withCtx, createTextVNode, toDisplayString, createCommentVNode, createVNode, createElementBlock, Fragment, renderList, resolveDynamicComponent, renderSlot } from "vue";
import { u as useId } from "../../../../use/useId.js";
import { u as useHasSlot } from "../../../../use/useHasSlot.js";
import { u as useExtractFragment } from "../../../../use/useExtractFragment.js";
import { _ as _sfc_main$1 } from "../../../BlockStack/BlockStack.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$5 } from "../../../Box/Box.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../Item/Item.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../../../InlineStack/InlineStack.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../../../Text/Text.vue_vue_type_script_setup_true_lang.js";
const __default__ = {
  name: "FormLayoutGroup"
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...__default__,
  props: {
    condensed: { type: Boolean },
    title: {},
    helpText: {}
  },
  setup(__props) {
    const props = __props;
    const slots = useSlots();
    const id = useId();
    const { hasSlot } = useHasSlot();
    const { slotsElms } = useExtractFragment(slots.default);
    const hasHelpText = computed(() => hasSlot(slots.helpText) || props.helpText);
    const titleId = computed(() => props.title && `${id}Title`);
    const helpTextId = computed(() => hasHelpText.value && `${id}HelpText`);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        role: "group",
        gap: "200",
        "aria-labelled": titleId.value,
        "aria-describedby": helpTextId.value
      }, {
        default: withCtx(() => [
          _ctx.title ? (openBlock(), createBlock(unref(_sfc_main$2), {
            key: 0,
            id: titleId.value,
            as: "p"
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(_ctx.title), 1)
            ]),
            _: 1
          }, 8, ["id"])) : createCommentVNode("", true),
          createVNode(unref(_sfc_main$3), { gap: "300" }, {
            default: withCtx(() => [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(slotsElms), (item, index) => {
                return openBlock(), createBlock(unref(_sfc_main$4), {
                  key: index,
                  condensed: _ctx.condensed
                }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(item)))
                  ]),
                  _: 2
                }, 1032, ["condensed"]);
              }), 128))
            ]),
            _: 1
          }),
          hasHelpText.value ? (openBlock(), createBlock(unref(_sfc_main$5), {
            key: 1,
            id: helpTextId.value,
            color: "text-secondary"
          }, {
            default: withCtx(() => [
              slots.helpText ? renderSlot(_ctx.$slots, "helpText", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                createTextVNode(toDisplayString(_ctx.helpText), 1)
              ], 64))
            ]),
            _: 3
          }, 8, ["id"])) : createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["aria-labelled", "aria-describedby"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Group.vue_vue_type_script_setup_true_lang.js.map
