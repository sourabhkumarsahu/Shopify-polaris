{"version":3,"file":"FormLayout.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/FormLayout/FormLayout.vue"],"sourcesContent":["<template lang=\"pug\">\nBlockStack(gap=\"400\")\n  template(\n    v-if=\"!noItemWrap\",\n    v-for=\"child, index in slotsElms\",\n    :key=\"index\",\n  )\n    Item(\n      v-if=\"!isGroup(child)\",\n    )\n      component(:is=\"child\", :ref=\"(el: any) => { itemRefs[index] = el }\")\n\n    component(v-else, :is=\"child\", :ref=\"(el: any) => { itemRefs[index] = el }\")\n\n  slot(v-else)\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, type VNode } from 'vue';\nimport { BlockStack } from '@/components';\nimport type { VueNode } from '@/utilities/types';\nimport { useExtractFragment } from '@/use/useExtractFragment';\n\n// @ts-ignore Note: use as `component :is` on template\nimport { Group, Item } from './components';\n\ntype FormLayoutProps = {\n  /** Unwrap all stack elements  */\n  noItemWrap?: boolean;\n}\n\ntype FormLayoutSlots = {\n  /** The content to display inside the layout. */\n  default: (_?: VueNode) => VNode[];\n}\n\ndefineProps<FormLayoutProps>();\nconst slots = defineSlots<FormLayoutSlots>();\n\nconst { slotsElms } = useExtractFragment(slots.default);\n\nconst itemRefs = ref<any[]>([]);\n\nconst isGroup = (child: VNode) => {\n  return typeof child.type !== 'string'\n    && (\n      (child.type as Record<string, any>).name === 'FormLayoutGroup'\n      || (child.type as Record<string, any>).__name === 'FormLayoutGroup'\n    );\n};\n</script>\n"],"names":["_useSlots"],"mappings":";;;;;;;;;;;;;;;AAqCA,UAAM,QAAQA;AAEd,UAAM,EAAE,UAAc,IAAA,mBAAmB,MAAM,OAAO;AAEhD,UAAA,WAAW,IAAW,CAAA,CAAE;AAExB,UAAA,UAAU,CAAC,UAAiB;AACzB,aAAA,OAAO,MAAM,SAAS,aAExB,MAAM,KAA6B,SAAS,qBACzC,MAAM,KAA6B,WAAW;AAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}