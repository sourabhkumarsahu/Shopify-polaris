{"version":3,"file":"Select.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/Select/Select.vue"],"sourcesContent":["<template lang=\"pug\">\nLabelled(\n  :id=\"`${id}`\",\n  :error=\"error\",\n  :action=\"labelAction\",\n  :label-hidden=\"labelHidden\",\n  :required-indicator=\"requiredIndicator\",\n  :disabled=\"disabled\",\n)\n  template(v-if=\"hasLabel\", #label)\n    slot(v-if=\"slots.label\", name=\"label\")\n    template(v-else) {{ props.label }}\n  template(v-if=\"hasHelpText\", #helpText)\n    slot(v-if=\"slots.helpText\", name=\"helpText\")\n    template(v-else) {{ props.helpText }}\n\n  div(:class=\"className\")\n    select(\n      :id=\"`${id}`\",\n      :name=\"name\",\n      :value=\"model\",\n      :class=\"styles.Input\",\n      :disabled=\"disabled\",\n      :aria-invalid=\"Boolean(error)\",\n      :aria-describedby=\"ariaDescribedBy\",\n      :aria-required=\"requiredIndicator\",\n      @focus=\"handleFocus\",\n      @blur=\"handleBlur\",\n      @change=\"handleChange\",\n    )\n      template(v-for=\"optOrGroup in optionsMarkup\")\n        optgroup(\n          v-if=\"isGroup(optOrGroup)\",\n          :label=\"optOrGroup.title\",\n          :key=\"optOrGroup.title\",\n        )\n          option(\n            v-for=\"option in optOrGroup.options\",\n            :key=\"option.key || option.value\",\n            :value=\"option.value\",\n            :disabled=\"option.disabled\",\n            v-bind=\"getOptionAttrs(option)\",\n          ) {{ option.label }}\n\n        option(\n          v-else,\n          :key=\"optOrGroup.key || optOrGroup.value\",\n          :value=\"optOrGroup.value\",\n          :disabled=\"optOrGroup.disabled\",\n          v-bind=\"getOptionAttrs(optOrGroup)\",\n        ) {{ optOrGroup.label }}\n\n\n    div(\n      :class=\"styles.Content\",\n      aria-hidden,\n      :aria-disabled=\"disabled\",\n    )\n      Box(v-if=\"labelInline\", padding-inline-end=\"100\")\n        Text(\n          as=\"span\",\n          variant=\"bodyMd\",\n          :tone=\"tone && tone === 'magic' && !focused ? 'magic-subdued' : 'subdued'\",\n          truncate,\n        )\n          slot(v-if=\"slots.label\", name=\"label\")\n          template(v-else) {{ props.label }}\n\n      div(v-if=\"selectedOption.prefix\", :class=\"styles.Prefix\")\n        component(:is=\"selectedOption.prefix\")\n\n      span(:class=\"styles.SelectedOption\") {{ selectedOption.label }}\n      span(:class=\"styles.Icon\")\n        Icon(:source=\"SelectIcon\")\n\n    div(:class=\"styles.Backdrop\")\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue';\nimport { classNames, variationName } from '@/utilities/css';\nimport { Labelled, Box, Icon, Text } from '@/components';\nimport { helpTextID } from '@/components/Labelled/utils';\nimport { useToggle } from '@/use/useToggle';\nimport { useHasSlot } from '@/use/useHasSlot';\nimport useId from '@/use/useId';\nimport type {\n  SelectProps,\n  SelectSlots,\n  SelectEvents,\n  SelectOption,\n  SelectGroup,\n  StrictOption,\n  HideableStrictOption,\n  StrictGroup,\n} from './types';\n\nimport SelectIcon from '@icons/SelectIcon.svg';\nimport styles from '@polaris/components/Select/Select.module.css';\n\nconst PLACEHOLDER_VALUE = '';\n\nconst props = defineProps<SelectProps>();\nconst slots = defineSlots<SelectSlots>();\nconst emits = defineEmits<SelectEvents>();\n\nconst model = defineModel<string>({\n  default: PLACEHOLDER_VALUE,\n});\n\nconst {\n  value: focused,\n  toggle: toggleFocused,\n} = useToggle(false);\nconst { hasSlot } = useHasSlot();\n\nconst uniqId = useId();\n\nconst id = computed(() => props.id || uniqId);\nconst labelHidden = computed(() => props.labelInline ? true : props.labelHidden);\n\nconst className = computed(() => (classNames(\n  styles.Select,\n  props.error && styles.error,\n  props.tone && styles[variationName('tone', props.tone)],\n  props.disabled && styles.disabled,\n)));\n\nconst hasLabel = computed(() => hasSlot(slots.label) || props.label);\nconst hasHelpText = computed(() => hasSlot(slots.helpText) || props.helpText);\n\nconst ariaDescribedBy = computed(() => {\n  const describedBy = [];\n\n  if (hasHelpText.value) {\n    describedBy.push(helpTextID(`${id.value}`));\n  }\n\n  if (props.error) {\n    describedBy.push(`${id.value}Error`);\n  }\n\n  return describedBy.length ? describedBy.join(' ') : undefined;\n});\n\nconst optionsMarkup = computed(() => {\n  return normalizedOptions.value.map((opt) => normalizeOption(opt));\n});\n\nconst normalizedOptions = computed(() => {\n  let options = (props.options || []).map(normalizeOption);\n\n  if (props.placeholder) {\n    options = [\n      {\n        value: PLACEHOLDER_VALUE,\n        label: props.placeholder,\n        disabled: true,\n      },\n      ...options,\n    ];\n  }\n\n  return options;\n});\n\n/**\n * Gets the text to display in the UI, for the currently selected option\n */\n const selectedOption = computed(() => {\n  let selected = flattenOptions.value.find((option) => model.value === option.value);\n\n  if (!selected) {\n    // Get the first visible option (not the hidden placeholder)\n    selected = flattenOptions.value.find((option) => !option.hidden);\n  }\n\n  return selected || {value: '', label: ''};\n});\n\n/**\n * Ungroups an options array\n */\nconst flattenOptions = computed(() => {\n  let flatOptions: HideableStrictOption[] = [];\n\n  normalizedOptions.value.forEach((optionOrGroup) => {\n    if (isGroup(optionOrGroup)) {\n      flatOptions = flatOptions.concat(optionOrGroup.options);\n    } else {\n      flatOptions.push(optionOrGroup);\n    }\n  });\n\n  return flatOptions;\n});\n\nconst handleFocus = (e: FocusEvent) => {\n  toggleFocused();\n  emits('focus', e);\n}\n\nconst handleBlur = (e: FocusEvent) => {\n  toggleFocused();\n  emits('blur', e);\n}\n\nconst handleChange = (e: Event) => {\n  const target = e.target as HTMLSelectElement;\n  model.value = target.value;\n  emits('change', target.value, `${id.value}`);\n}\n\nconst getOptionAttrs = (option: HideableStrictOption) => {\n  const {value, label, prefix: _prefix, key, ...rest} = option;\n  return { ...rest };\n}\n\n\nfunction isString(option: SelectOption | SelectGroup): option is string {\n  return typeof option === 'string';\n}\n\nfunction isGroup(option: SelectOption | SelectGroup): option is SelectGroup {\n  return (\n    typeof option === 'object' && 'options' in option && option.options != null\n  );\n}\n\nfunction normalizeStringOption(option: string): StrictOption {\n  return {\n    label: option,\n    value: option,\n  };\n}\n\n/**\n * Converts a string option (and each string option in a Group) into\n * an Option object.\n */\nfunction normalizeOption(\n  option: SelectOption | SelectGroup,\n): HideableStrictOption | StrictGroup {\n  if (isString(option)) {\n    return normalizeStringOption(option);\n  } else if (isGroup(option)) {\n    const {title, options} = option;\n    return {\n      title,\n      options: options.map((option) => {\n        return isString(option) ? normalizeStringOption(option) : option;\n      }),\n    };\n  }\n\n  return option;\n}\n</script>\n"],"names":["_useSlots","_useModel","option"],"mappings":"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"}