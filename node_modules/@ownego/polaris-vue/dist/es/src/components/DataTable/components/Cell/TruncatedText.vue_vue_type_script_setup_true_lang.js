import { defineComponent, ref, computed, openBlock, createBlock, unref, withCtx, createElementVNode, normalizeClass, renderSlot, createElementBlock } from "vue";
import { _ as _sfc_main$1 } from "../../../Tooltip/Tooltip.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "TruncatedText",
  props: {
    className: {}
  },
  setup(__props) {
    const textRef = ref(null);
    const isWithinWidth = computed(() => {
      if (textRef.value) {
        return textRef.value.offsetWidth < textRef.value.scrollWidth;
      }
      return false;
    });
    return (_ctx, _cache) => {
      return isWithinWidth.value ? (openBlock(), createBlock(unref(_sfc_main$1), {
        key: 0,
        content: textRef.value && textRef.value.innerText || ""
      }, {
        default: withCtx(() => [
          createElementVNode("span", {
            ref_key: "textRef",
            ref: textRef,
            class: normalizeClass(_ctx.className)
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2)
        ]),
        _: 3
      }, 8, ["content"])) : (openBlock(), createElementBlock("span", {
        key: 1,
        ref_key: "textRef",
        ref: textRef,
        class: normalizeClass(_ctx.className)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2));
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=TruncatedText.vue_vue_type_script_setup_true_lang.js.map
