import { defineComponent, inject, computed, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, normalizeStyle, createVNode, withCtx, createTextVNode, toDisplayString, createCommentVNode } from "vue";
import { u as useI18n } from "../../use/useI18n.js";
import { _ as _sfc_main$2 } from "../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../LegacyStack/LegacyStack.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
import { s as secondsToTimeComponents, a as secondsToDurationTranslationKey, b as secondsToTimestamp } from "../../../polaris/polaris-react/src/utilities/duration.js";
import { B as PlayIcon$1 } from "../../../vendor.js";
const Thumbnail = "Polaris-VideoThumbnail__Thumbnail";
const ThumbnailContainer = "Polaris-VideoThumbnail__ThumbnailContainer";
const PlayButton = "Polaris-VideoThumbnail__PlayButton";
const Timestamp = "Polaris-VideoThumbnail__Timestamp";
const PlayIcon = "Polaris-VideoThumbnail__PlayIcon";
const Progress = "Polaris-VideoThumbnail__Progress";
const Indicator = "Polaris-VideoThumbnail__Indicator";
const ProgressBar = "Polaris-VideoThumbnail__ProgressBar";
const Label = "Polaris-VideoThumbnail__Label";
const styles = {
  Thumbnail,
  ThumbnailContainer,
  PlayButton,
  Timestamp,
  PlayIcon,
  Progress,
  Indicator,
  ProgressBar,
  Label
};
const _hoisted_1 = ["aria-label"];
const _hoisted_2 = ["value"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "VideoThumbnail",
  props: {
    thumbnailUrl: {},
    videoLength: { default: 0 },
    videoProgress: { default: 0 },
    showVideoProgress: { type: Boolean, default: false },
    accessibilityLabel: {}
  },
  emits: ["click", "before-start-playing"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const mediaQuery = inject("media-query", void 0);
    const isNavigationCollapsed = computed(() => (mediaQuery == null ? void 0 : mediaQuery.isNavigationCollapsed) || false);
    const buttonLabel = computed(() => {
      if (props.accessibilityLabel) {
        return props.accessibilityLabel;
      } else if (props.videoLength) {
        const { hours, minutes, seconds } = secondsToTimeComponents(props.videoLength);
        return i18n.translate(
          "Polaris.VideoThumbnail.playButtonA11yLabel.defaultWithDuration",
          {
            duration: i18n.translate(secondsToDurationTranslationKey(props.videoLength), {
              hourCount: hours,
              minuteCount: minutes,
              secondCount: seconds
            })
          }
        );
      }
      return i18n.translate(
        "Polaris.VideoThumbnail.playButtonA11yLabel.default"
      );
    });
    const progressValue = computed(() => {
      if (props.videoProgress > 0 && props.videoLength > 0) {
        const progress = parseFloat((props.videoProgress / props.videoLength).toFixed(2));
        return progress > 1 ? 1 : progress;
      }
      return 0;
    });
    const progressValuePercents = computed(() => Math.round(progressValue.value * 100));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles).ThumbnailContainer)
      }, [
        createElementVNode("div", {
          class: normalizeClass(unref(styles).Thumbnail),
          style: normalizeStyle({ backgroundImage: `url(${_ctx.thumbnailUrl})` })
        }, null, 6),
        createElementVNode("button", {
          type: "button",
          class: normalizeClass(unref(styles).PlayButton),
          "aria-label": buttonLabel.value,
          onClick: _cache[0] || (_cache[0] = ($event) => emits("click")),
          onMouseenter: _cache[1] || (_cache[1] = ($event) => emits("before-start-playing")),
          onFocus: _cache[2] || (_cache[2] = ($event) => emits("before-start-playing")),
          onTouchstart: _cache[3] || (_cache[3] = ($event) => emits("before-start-playing"))
        }, [
          _ctx.videoLength ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(styles).Timestamp)
          }, [
            createVNode(unref(_sfc_main$1), {
              alignment: "center",
              spacing: "extraTight"
            }, {
              default: withCtx(() => [
                createElementVNode("span", {
                  class: normalizeClass(unref(styles).PlayIcon)
                }, [
                  createVNode(unref(_sfc_main$2), { source: unref(PlayIcon$1) }, null, 8, ["source"])
                ], 2),
                createVNode(unref(_sfc_main$3), {
                  as: "p",
                  fontWeight: "semibold",
                  variant: isNavigationCollapsed.value ? "bodyLg" : "bodyMd"
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString(unref(secondsToTimestamp)(_ctx.videoLength)), 1)
                  ]),
                  _: 1
                }, 8, ["variant"])
              ]),
              _: 1
            })
          ], 2)) : createCommentVNode("", true)
        ], 42, _hoisted_1),
        _ctx.showVideoProgress ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(styles).Progress)
        }, [
          createElementVNode("progress", {
            max: "100",
            class: normalizeClass(unref(styles).ProgressBar),
            value: progressValuePercents.value
          }, null, 10, _hoisted_2),
          createElementVNode("div", {
            class: normalizeClass(unref(styles).Indicator),
            style: normalizeStyle({ transform: `scaleX(${progressValue.value})` })
          }, [
            createElementVNode("span", {
              class: normalizeClass(unref(styles).Label)
            }, toDisplayString(progressValuePercents.value + "%"), 3)
          ], 6)
        ], 2)) : createCommentVNode("", true)
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VideoThumbnail.vue_vue_type_script_setup_true_lang.js.map
