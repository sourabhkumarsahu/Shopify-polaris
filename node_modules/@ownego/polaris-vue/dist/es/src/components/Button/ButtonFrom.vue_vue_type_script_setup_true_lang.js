import { defineComponent, computed, openBlock, createBlock, mergeProps, withCtx, createElementBlock, Fragment, createTextVNode, toDisplayString, createCommentVNode } from "vue";
import { _ as _sfc_main$1 } from "./Button.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "ButtonFrom",
  props: {
    action: {},
    overrides: {}
  },
  setup(__props) {
    const props = __props;
    const plainVariant = computed(() => props.action.plain ? "plain" : void 0);
    const destructiveVariant = computed(() => props.action.destructive ? "primary" : void 0);
    const tone = computed(() => {
      var _a, _b;
      return !((_a = props.overrides) == null ? void 0 : _a.tone) && props.action.destructive ? "critical" : (_b = props.overrides) == null ? void 0 : _b.tone;
    });
    const bindProps = computed(() => {
      if (!props.action) {
        return {};
      }
      const { onAction, content, plain, destructive, ...other } = props.action;
      return { ...other, ...props.overrides };
    });
    const handleClick = () => {
      if (props.action && props.action.onAction) {
        props.action.onAction();
      }
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$1, mergeProps({
        tone: tone.value,
        variant: plainVariant.value || destructiveVariant.value
      }, bindProps.value, { onClick: handleClick }), {
        default: withCtx(() => [
          _ctx.action.content ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            createTextVNode(toDisplayString(_ctx.action.content), 1)
          ], 64)) : createCommentVNode("", true)
        ]),
        _: 1
      }, 16, ["tone", "variant"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=ButtonFrom.vue_vue_type_script_setup_true_lang.js.map
