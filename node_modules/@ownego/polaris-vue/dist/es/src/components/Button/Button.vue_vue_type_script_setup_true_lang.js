import { defineComponent, useSlots, useAttrs, computed, openBlock, createBlock, unref, mergeProps, toHandlers, withCtx, createElementBlock, normalizeClass, createVNode, createCommentVNode, renderSlot } from "vue";
import { c as capitalize } from "../../../polaris/polaris-react/src/utilities/capitalize.js";
import { c as classNames, v as variationName } from "../../utilities/css.js";
import { u as useI18n } from "../../use/useI18n.js";
import { u as useHasSlot } from "../../use/useHasSlot.js";
import { u as useBreakpoints } from "../../use/useBreakpoints.js";
import { h as handleMouseUpByBlurring } from "../../utilities/focus.js";
import { _ as _sfc_main$1 } from "../UnstyledButton/UnstyledButton.vue_vue_type_script_setup_true_lang.js";
import { e as SelectIcon, f as ChevronUpIcon, g as ChevronDownIcon } from "../../../vendor.js";
import { _ as _sfc_main$3 } from "../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../Spinner/Spinner.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
const Button = "Polaris-Button";
const disabled = "Polaris-Button--disabled";
const pressed = "Polaris-Button--pressed";
const variantPrimary = "Polaris-Button--variantPrimary";
const variantSecondary = "Polaris-Button--variantSecondary";
const variantTertiary = "Polaris-Button--variantTertiary";
const variantPlain = "Polaris-Button--variantPlain";
const removeUnderline = "Polaris-Button--removeUnderline";
const variantMonochromePlain = "Polaris-Button--variantMonochromePlain";
const toneSuccess = "Polaris-Button--toneSuccess";
const toneCritical = "Polaris-Button--toneCritical";
const sizeMicro = "Polaris-Button--sizeMicro";
const sizeSlim = "Polaris-Button--sizeSlim";
const sizeMedium = "Polaris-Button--sizeMedium";
const sizeLarge = "Polaris-Button--sizeLarge";
const textAlignCenter = "Polaris-Button--textAlignCenter";
const textAlignStart = "Polaris-Button--textAlignStart";
const textAlignLeft = "Polaris-Button--textAlignLeft";
const textAlignEnd = "Polaris-Button--textAlignEnd";
const textAlignRight = "Polaris-Button--textAlignRight";
const fullWidth = "Polaris-Button--fullWidth";
const iconOnly = "Polaris-Button--iconOnly";
const iconWithText = "Polaris-Button--iconWithText";
const disclosure = "Polaris-Button--disclosure";
const loading = "Polaris-Button--loading";
const pressable = "Polaris-Button--pressable";
const hidden = "Polaris-Button--hidden";
const Icon = "Polaris-Button__Icon";
const Spinner = "Polaris-Button__Spinner";
const styles = {
  Button,
  disabled,
  pressed,
  variantPrimary,
  variantSecondary,
  variantTertiary,
  variantPlain,
  removeUnderline,
  variantMonochromePlain,
  toneSuccess,
  toneCritical,
  sizeMicro,
  sizeSlim,
  sizeMedium,
  sizeLarge,
  textAlignCenter,
  textAlignStart,
  textAlignLeft,
  textAlignEnd,
  textAlignRight,
  fullWidth,
  iconOnly,
  iconWithText,
  disclosure,
  loading,
  pressable,
  hidden,
  Icon,
  Spinner
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Button",
  props: {
    size: { default: "medium" },
    textAlign: { default: "center" },
    fullWidth: { type: Boolean },
    disclosure: { type: [String, Boolean] },
    removeUnderline: { type: Boolean },
    icon: {},
    dataPrimaryLink: { type: Boolean },
    tone: {},
    variant: { default: "secondary" },
    id: {},
    url: {},
    external: { type: Boolean },
    target: {},
    download: { type: [String, Boolean] },
    submit: { type: Boolean },
    disabled: { type: Boolean },
    loading: { type: Boolean },
    pressed: { type: Boolean },
    accessibilityLabel: {},
    role: {},
    ariaControls: {},
    ariaExpanded: { type: Boolean },
    ariaDescribedBy: {},
    ariaChecked: {}
  },
  setup(__props) {
    const slots = useSlots();
    const attrs = useAttrs();
    const i18n = useI18n();
    const { hasSlot } = useHasSlot();
    const breakpoints = useBreakpoints();
    const { mdUp } = breakpoints.value;
    const props = __props;
    const listeners = computed(() => {
      const events = ["blur", "click", "focus", "keydown", "keypress", "keyup", "mouseenter", "touchstart", "pointerdown"];
      const eventBindings = {};
      for (const event of events) {
        const eventName = `on${capitalize(event)}`;
        if (attrs[eventName]) {
          eventBindings[event] = attrs[eventName];
        }
      }
      return eventBindings;
    });
    const hasPlainText = computed(() => ["plain", "monochromePlain"].includes(props.variant));
    const textFontWeight = computed(() => {
      if (hasPlainText.value) {
        return "regular";
      }
      if (props.variant === "primary") {
        return mdUp ? "medium" : "semibold";
      }
      return "medium";
    });
    const textVariant = computed(() => {
      if (props.size === "large" || hasPlainText.value && props.size !== "micro") {
        return "bodyMd";
      }
      return "bodySm";
    });
    const hasChildren = computed(() => hasSlot(slots.default));
    const isDisabled = computed(() => props.disabled || props.loading);
    const className = computed(() => classNames(
      styles.Button,
      styles.pressable,
      styles[variationName("variant", props.variant)],
      styles[variationName("size", props.size)],
      styles[variationName("textAlign", props.textAlign)],
      props.fullWidth && styles.fullWidth,
      props.disclosure && styles.disclosure,
      (props.icon || hasSlot(slots.icon)) && hasSlot(slots.default) && styles.iconWithText,
      (props.icon || hasSlot(slots.icon)) && !hasSlot(slots.default) && styles.iconOnly,
      isDisabled.value && styles.disabled,
      props.loading && styles.loading,
      props.pressed && !props.disabled && !props.url && styles.pressed,
      props.removeUnderline && styles.removeUnderline,
      props.tone && styles[variationName("tone", props.tone)]
    ));
    const commonProps = computed(() => {
      const { id, accessibilityLabel, ariaDescribedBy, role } = props;
      return {
        id,
        className: className.value,
        role,
        accessibilityLabel,
        ariaDescribedBy,
        "data-primary-link": props.dataPrimaryLink ? true : void 0
      };
    });
    const linkProps = computed(() => {
      const { external, url, download } = props;
      return {
        url,
        external,
        download: download ?? void 0
      };
    });
    const actionProps = computed(() => {
      const { submit, loading: loading2, ariaChecked, ariaControls, ariaExpanded, pressed: pressed2 } = props;
      return {
        submit,
        disabled: isDisabled.value,
        loading: loading2,
        ariaChecked,
        ariaControls,
        ariaExpanded,
        pressed: pressed2
      };
    });
    const disclosureIconSource = computed(() => {
      if (props.loading) {
        return "placeholder";
      }
      if (props.disclosure === "select") {
        return SelectIcon;
      }
      return props.disclosure === "up" ? ChevronUpIcon : ChevronDownIcon;
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), mergeProps({ ...commonProps.value, ...linkProps.value, ...actionProps.value }, toHandlers(listeners.value), { onMouseup: unref(handleMouseUpByBlurring) }), {
        default: withCtx(() => [
          _ctx.loading ? (openBlock(), createElementBlock("span", {
            key: 0,
            class: normalizeClass(unref(styles).Spinner)
          }, [
            createVNode(unref(_sfc_main$2), {
              size: "small",
              "accessibility-label": unref(i18n).translate("Polaris.Button.spinnerAccessibilityLabel")
            }, null, 8, ["accessibility-label"])
          ], 2)) : createCommentVNode("", true),
          _ctx.icon || unref(hasSlot)(unref(slots).icon) ? (openBlock(), createElementBlock("span", {
            key: 1,
            class: normalizeClass(_ctx.loading ? unref(styles).hidden : unref(styles).Icon)
          }, [
            unref(hasSlot)(unref(slots).icon) ? renderSlot(_ctx.$slots, "icon", { key: 0 }) : _ctx.icon ? (openBlock(), createBlock(unref(_sfc_main$3), {
              key: 1,
              source: _ctx.loading ? "placeholder" : _ctx.icon
            }, null, 8, ["source"])) : createCommentVNode("", true)
          ], 2)) : createCommentVNode("", true),
          hasChildren.value ? (openBlock(), createBlock(unref(_sfc_main$4), {
            as: "span",
            variant: textVariant.value,
            fontWeight: textFontWeight.value,
            key: _ctx.disabled ? "text-disabled" : "text"
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["variant", "fontWeight"])) : createCommentVNode("", true),
          _ctx.disclosure ? (openBlock(), createElementBlock("span", {
            key: 3,
            class: normalizeClass(_ctx.loading ? unref(styles).hidden : unref(styles).Icon)
          }, [
            createVNode(unref(_sfc_main$3), { source: disclosureIconSource.value }, null, 8, ["source"])
          ], 2)) : createCommentVNode("", true)
        ]),
        _: 3
      }, 16, ["onMouseup"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Button.vue_vue_type_script_setup_true_lang.js.map
