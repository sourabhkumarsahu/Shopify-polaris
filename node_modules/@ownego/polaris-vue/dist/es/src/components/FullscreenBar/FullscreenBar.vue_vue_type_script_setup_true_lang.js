import { defineComponent, useSlots, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, createVNode, withCtx, createTextVNode, toDisplayString, renderSlot } from "vue";
import { u as useI18n } from "../../use/useI18n.js";
import { E as ExitIcon } from "../../../vendor.js";
import { _ as _sfc_main$1 } from "../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
const FullscreenBar = "Polaris-FullscreenBar";
const BackAction = "Polaris-FullscreenBar__BackAction";
const styles = {
  FullscreenBar,
  BackAction
};
const _hoisted_1 = ["aria-label"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "FullscreenBar",
  emits: ["action"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    useSlots();
    const i18n = useI18n();
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles).FullscreenBar)
      }, [
        createElementVNode("button", {
          class: normalizeClass(unref(styles).BackAction),
          "aria-label": unref(i18n).translate("Polaris.FullscreenBar.accessibilityLabel"),
          onClick: _cache[0] || (_cache[0] = ($event) => emits("action"))
        }, [
          createVNode(unref(_sfc_main$1), { source: unref(ExitIcon) }, null, 8, ["source"]),
          createVNode(unref(_sfc_main$2), {
            as: "span",
            variant: "bodyLg"
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(unref(i18n).translate("Polaris.FullscreenBar.accessibilityLabel")), 1)
            ]),
            _: 1
          })
        ], 10, _hoisted_1),
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=FullscreenBar.vue_vue_type_script_setup_true_lang.js.map
