import { defineComponent, useSlots, computed, openBlock, createBlock, unref, withCtx, renderSlot, createVNode, normalizeProps, mergeProps, createCommentVNode, createElementBlock, normalizeClass, Fragment, renderList, createTextVNode, toDisplayString } from "vue";
import { i as isSection } from "../../utilities/options.js";
import { u as useI18n } from "../../use/useI18n.js";
import { u as useHasSlot } from "../../use/useHasSlot.js";
import { A as AutoSelection } from "../Listbox/utils.js";
import { _ as _sfc_main$3 } from "./components/MappedAction/MappedAction.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$6 } from "./components/MappedOption/MappedOption.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../Listbox/ListBox.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$5 } from "../Listbox/components/Header/Header.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$7 } from "../Listbox/components/Loading/Loading.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../Listbox/components/Section/Section.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../Combobox/Combobox.vue_vue_type_script_setup_true_lang.js";
const ActionContainer = "Polaris-Autocomplete-MappedAction__ActionContainer";
const Action = "Polaris-Autocomplete-MappedAction__Action";
const destructive = "Polaris-Autocomplete-MappedAction--destructive";
const selected = "Polaris-Autocomplete-MappedAction--selected";
const disabled = "Polaris-Autocomplete-MappedAction--disabled";
const Prefix = "Polaris-Autocomplete-MappedAction__Prefix";
const Suffix = "Polaris-Autocomplete-MappedAction__Suffix";
const Content = "Polaris-Autocomplete-MappedAction__Content";
const Text = "Polaris-Autocomplete-MappedAction__Text";
const styles = {
  ActionContainer,
  Action,
  destructive,
  selected,
  disabled,
  Prefix,
  Suffix,
  Content,
  Text
};
const _hoisted_1 = {
  key: 4,
  role: "status"
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Autocomplete",
  props: {
    id: {},
    options: {},
    selected: {},
    preferredPosition: {},
    listTitle: {},
    allowMultiple: { type: Boolean },
    actionBefore: {},
    loading: { type: Boolean },
    willLoadMoreResults: { type: Boolean }
  },
  emits: ["select", "load-more-results"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const i18n = useI18n();
    const { hasSlot } = useHasSlot();
    const autoSelection = computed(() => props.actionBefore ? AutoSelection.First : void 0);
    const conditionalOptions = computed(() => props.loading && !props.willLoadMoreResults ? [] : props.options);
    const noOptions = computed(() => {
      if (isSection(conditionalOptions.value)) {
        return conditionalOptions.value.every((section) => section.options.length === 0);
      }
      return conditionalOptions.value.length === 0;
    });
    const updateSelection = (newSelection) => {
      if (props.actionBefore && newSelection === props.actionBefore.content) {
        props.actionBefore.onAction && props.actionBefore.onAction();
        return;
      }
      if (props.allowMultiple) {
        if (props.selected.includes(newSelection)) {
          emits("select", props.selected.filter((option) => option !== newSelection));
        } else {
          emits("select", [...props.selected, newSelection]);
        }
      } else {
        emits("select", [newSelection]);
      }
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        "allow-multiple": _ctx.allowMultiple,
        "preferred-position": _ctx.preferredPosition,
        "will-load-more-options": _ctx.willLoadMoreResults,
        onScrolledToBottom: _cache[0] || (_cache[0] = ($event) => emits("load-more-results"))
      }, {
        activator: withCtx(() => [
          renderSlot(_ctx.$slots, "textField")
        ]),
        default: withCtx(() => [
          createVNode(unref(_sfc_main$2), {
            "auto-selection": autoSelection.value,
            onSelect: updateSelection
          }, {
            default: withCtx(() => [
              _ctx.actionBefore ? (openBlock(), createBlock(unref(_sfc_main$3), normalizeProps(mergeProps({ key: 0 }, _ctx.actionBefore)), null, 16)) : createCommentVNode("", true),
              unref(isSection)(conditionalOptions.value) && !noOptions.value ? (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass(unref(styles).SectionWrapper)
              }, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(conditionalOptions.value, ({ options, title }) => {
                  return openBlock(), createElementBlock(Fragment, { key: title }, [
                    options.length > 0 ? (openBlock(), createBlock(unref(_sfc_main$4), {
                      key: 0,
                      divider: false
                    }, {
                      title: withCtx(() => [
                        createVNode(unref(_sfc_main$5), null, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(title), 1)
                          ]),
                          _: 2
                        }, 1024)
                      ]),
                      default: withCtx(() => [
                        (openBlock(true), createElementBlock(Fragment, null, renderList(options, (option) => {
                          return openBlock(), createBlock(unref(_sfc_main$6), mergeProps({
                            key: option.id || option.value,
                            ref_for: true
                          }, option, {
                            selected: _ctx.selected.includes(option.value),
                            "single-selection": !_ctx.allowMultiple
                          }), null, 16, ["selected", "single-selection"]);
                        }), 128))
                      ]),
                      _: 2
                    }, 1024)) : createCommentVNode("", true)
                  ], 64);
                }), 128))
              ], 2)) : !unref(isSection)(conditionalOptions.value) && !noOptions.value ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                _ctx.listTitle ? (openBlock(), createBlock(unref(_sfc_main$4), {
                  key: 0,
                  divider: false
                }, {
                  title: withCtx(() => [
                    createVNode(unref(_sfc_main$5), null, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString(_ctx.listTitle), 1)
                      ]),
                      _: 1
                    })
                  ]),
                  default: withCtx(() => [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(conditionalOptions.value, (option) => {
                      return openBlock(), createBlock(unref(_sfc_main$6), mergeProps({
                        key: option.id || option.value,
                        ref_for: true
                      }, option, {
                        selected: _ctx.selected.includes(option.value),
                        "single-selection": !_ctx.allowMultiple
                      }), null, 16, ["selected", "single-selection"]);
                    }), 128))
                  ]),
                  _: 1
                })) : (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(conditionalOptions.value, (option) => {
                  return openBlock(), createBlock(unref(_sfc_main$6), mergeProps({
                    key: option.id || option.value,
                    ref_for: true
                  }, option, {
                    selected: _ctx.selected.includes(option.value),
                    "single-selection": !_ctx.allowMultiple
                  }), null, 16, ["selected", "single-selection"]);
                }), 128))
              ], 64)) : createCommentVNode("", true),
              _ctx.loading ? (openBlock(), createBlock(unref(_sfc_main$7), {
                key: 3,
                "accessibility-label": unref(i18n).translate("Polaris.Autocomplete.spinnerAccessibilityLabel")
              }, null, 8, ["accessibility-label"])) : createCommentVNode("", true),
              unref(hasSlot)(slots.emptyState) && _ctx.options.length === 0 && !_ctx.loading ? (openBlock(), createElementBlock("div", _hoisted_1, [
                renderSlot(_ctx.$slots, "emptyState")
              ])) : createCommentVNode("", true)
            ]),
            _: 3
          }, 8, ["auto-selection"])
        ]),
        _: 3
      }, 8, ["allow-multiple", "preferred-position", "will-load-more-options"]);
    };
  }
});
export {
  _sfc_main as _,
  styles as s
};
//# sourceMappingURL=Autocomplete.vue_vue_type_script_setup_true_lang.js.map
