{"version":3,"file":"MappedAction.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../../../src/components/Autocomplete/components/MappedAction/MappedAction.vue"],"sourcesContent":["<template lang=\"pug\">\ndiv(:class=\"styles.ActionContainer\")\n  ListboxAction(\n    :selected=\"active\",\n    :disabled=\"disabled\",\n    :value=\"content || ''\",\n  )\n    div(:class=\"actionClassNames\")\n      div(:class=\"styles.Content\")\n        div(v-if=\"prefix\", :class=\"styles.Prefix\")\n          component(:is=\"prefix\")\n        div(v-else-if=\"icon\", :class=\"styles.Prefix\")\n          Icon(:source=\"icon\")\n        div(\n          v-else-if=\"image\",\n          role=\"presentation\",\n          :class=\"styles.Prefix\",\n          :style=\"{ backgroundImage: `url(${image})` }\",\n        )\n\n        div(:class=\"styles.Text\")\n          Text(\n            as=\"p\",\n            variant=\"bodyMd\",\n            :break-word=\"wrapOverflow\",\n          ) {{ contentText }}\n          Text(\n            v-if=\"helpText\",\n            as=\"p\",\n            variant=\"bodyMd\",\n            tone=\"subdued\",\n          ) {{ helpText }}\n\n        span(v-if=\"badge\", :class=\"styles.Suffix\")\n          Badge(:tone=\"badge.tone\") {{ badge.content }}\n\n        span(v-if=\"suffix\", :class=\"styles.Suffix\")\n          component(:is=\"suffix\")\n\n</template>\n\n<script setup lang=\"ts\">\nimport { type ComputedRef, computed, provide } from 'vue';\nimport type { ActionListItemDescriptor } from '@/utilities/types';\nimport { classNames } from '@/utilities/css';\nimport type { MappedActionContextType } from '@/utilities/auto-complete';\nimport useI18n from '@/use/useI18n';\nimport { Badge, ListboxAction, Icon, Text } from '@/components';\n\nimport styles from '@polaris/components/Autocomplete/components/MappedAction/MappedAction.module.css';\n\ninterface MappedActionProps extends ActionListItemDescriptor {\n  wrapOverflow?: boolean;\n}\n\nconst props = withDefaults(defineProps<MappedActionProps>(), {\n  wrapOverflow: false,\n});\n\nconst emits = defineEmits<{\n  action: [];\n}>();\n\nconst i18n = useI18n();\n\nconst context = computed(() => ({\n  role: props.role,\n  url: props.url,\n  external: props.external,\n  destructive: props.destructive,\n  onAction,\n}));\n\nconst actionClassNames = computed(() => classNames(\n  styles.Action,\n  props.disabled && styles.disabled,\n  props.destructive && styles.destructive,\n  props.active && styles.selected,\n));\n\nconst contentText = computed(() => {\n  return props.ellipsis && props.content\n    ? i18n.translate('Polaris.Autocomplete.ellipsis', { content: props.content })\n    : props.content;\n});\n\nconst onAction = () => {\n  emits('action');\n};\n\nprovide<ComputedRef<MappedActionContextType>>('mapped-action', context);\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA,UAAM,QAAQ;AAId,UAAM,QAAQ;AAId,UAAM,OAAO;AAEP,UAAA,UAAU,SAAS,OAAO;AAAA,MAC9B,MAAM,MAAM;AAAA,MACZ,KAAK,MAAM;AAAA,MACX,UAAU,MAAM;AAAA,MAChB,aAAa,MAAM;AAAA,MACnB;AAAA,IACA,EAAA;AAEI,UAAA,mBAAmB,SAAS,MAAM;AAAA,MACtC,OAAO;AAAA,MACP,MAAM,YAAY,OAAO;AAAA,MACzB,MAAM,eAAe,OAAO;AAAA,MAC5B,MAAM,UAAU,OAAO;AAAA,IAAA,CACxB;AAEK,UAAA,cAAc,SAAS,MAAM;AACjC,aAAO,MAAM,YAAY,MAAM,UAC3B,KAAK,UAAU,iCAAiC,EAAE,SAAS,MAAM,QAAS,CAAA,IAC1E,MAAM;AAAA,IAAA,CACX;AAED,UAAM,WAAW,MAAM;AACrB,YAAM,QAAQ;AAAA,IAAA;AAGhB,YAA8C,iBAAiB,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}