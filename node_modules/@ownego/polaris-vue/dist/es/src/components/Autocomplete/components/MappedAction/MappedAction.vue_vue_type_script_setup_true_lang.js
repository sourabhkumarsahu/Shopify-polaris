import { defineComponent, computed, provide, openBlock, createElementBlock, normalizeClass, unref, createVNode, withCtx, createElementVNode, createBlock, resolveDynamicComponent, normalizeStyle, createCommentVNode, createTextVNode, toDisplayString } from "vue";
import { c as classNames } from "../../../../utilities/css.js";
import { u as useI18n } from "../../../../use/useI18n.js";
import { s as styles } from "../../Autocomplete.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$1 } from "../../../Listbox/components/Action/Action.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../../../Badge/Badge.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../../../Icon/Icon.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../../../Text/Text.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "MappedAction",
  props: {
    wrapOverflow: { type: Boolean, default: false },
    accessibilityLabel: {},
    badge: {},
    prefix: { type: [String, Number, Boolean, Function, Object, null] },
    suffix: { type: [String, Number, Boolean, Function, Object, null] },
    helpText: {},
    icon: {},
    image: {},
    ellipsis: { type: Boolean },
    truncate: { type: Boolean },
    active: { type: Boolean },
    variant: {},
    role: {},
    disabled: { type: Boolean },
    id: {},
    content: {},
    url: {},
    external: { type: Boolean },
    target: {},
    onAction: {},
    onMouseEnter: {},
    onTouchStart: {},
    destructive: { type: Boolean }
  },
  emits: ["action"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const context = computed(() => ({
      role: props.role,
      url: props.url,
      external: props.external,
      destructive: props.destructive,
      onAction
    }));
    const actionClassNames = computed(() => classNames(
      styles.Action,
      props.disabled && styles.disabled,
      props.destructive && styles.destructive,
      props.active && styles.selected
    ));
    const contentText = computed(() => {
      return props.ellipsis && props.content ? i18n.translate("Polaris.Autocomplete.ellipsis", { content: props.content }) : props.content;
    });
    const onAction = () => {
      emits("action");
    };
    provide("mapped-action", context);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles).ActionContainer)
      }, [
        createVNode(unref(_sfc_main$1), {
          selected: _ctx.active,
          disabled: _ctx.disabled,
          value: _ctx.content || ""
        }, {
          default: withCtx(() => [
            createElementVNode("div", {
              class: normalizeClass(actionClassNames.value)
            }, [
              createElementVNode("div", {
                class: normalizeClass(unref(styles).Content)
              }, [
                _ctx.prefix ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(unref(styles).Prefix)
                }, [
                  (openBlock(), createBlock(resolveDynamicComponent(_ctx.prefix)))
                ], 2)) : _ctx.icon ? (openBlock(), createElementBlock("div", {
                  key: 1,
                  class: normalizeClass(unref(styles).Prefix)
                }, [
                  createVNode(unref(_sfc_main$2), { source: _ctx.icon }, null, 8, ["source"])
                ], 2)) : _ctx.image ? (openBlock(), createElementBlock("div", {
                  key: 2,
                  role: "presentation",
                  class: normalizeClass(unref(styles).Prefix),
                  style: normalizeStyle({ backgroundImage: `url(${_ctx.image})` })
                }, null, 6)) : createCommentVNode("", true),
                createElementVNode("div", {
                  class: normalizeClass(unref(styles).Text)
                }, [
                  createVNode(unref(_sfc_main$3), {
                    as: "p",
                    variant: "bodyMd",
                    "break-word": _ctx.wrapOverflow
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(contentText.value), 1)
                    ]),
                    _: 1
                  }, 8, ["break-word"]),
                  _ctx.helpText ? (openBlock(), createBlock(unref(_sfc_main$3), {
                    key: 0,
                    as: "p",
                    variant: "bodyMd",
                    tone: "subdued"
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(_ctx.helpText), 1)
                    ]),
                    _: 1
                  })) : createCommentVNode("", true)
                ], 2),
                _ctx.badge ? (openBlock(), createElementBlock("span", {
                  key: 3,
                  class: normalizeClass(unref(styles).Suffix)
                }, [
                  createVNode(unref(_sfc_main$4), {
                    tone: _ctx.badge.tone
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(_ctx.badge.content), 1)
                    ]),
                    _: 1
                  }, 8, ["tone"])
                ], 2)) : createCommentVNode("", true),
                _ctx.suffix ? (openBlock(), createElementBlock("span", {
                  key: 4,
                  class: normalizeClass(unref(styles).Suffix)
                }, [
                  (openBlock(), createBlock(resolveDynamicComponent(_ctx.suffix)))
                ], 2)) : createCommentVNode("", true)
              ], 2)
            ], 2)
          ]),
          _: 1
        }, 8, ["selected", "disabled", "value"])
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=MappedAction.vue_vue_type_script_setup_true_lang.js.map
