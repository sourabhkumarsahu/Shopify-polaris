import { defineComponent, computed, openBlock, createBlock, unref, withCtx, createVNode, createElementVNode, normalizeClass, createElementBlock, resolveDynamicComponent, createCommentVNode, createTextVNode, toDisplayString } from "vue";
import { c as classNames } from "../../../../utilities/css.js";
import { _ as _sfc_main$1 } from "../../../Listbox/components/Option/Option.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../../../Listbox/components/TextOption/TextOption.vue_vue_type_script_setup_true_lang.js";
const Content = "Polaris-Autocomplete-MappedOption__Content";
const Media = "Polaris-Autocomplete-MappedOption__Media";
const singleSelectionMedia = "Polaris-Autocomplete-MappedOption--singleSelectionMedia";
const disabledMedia = "Polaris-Autocomplete-MappedOption--disabledMedia";
const styles = {
  Content,
  Media,
  singleSelectionMedia,
  disabledMedia
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "MappedOption",
  props: {
    value: {},
    disabled: { type: Boolean },
    active: { type: Boolean },
    id: {},
    label: {},
    media: { type: [String, Number, Boolean, Function, Object, null] },
    selected: { type: Boolean },
    singleSelection: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const mediaClassNames = computed(() => classNames(
      styles.Media,
      props.disabled && styles.disabledMedia,
      props.singleSelection && styles.singleSelectionMedia
    ));
    const accessibilityLabel = computed(() => typeof props.label === "string" ? props.label : void 0);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1), {
        "accessibility-label": accessibilityLabel.value,
        key: _ctx.value,
        value: _ctx.value,
        selected: _ctx.selected,
        disabled: _ctx.disabled
      }, {
        default: withCtx(() => [
          createVNode(unref(_sfc_main$2), {
            selected: _ctx.selected,
            disabled: _ctx.disabled
          }, {
            default: withCtx(() => [
              createElementVNode("div", {
                class: normalizeClass(unref(styles).Content)
              }, [
                _ctx.media ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(mediaClassNames.value)
                }, [
                  (openBlock(), createBlock(resolveDynamicComponent(_ctx.media)))
                ], 2)) : createCommentVNode("", true),
                createTextVNode(toDisplayString(_ctx.label), 1)
              ], 2)
            ]),
            _: 1
          }, 8, ["selected", "disabled"])
        ]),
        _: 1
      }, 8, ["accessibility-label", "value", "selected", "disabled"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=MappedOption.vue_vue_type_script_setup_true_lang.js.map
