import { defineComponent, useSlots, getCurrentInstance, ref, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, unref, Fragment, renderList, createBlock, createCommentVNode, createVNode, withCtx, createElementVNode, renderSlot } from "vue";
import { u as useHasSlot } from "../../use/useHasSlot.js";
import { c as classNames } from "../../utilities/css.js";
import { u as useI18n } from "../../use/useI18n.js";
import { _ as _sfc_main$2 } from "../Box/Box.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../Button/Button.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$6 } from "../ButtonGroup/ButtonGroup.vue_vue_type_script_setup_true_lang.js";
import { m as ChevronLeftIcon, n as ChevronRightIcon } from "../../../vendor.js";
import { _ as _sfc_main$1 } from "../KeypressListener/KeypressListener.vue_vue_type_script_setup_true_lang.js";
import { i as isInputFocused } from "../../../polaris/polaris-react/src/utilities/is-input-focused.js";
import { _ as _sfc_main$5 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../Tooltip/Tooltip.vue_vue_type_script_setup_true_lang.js";
const Pagination = "Polaris-Pagination";
const table = "Polaris-Pagination--table";
const TablePaginationActions = "Polaris-Pagination__TablePaginationActions";
const styles = {
  Pagination,
  table,
  TablePaginationActions
};
const _hoisted_1 = ["aria-label"];
const _hoisted_2 = ["aria-label"];
const _hoisted_3 = { "aria-live": "polite" };
const _hoisted_4 = { key: 0 };
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Pagination",
  props: {
    nextKeys: {},
    previousKeys: {},
    nextTooltip: {},
    previousTooltip: {},
    nextURL: {},
    previousURL: {},
    hasNext: { type: Boolean },
    hasPrevious: { type: Boolean },
    accessibilityLabel: {},
    accessibilityLabels: {},
    type: { default: "page" }
  },
  emits: ["next", "previous"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const i18n = useI18n();
    const currentInstance = getCurrentInstance();
    const { hasSlot } = useHasSlot();
    const node = ref(null);
    const navLabel = computed(
      () => props.accessibilityLabel || i18n.translate("Polaris.Pagination.pagination")
    );
    const previousLabel = computed(
      () => {
        var _a;
        return ((_a = props.accessibilityLabels) == null ? void 0 : _a.previous) || i18n.translate("Polaris.Pagination.previous");
      }
    );
    const nextLabel = computed(
      () => {
        var _a;
        return ((_a = props.accessibilityLabels) == null ? void 0 : _a.next) || i18n.translate("Polaris.Pagination.next");
      }
    );
    const prevKeyCondition = computed(
      () => {
        var _a;
        return props.previousKeys && (props.previousURL || ((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onPrevious)) && props.hasPrevious;
      }
    );
    const nextKeyCondition = computed(
      () => {
        var _a;
        return props.nextKeys && (props.nextURL || ((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onNext)) && props.hasNext;
      }
    );
    const handleCallback = (fn) => {
      return () => {
        if (isInputFocused()) {
          return;
        }
        fn();
      };
    };
    const prevKeypressHandler = () => {
      var _a;
      if (props.previousURL) ;
      else {
        const preEmit = (_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onPrevious;
        handleCallback(preEmit());
      }
    };
    const nextKeypressHandler = () => {
      var _a;
      if (props.nextURL) ;
      else {
        const nextEmit = (_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onNext;
        handleCallback(nextEmit());
      }
    };
    return (_ctx, _cache) => {
      const _component_InlineStack = resolveComponent("InlineStack");
      return _ctx.type === "table" ? (openBlock(), createElementBlock("nav", {
        key: 0,
        ref_key: "node",
        ref: node,
        "aria-label": navLabel.value,
        class: normalizeClass(unref(classNames)(unref(styles).Pagination, unref(styles).table))
      }, [
        prevKeyCondition.value ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(_ctx.previousKeys, (key) => {
          return openBlock(), createBlock(unref(_sfc_main$1), {
            key,
            keyCode: key,
            handler: prevKeypressHandler
          }, null, 8, ["keyCode"]);
        }), 128)) : createCommentVNode("", true),
        nextKeyCondition.value ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(_ctx.nextKeys, (key) => {
          return openBlock(), createBlock(unref(_sfc_main$1), {
            key,
            keyCode: key,
            handler: nextKeypressHandler
          }, null, 8, ["keyCode"]);
        }), 128)) : createCommentVNode("", true),
        createVNode(unref(_sfc_main$2), {
          background: "bg-surface-secondary",
          paddingBlockStart: "150",
          paddingBlockEnd: "150",
          paddingInlineStart: "300",
          paddingInlineEnd: "200"
        }, {
          default: withCtx(() => [
            createVNode(_component_InlineStack, {
              blockAlign: "center",
              align: "center"
            }, {
              default: withCtx(() => [
                createElementVNode("div", {
                  class: normalizeClass(unref(styles).TablePaginationActions),
                  "data-buttongroup-variant": "segmented"
                }, [
                  createElementVNode("div", null, [
                    _ctx.previousTooltip && _ctx.hasPrevious ? (openBlock(), createBlock(unref(_sfc_main$3), {
                      key: 0,
                      activatorWrapper: "span",
                      preferredPosition: "below",
                      content: _ctx.previousTooltip
                    }, {
                      default: withCtx(() => [
                        createVNode(unref(_sfc_main$4), {
                          id: "previousURL",
                          icon: unref(ChevronLeftIcon),
                          accessibilityLabel: previousLabel.value,
                          url: _ctx.previousURL,
                          disabled: !_ctx.hasPrevious,
                          onClick: _cache[0] || (_cache[0] = ($event) => emits("previous"))
                        }, null, 8, ["icon", "accessibilityLabel", "url", "disabled"])
                      ]),
                      _: 1
                    }, 8, ["content"])) : (openBlock(), createBlock(unref(_sfc_main$4), {
                      key: 1,
                      id: "previousURL",
                      icon: unref(ChevronLeftIcon),
                      accessibilityLabel: previousLabel.value,
                      url: _ctx.previousURL,
                      disabled: !_ctx.hasPrevious,
                      onClick: _cache[1] || (_cache[1] = ($event) => emits("previous"))
                    }, null, 8, ["icon", "accessibilityLabel", "url", "disabled"]))
                  ]),
                  unref(hasSlot)(slots.default) ? (openBlock(), createBlock(unref(_sfc_main$2), {
                    key: 0,
                    padding: "300",
                    paddingBlockStart: "0",
                    paddingBlockEnd: "0"
                  }, {
                    default: withCtx(() => [
                      createVNode(unref(_sfc_main$5), {
                        as: "span",
                        variant: "bodySm",
                        fontWeight: "medium"
                      }, {
                        default: withCtx(() => [
                          renderSlot(_ctx.$slots, "default")
                        ]),
                        _: 3
                      })
                    ]),
                    _: 3
                  })) : createCommentVNode("", true),
                  createElementVNode("div", null, [
                    _ctx.nextTooltip && _ctx.hasNext ? (openBlock(), createBlock(unref(_sfc_main$3), {
                      key: 0,
                      activatorWrapper: "span",
                      preferredPosition: "below",
                      content: _ctx.nextTooltip
                    }, {
                      default: withCtx(() => [
                        createVNode(unref(_sfc_main$4), {
                          id: "nextURL",
                          icon: unref(ChevronRightIcon),
                          accessibilityLabel: nextLabel.value,
                          url: _ctx.nextURL,
                          disabled: !_ctx.hasNext,
                          onClick: _cache[2] || (_cache[2] = ($event) => emits("next"))
                        }, null, 8, ["icon", "accessibilityLabel", "url", "disabled"])
                      ]),
                      _: 1
                    }, 8, ["content"])) : (openBlock(), createBlock(unref(_sfc_main$4), {
                      key: 1,
                      id: "nextURL",
                      icon: unref(ChevronRightIcon),
                      accessibilityLabel: nextLabel.value,
                      url: _ctx.nextURL,
                      disabled: !_ctx.hasNext,
                      onClick: _cache[3] || (_cache[3] = ($event) => emits("next"))
                    }, null, 8, ["icon", "accessibilityLabel", "url", "disabled"]))
                  ])
                ], 2)
              ]),
              _: 3
            })
          ]),
          _: 3
        })
      ], 10, _hoisted_1)) : (openBlock(), createElementBlock("nav", {
        key: 1,
        ref_key: "node",
        ref: node,
        "aria-label": navLabel.value,
        class: normalizeClass(unref(styles).Pagination)
      }, [
        prevKeyCondition.value ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(_ctx.previousKeys, (key) => {
          return openBlock(), createBlock(unref(_sfc_main$1), {
            key,
            keyCode: key,
            handler: prevKeypressHandler
          }, null, 8, ["keyCode"]);
        }), 128)) : createCommentVNode("", true),
        nextKeyCondition.value ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(_ctx.nextKeys, (key) => {
          return openBlock(), createBlock(unref(_sfc_main$1), {
            key,
            keyCode: key,
            handler: nextKeypressHandler
          }, null, 8, ["keyCode"]);
        }), 128)) : createCommentVNode("", true),
        createVNode(unref(_sfc_main$6), { variant: "segmented" }, {
          default: withCtx(() => [
            _ctx.previousTooltip && _ctx.hasPrevious ? (openBlock(), createBlock(unref(_sfc_main$3), {
              key: 0,
              activatorWrapper: "span",
              preferredPosition: "below",
              content: _ctx.previousTooltip
            }, {
              default: withCtx(() => [
                createVNode(unref(_sfc_main$4), {
                  id: "previousURL",
                  icon: unref(ChevronLeftIcon),
                  accessibilityLabel: previousLabel.value,
                  url: _ctx.previousURL,
                  disabled: !_ctx.hasPrevious,
                  onClick: _cache[4] || (_cache[4] = ($event) => emits("previous"))
                }, null, 8, ["icon", "accessibilityLabel", "url", "disabled"])
              ]),
              _: 1
            }, 8, ["content"])) : (openBlock(), createBlock(unref(_sfc_main$4), {
              key: 1,
              id: "previousURL",
              icon: unref(ChevronLeftIcon),
              accessibilityLabel: previousLabel.value,
              url: _ctx.previousURL,
              disabled: !_ctx.hasPrevious,
              onClick: _cache[5] || (_cache[5] = ($event) => emits("previous"))
            }, null, 8, ["icon", "accessibilityLabel", "url", "disabled"])),
            unref(hasSlot)(slots.default) ? (openBlock(), createBlock(unref(_sfc_main$2), {
              key: 2,
              padding: "300",
              paddingBlockStart: "0",
              paddingBlockEnd: "0"
            }, {
              default: withCtx(() => [
                createElementVNode("div", _hoisted_3, [
                  _ctx.hasNext && _ctx.hasPrevious ? (openBlock(), createElementBlock("span", _hoisted_4, [
                    renderSlot(_ctx.$slots, "default")
                  ])) : (openBlock(), createBlock(unref(_sfc_main$5), {
                    key: 1,
                    tone: "subdued",
                    as: "span"
                  }, {
                    default: withCtx(() => [
                      renderSlot(_ctx.$slots, "default")
                    ]),
                    _: 3
                  }))
                ])
              ]),
              _: 3
            })) : createCommentVNode("", true),
            _ctx.nextTooltip && _ctx.hasNext ? (openBlock(), createBlock(unref(_sfc_main$3), {
              key: 3,
              activatorWrapper: "span",
              preferredPosition: "below",
              content: _ctx.nextTooltip
            }, {
              default: withCtx(() => [
                createVNode(unref(_sfc_main$4), {
                  id: "nextURL",
                  icon: unref(ChevronRightIcon),
                  accessibilityLabel: nextLabel.value,
                  url: _ctx.nextURL,
                  disabled: !_ctx.hasNext,
                  onClick: _cache[6] || (_cache[6] = ($event) => emits("next"))
                }, null, 8, ["icon", "accessibilityLabel", "url", "disabled"])
              ]),
              _: 1
            }, 8, ["content"])) : (openBlock(), createBlock(unref(_sfc_main$4), {
              key: 4,
              id: "nextURL",
              icon: unref(ChevronRightIcon),
              accessibilityLabel: nextLabel.value,
              url: _ctx.nextURL,
              disabled: !_ctx.hasNext,
              onClick: _cache[7] || (_cache[7] = ($event) => emits("next"))
            }, null, 8, ["icon", "accessibilityLabel", "url", "disabled"]))
          ]),
          _: 3
        })
      ], 10, _hoisted_2));
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Pagination.vue_vue_type_script_setup_true_lang.js.map
