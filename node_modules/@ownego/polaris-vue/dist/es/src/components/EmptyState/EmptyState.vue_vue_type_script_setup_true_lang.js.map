{"version":3,"file":"EmptyState.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/EmptyState/EmptyState.vue"],"sourcesContent":["<template lang=\"pug\">\nBox(\n  padding-inline-start=\"0\",\n  padding-inline-end=\"0\",\n  padding-block-start=\"500\",\n  padding-block-end=\"1600\",\n)\n  BlockStack(inline-align=\"center\")\n    //- ImageMarkUp\n    div(\n      :class=\"imageContainerClass\",\n    )\n      Image(\n        v-if=\"largeImage\",\n        ref=\"imageRef\",\n        alt=\"\",\n        role=\"presentation\",\n        :source=\"largeImage\",\n        :class-name=\"imageClassName\",\n        :source-set=\"sourceSet\",\n        @load=\"imageLoaded = true\",\n      )\n      Image(\n        v-else,\n        ref=\"imageRef\",\n        alt=\"\",\n        role=\"presentation\",\n        :class-name=\"imageClassName\",\n        :source=\"image\",\n        @load=\"imageLoaded = true\",\n      )\n      div(\n        :class=\"skeletonImageClass\",\n      )\n    //- Detail Markup\n    Box(:max-width=\"fullWidth ? '100%' : '400px'\")\n      BlockStack(inline-align=\"center\")\n        //- TextContent\n        Box(\n          v-if=\"heading || hasSlot(slots.default)\",\n          padding-block-end=\"400\",\n        )\n          Box(\n            v-if=\"heading\",\n            padding-block-end=\"150\",\n          )\n            Text(\n              variant=\"headingMd\",\n              as=\"p\",\n              alignment=\"center\",\n            ) {{ heading }}\n          Text(\n            v-if=\"hasSlot(slots.default)\",\n            as=\"span\",\n            alignment=\"center\",\n            variant=\"bodySm\",\n          )\n            slot\n        //- ActionMarkup\n        InlineStack(\n          align=\"center\",\n          gap=\"200\",\n        )\n          ButtonFrom(\n            v-if=\"secondaryAction\",\n            :action=\"secondaryAction\",\n          )\n          ButtonFrom(\n            v-if=\"action\",\n            :action=\"action\",\n            :overrides=\"{ variant: 'primary', size: 'medium' }\",\n          )\n        //- FooterContent\n        Box(\n          v-if=\"hasSlot(slots.footerContent)\",\n          padding-block-start=\"400\",\n        )\n          Text(\n            as=\"span\",\n            alignment=\"center\",\n            variant=\"bodySm\",\n          )\n            slot(name=\"footerContent\")\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch } from 'vue';\nimport {\n  Box,\n  ButtonFrom,\n  Image,\n  Text,\n  BlockStack,\n  InlineStack,\n} from '@/components';\nimport { useHasSlot } from '@/use/useHasSlot';\nimport { classNames } from '@/utilities/css';\nimport type { VueNode, ComplexAction } from '@/utilities/types';\nimport styles from '@polaris/components/EmptyState/EmptyState.module.css';\n\ninterface EmptyStateProps {\n  /** The empty state heading */\n  heading?: string;\n  /**\n   * The path to the image to display.\n   * The image should have ~40px of white space above when empty state is used within a card, modal, or navigation component\n   */\n  image: string;\n  /** The path to the image to display on large screens */\n  largeImage?: string;\n  /** Whether or not to limit the image to the size of its container on large screens */\n  imageContained?: boolean;\n  /** Whether or not the content should span the full width of its container  */\n  fullWidth?: boolean;\n  /** Primary action for empty state */\n  action?: ComplexAction;\n  /** Secondary action for empty state */\n  secondaryAction?: ComplexAction;\n}\n\nconst { hasSlot } = useHasSlot();\n\nconst slots = defineSlots<{\n  /** Elements to display inside empty state */\n  default: (_: VueNode) => any;\n  /** Secondary elements to display below empty state actions */\n  footerContent: (_: VueNode) => any;\n}>();\n\nconst props = withDefaults(defineProps<EmptyStateProps>(), {\n  fullWidth: false\n});\n\nconst imageLoaded = ref<boolean>(false);\nconst imageRef = ref<HTMLImageElement | null>(null);\n\nconst imageClassName = computed(() => classNames(\n  styles.Image,\n  imageLoaded.value && styles.loaded,\n  props.imageContained && styles.imageContained,\n));\n\nconst skeletonImageClass = computed(() => classNames(\n  styles.SkeletonImage,\n  imageLoaded.value && styles.loaded,\n));\n\nconst imageContainerClass = computed(() => classNames(\n  props.imageContained && styles.imageContained,\n  !imageLoaded.value && styles.SkeletonImageContainer,\n));\n\nconst sourceSet = computed(() => {\n  return [\n    { source: props.image, descriptor: '568w' },\n    { source: props.largeImage, descriptor: '1136w' },\n  ];\n});\n\nwatch(\n  () => imageRef.value,\n  newVal => {\n    if (newVal && newVal.complete) {\n      imageLoaded.value = true;\n    }\n  }\n);\n</script>\n"],"names":["_useSlots"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwHM,UAAA,EAAE,YAAY;AAEpB,UAAM,QAAQA;AAOd,UAAM,QAAQ;AAIR,UAAA,cAAc,IAAa,KAAK;AAChC,UAAA,WAAW,IAA6B,IAAI;AAE5C,UAAA,iBAAiB,SAAS,MAAM;AAAA,MACpC,OAAO;AAAA,MACP,YAAY,SAAS,OAAO;AAAA,MAC5B,MAAM,kBAAkB,OAAO;AAAA,IAAA,CAChC;AAEK,UAAA,qBAAqB,SAAS,MAAM;AAAA,MACxC,OAAO;AAAA,MACP,YAAY,SAAS,OAAO;AAAA,IAAA,CAC7B;AAEK,UAAA,sBAAsB,SAAS,MAAM;AAAA,MACzC,MAAM,kBAAkB,OAAO;AAAA,MAC/B,CAAC,YAAY,SAAS,OAAO;AAAA,IAAA,CAC9B;AAEK,UAAA,YAAY,SAAS,MAAM;AACxB,aAAA;AAAA,QACL,EAAE,QAAQ,MAAM,OAAO,YAAY,OAAO;AAAA,QAC1C,EAAE,QAAQ,MAAM,YAAY,YAAY,QAAQ;AAAA,MAAA;AAAA,IAClD,CACD;AAED;AAAA,MACE,MAAM,SAAS;AAAA,MACf,CAAU,WAAA;AACJ,YAAA,UAAU,OAAO,UAAU;AAC7B,sBAAY,QAAQ;AAAA,QACtB;AAAA,MACF;AAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}