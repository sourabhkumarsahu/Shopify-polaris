import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, unref, renderSlot } from "vue";
import { c as classNames } from "../../../../utilities/css.js";
import { u as useToggle } from "../../../../use/useToggle.js";
import { s as styles } from "../../Connected.vue_vue_type_script_setup_true_lang.js";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Item",
  props: {
    position: {}
  },
  setup(__props) {
    const props = __props;
    const {
      value: focused,
      setTrue: forceTrueFocused,
      setFalse: forceFalseFocused
    } = useToggle(false);
    const className = computed(() => classNames(
      styles.Item,
      focused && styles["Item-focused"],
      props.position === "primary" ? styles["Item-primary"] : styles["Item-connection"]
    ));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value),
        onBlur: _cache[0] || (_cache[0] = //@ts-ignore
        (...args) => unref(forceTrueFocused) && unref(forceTrueFocused)(...args)),
        onFocus: _cache[1] || (_cache[1] = //@ts-ignore
        (...args) => unref(forceFalseFocused) && unref(forceFalseFocused)(...args))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 34);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Item.vue_vue_type_script_setup_true_lang.js.map
