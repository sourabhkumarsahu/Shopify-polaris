import { defineComponent, ref, computed, openBlock, createElementBlock, normalizeClass, unref, Fragment, createElementVNode, toDisplayString, createCommentVNode, createBlock } from "vue";
import { c as classNames, v as variationName } from "../../utilities/css.js";
import { u as useI18n } from "../../use/useI18n.js";
import { s as styleClass } from "./utils.js";
import { _ as _sfc_main$1 } from "../Image/Image.vue_vue_type_script_setup_true_lang.js";
const Avatar = "Polaris-Avatar";
const imageHasLoaded = "Polaris-Avatar--imageHasLoaded";
const Text = "Polaris-Avatar__Text";
const long = "Polaris-Avatar--long";
const hidden = "Polaris-Avatar--hidden";
const sizeXs = "Polaris-Avatar--sizeXs";
const sizeSm = "Polaris-Avatar--sizeSm";
const sizeMd = "Polaris-Avatar--sizeMd";
const sizeLg = "Polaris-Avatar--sizeLg";
const sizeXl = "Polaris-Avatar--sizeXl";
const styleOne = "Polaris-Avatar--styleOne";
const styleTwo = "Polaris-Avatar--styleTwo";
const styleThree = "Polaris-Avatar--styleThree";
const styleFour = "Polaris-Avatar--styleFour";
const styleFive = "Polaris-Avatar--styleFive";
const styleSix = "Polaris-Avatar--styleSix";
const styleSeven = "Polaris-Avatar--styleSeven";
const Image = "Polaris-Avatar__Image";
const Initials = "Polaris-Avatar__Initials";
const Svg = "Polaris-Avatar__Svg";
const styles = {
  Avatar,
  imageHasLoaded,
  Text,
  long,
  hidden,
  sizeXs,
  sizeSm,
  sizeMd,
  sizeLg,
  sizeXl,
  styleOne,
  styleTwo,
  styleThree,
  styleFour,
  styleFive,
  styleSix,
  styleSeven,
  Image,
  Initials,
  Svg
};
const _hoisted_1 = ["aria-label", "role"];
const _hoisted_2 = ["stroke-width"];
const _hoisted_3 = ["stroke-width"];
const verticalOffset = "0.35em";
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Avatar",
  props: {
    size: { default: "md" },
    name: {},
    initials: {},
    customer: { type: Boolean },
    source: {},
    accessibilityLabel: {}
  },
  emits: ["error"],
  setup(__props, { emit: __emit }) {
    const avatarStrokeWidth = {
      xs: "3",
      sm: "2.5",
      md: "2.5",
      lg: "2.5",
      xl: "2"
    };
    const props = __props;
    const emit = __emit;
    const i18n = useI18n();
    const status = ref(
      "PENDING"
      /* Pending */
    );
    const hasImage = computed(
      () => props.source && status.value !== "ERRORED"
      /* Errored */
    );
    const nameString = computed(() => props.name || props.initials);
    const className = computed(() => classNames(
      styles.Avatar,
      props.size && styles[variationName("size", props.size)],
      hasImage.value && status.value === "LOADED" && styles.imageHasLoaded,
      !props.customer && !hasImage.value && styles[variationName("style", styleClass(nameString.value))]
    ));
    const textClassName = computed(() => {
      var _a;
      return classNames(
        styles.Text,
        (((_a = props.initials) == null ? void 0 : _a.length) || 0) > 2 && styles.long
      );
    });
    const label = computed(() => {
      if (props.accessibilityLabel) {
        return props.accessibilityLabel;
      }
      if (props.name) {
        return props.name;
      }
      if (props.initials) {
        const splitInitials = props.initials.split("").join(" ");
        return i18n.translate("Polaris.Avatar.labelWithInitials", {
          initials: splitInitials
        });
      }
      return "Avatar";
    });
    const imageClassName = computed(() => classNames(
      styles.Image,
      status.value !== "LOADED" && styles.hidden
    ));
    const pathSize = computed(() => avatarStrokeWidth[props.size]);
    const handleLoad = () => {
      status.value = "LOADED";
    };
    const handleError = () => {
      status.value = "ERRORED";
      emit("error");
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", {
        "aria-label": label.value,
        class: normalizeClass(className.value),
        role: label.value ? "img" : "presentation"
      }, [
        !hasImage.value ? (openBlock(), createElementBlock("span", {
          key: 0,
          class: normalizeClass(unref(styles).Initials)
        }, [
          (openBlock(), createElementBlock("svg", {
            class: normalizeClass(unref(styles).Svg),
            viewBox: "0 0 40 40"
          }, [
            _ctx.customer || !_ctx.initials ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createElementVNode("path", {
                fill: "none",
                d: "M25.5 13.5C25.5 16.5376 23.0376 19 20 19C16.9624 19 14.5 16.5376 14.5 13.5C14.5 10.4624 16.9624 8 20 8C23.0376 8 25.5 10.4624 25.5 13.5Z",
                stroke: "currentColor",
                "stroke-width": pathSize.value
              }, null, 8, _hoisted_2),
              createElementVNode("path", {
                fill: "none",
                d: "M10.3433 29.682L9.47 31.254C9.03481 32.0373 9.60125 33 10.4974 33H29.5026C30.3988 33 30.9652 32.0373 30.53 31.254L29.6567 29.682C27.7084 26.175 24.0119 24 20 24C15.9882 24 12.2916 26.175 10.3433 29.682Z",
                stroke: "currentColor",
                "stroke-linecap": "round",
                "stroke-linejoin": "round",
                "stroke-width": pathSize.value
              }, null, 8, _hoisted_3)
            ], 64)) : (openBlock(), createElementBlock("text", {
              key: 1,
              class: normalizeClass(textClassName.value),
              x: "50%",
              y: "50%",
              dy: verticalOffset,
              fill: "currentColor",
              "text-anchor": "middle"
            }, toDisplayString(_ctx.initials), 3))
          ], 2))
        ], 2)) : createCommentVNode("", true),
        _ctx.source && status.value !== "ERRORED" ? (openBlock(), createBlock(unref(_sfc_main$1), {
          key: 1,
          class: normalizeClass(imageClassName.value),
          source: _ctx.source,
          alt: "",
          role: "presentation",
          onLoad: handleLoad,
          onError: handleError
        }, null, 8, ["class", "source"])) : createCommentVNode("", true)
      ], 10, _hoisted_1);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=Avatar.vue_vue_type_script_setup_true_lang.js.map
