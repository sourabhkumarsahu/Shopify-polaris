{"version":3,"file":"SelectAllActions.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/SelectAllActions/SelectAllActions.vue"],"sourcesContent":["<template lang=\"pug\">\ntransition(\n  v-if=\"selectMode\",\n  name=\"markup\",\n  @before-enter=\"onTransitionEnter\",\n  @enter=\"onTransitionEntered\",\n  @before-leave=\"onTransitionExiting\"\n  @leave=\"onTransitionExit\",\n)\n  div(:class=\"wrapperClassName\" ref=\"nodeRef\")\n    Box(\n      background=\"bg-surface-secondary\",\n      borderBlockStartWidth=\"025\",\n      borderColor=\"border\",\n      width=\"100%\",\n      paddingBlockStart=\"300\",\n      paddingBlockEnd=\"300\",\n      paddingInlineStart=\"300\",\n      paddingInlineEnd=\"400\",\n    )\n      InlineStack(gap=\"200\", align=\"start\", block-align=\"center\")\n        CheckableButton(\n          v-if=\"accessibilityLabel && currentInstance?.vnode.props?.onToggleAll\",\n          v-bind=\"props\",\n          v-model=\"model\",\n          :aria-live=\"ariaLive\",\n          :label=\" hasTextAndAction ? paginatedSelectAllText : label\",\n          @toggle-all=\"emits('toggle-all')\",\n        )\n        Text(\n          as=\"span\",\n          variant=\"bodySm\",\n          font-weight=\"medium\",\n        ) {{ hasTextAndAction ? paginatedSelectAllText : label}}\n        UnstyledButton(\n          v-if=\"paginatedSelectAllAction\",\n          :class=\"styles.AllAction\",\n          size=\"slim\",\n          :disabled=\"disabled\",\n          @click=\"handleClick\",\n        )\n          Text(\n            as=\"span\",\n            variant=\"bodySm\",\n            font-weight=\"medium\",\n          ) {{ paginatedSelectAllAction.content }}\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, ref, getCurrentInstance } from 'vue';\nimport { classNames } from '@/utilities/css';\nimport {\n  UnstyledButton,\n  CheckableButton,\n  Box,\n  Text,\n  InlineStack,\n} from '@/components';\nimport type { Action } from '@/utilities/types';\nimport styles from '@polaris/components/SelectAllActions/SelectAllActions.module.css';\n\ntype AriaLive = 'off' | 'polite' | undefined;\n\nexport interface SelectAllActionsProps {\n  /** Label for the bulk actions */\n  label?: string;\n  /** List is in a selectable state */\n  selectMode?: boolean;\n  /** Text to select all across pages */\n  paginatedSelectAllText?: string;\n  /** Action for selecting all across pages */\n  paginatedSelectAllAction?: Action;\n  /** Disables bulk actions */\n  disabled?: boolean;\n  /** If the BulkActions is currently sticky in view */\n  isSticky?: boolean;\n  /** Whether there is a Pagination element on the associated table. Disables the vertical appear animation if so */\n  hasPagination?: boolean;\n  /** @deprecated Visually hidden text for screen readers */\n  accessibilityLabel?: string;\n  /** @deprecated State of the bulk actions checkbox */\n  selected?: boolean | 'indeterminate';\n}\n\nconst wrapperStatus = {\n  entering: 'SelectAllActions-entering',\n  entered: 'SelectAllActions-entered',\n  exiting: 'SelectAllActions-exiting',\n  exited: 'SelectAllActions-exited',\n};\n\nconst props = defineProps<SelectAllActionsProps>();\nconst emits = defineEmits<{\n   /** @deprecated Callback when the select all checkbox is clicked */\n  'toggle-all': [];\n}>();\nconst model = defineModel<boolean | string>();\n\nconst currentInstance = getCurrentInstance();\n\nconst nodeRef = ref<HTMLElement | null>(null);\n\nconst hasTextAndAction = computed(() => props.paginatedSelectAllText && props.paginatedSelectAllAction);\nconst ariaLive = computed<AriaLive>(() => (hasTextAndAction.value ? 'polite' : undefined));\nconst wrapperClassName = computed(() => classNames(\n  styles.SelectAllActions,\n));\n\nconst onTransitionEnter = (el: Element) => {\n  el.classList.add(wrapperStatus.entering);\n};\n\nconst onTransitionEntered = (el: Element) => {\n  el.classList.remove(wrapperStatus.entering);\n  el.classList.add(wrapperStatus.entered);\n};\n\nconst onTransitionExiting = (el: Element) => {\n  el.classList.remove(wrapperStatus.entered);\n  el.classList.add(wrapperStatus.exiting);\n};\n\nconst onTransitionExit = (el: Element) => {\n  el.classList.remove(wrapperStatus.exiting);\n  el.classList.add(wrapperStatus.exited);\n};\n\nconst handleClick = () => {\n  if (props.paginatedSelectAllAction?.onAction){\n    props.paginatedSelectAllAction.onAction();\n  }\n}\n</script>\n"],"names":["_useModel"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA,UAAM,gBAAgB;AAAA,MACpB,UAAU;AAAA,MACV,SAAS;AAAA,MACT,SAAS;AAAA,MACT,QAAQ;AAAA,IAAA;AAGV,UAAM,QAAQ;AACd,UAAM,QAAQ;AAIR,UAAA,QAAQA,SAA6B,SAAA,YAAC;AAE5C,UAAM,kBAAkB;AAElB,UAAA,UAAU,IAAwB,IAAI;AAE5C,UAAM,mBAAmB,SAAS,MAAM,MAAM,0BAA0B,MAAM,wBAAwB;AACtG,UAAM,WAAW,SAAmB,MAAO,iBAAiB,QAAQ,WAAW,MAAU;AACnF,UAAA,mBAAmB,SAAS,MAAM;AAAA,MACtC,OAAO;AAAA,IAAA,CACR;AAEK,UAAA,oBAAoB,CAAC,OAAgB;AACtC,SAAA,UAAU,IAAI,cAAc,QAAQ;AAAA,IAAA;AAGnC,UAAA,sBAAsB,CAAC,OAAgB;AACxC,SAAA,UAAU,OAAO,cAAc,QAAQ;AACvC,SAAA,UAAU,IAAI,cAAc,OAAO;AAAA,IAAA;AAGlC,UAAA,sBAAsB,CAAC,OAAgB;AACxC,SAAA,UAAU,OAAO,cAAc,OAAO;AACtC,SAAA,UAAU,IAAI,cAAc,OAAO;AAAA,IAAA;AAGlC,UAAA,mBAAmB,CAAC,OAAgB;AACrC,SAAA,UAAU,OAAO,cAAc,OAAO;AACtC,SAAA,UAAU,IAAI,cAAc,MAAM;AAAA,IAAA;AAGvC,UAAM,cAAc,MAAM;;AACpB,WAAA,WAAM,6BAAN,mBAAgC,UAAS;AAC3C,cAAM,yBAAyB;MACjC;AAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}