import { defineComponent, mergeModels, useModel, getCurrentInstance, ref, computed, openBlock, createBlock, Transition, withCtx, createElementVNode, normalizeClass, createVNode, unref, mergeProps, createCommentVNode, createTextVNode, toDisplayString } from "vue";
import { c as classNames } from "../../utilities/css.js";
import { _ as _sfc_main$1 } from "../Box/Box.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$5 } from "../UnstyledButton/UnstyledButton.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$3 } from "../CheckableButton/CheckableButton.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$2 } from "../InlineStack/InlineStack.vue_vue_type_script_setup_true_lang.js";
import { _ as _sfc_main$4 } from "../Text/Text.vue_vue_type_script_setup_true_lang.js";
const SelectAllActions = "Polaris-SelectAllActions";
const AllAction = "Polaris-SelectAllActions__AllAction";
const styles = {
  SelectAllActions,
  "SelectAllActions-not-sticky": "Polaris-SelectAllActions--selectAllActionsNotSticky",
  "SelectAllActions-entering": "Polaris-SelectAllActions__SelectAllActions--entering",
  "SelectAllActions-exiting": "Polaris-SelectAllActions__SelectAllActions--exiting",
  "SelectAllActions-hasPagination": "Polaris-SelectAllActions__SelectAllActions--hasPagination",
  "SelectAllActions-exited": "Polaris-SelectAllActions__SelectAllActions--exited",
  "SelectAllActions-entered": "Polaris-SelectAllActions__SelectAllActions--entered",
  AllAction
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "SelectAllActions",
  props: /* @__PURE__ */ mergeModels({
    label: {},
    selectMode: { type: Boolean },
    paginatedSelectAllText: {},
    paginatedSelectAllAction: {},
    disabled: { type: Boolean },
    isSticky: { type: Boolean },
    hasPagination: { type: Boolean },
    accessibilityLabel: {},
    selected: { type: [Boolean, String] }
  }, {
    "modelValue": { type: [Boolean, String] },
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["toggle-all"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const wrapperStatus = {
      entering: "SelectAllActions-entering",
      entered: "SelectAllActions-entered",
      exiting: "SelectAllActions-exiting",
      exited: "SelectAllActions-exited"
    };
    const props = __props;
    const emits = __emit;
    const model = useModel(__props, "modelValue");
    const currentInstance = getCurrentInstance();
    const nodeRef = ref(null);
    const hasTextAndAction = computed(() => props.paginatedSelectAllText && props.paginatedSelectAllAction);
    const ariaLive = computed(() => hasTextAndAction.value ? "polite" : void 0);
    const wrapperClassName = computed(() => classNames(
      styles.SelectAllActions
    ));
    const onTransitionEnter = (el) => {
      el.classList.add(wrapperStatus.entering);
    };
    const onTransitionEntered = (el) => {
      el.classList.remove(wrapperStatus.entering);
      el.classList.add(wrapperStatus.entered);
    };
    const onTransitionExiting = (el) => {
      el.classList.remove(wrapperStatus.entered);
      el.classList.add(wrapperStatus.exiting);
    };
    const onTransitionExit = (el) => {
      el.classList.remove(wrapperStatus.exiting);
      el.classList.add(wrapperStatus.exited);
    };
    const handleClick = () => {
      var _a;
      if ((_a = props.paginatedSelectAllAction) == null ? void 0 : _a.onAction) {
        props.paginatedSelectAllAction.onAction();
      }
    };
    return (_ctx, _cache) => {
      return _ctx.selectMode ? (openBlock(), createBlock(Transition, {
        key: 0,
        name: "markup",
        onBeforeEnter: onTransitionEnter,
        onEnter: onTransitionEntered,
        onBeforeLeave: onTransitionExiting,
        onLeave: onTransitionExit
      }, {
        default: withCtx(() => [
          createElementVNode("div", {
            class: normalizeClass(wrapperClassName.value),
            ref_key: "nodeRef",
            ref: nodeRef
          }, [
            createVNode(unref(_sfc_main$1), {
              background: "bg-surface-secondary",
              borderBlockStartWidth: "025",
              borderColor: "border",
              width: "100%",
              paddingBlockStart: "300",
              paddingBlockEnd: "300",
              paddingInlineStart: "300",
              paddingInlineEnd: "400"
            }, {
              default: withCtx(() => [
                createVNode(unref(_sfc_main$2), {
                  gap: "200",
                  align: "start",
                  "block-align": "center"
                }, {
                  default: withCtx(() => {
                    var _a, _b;
                    return [
                      _ctx.accessibilityLabel && ((_b = (_a = unref(currentInstance)) == null ? void 0 : _a.vnode.props) == null ? void 0 : _b.onToggleAll) ? (openBlock(), createBlock(unref(_sfc_main$3), mergeProps({ key: 0 }, props, {
                        modelValue: model.value,
                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
                        "aria-live": ariaLive.value,
                        label: hasTextAndAction.value ? _ctx.paginatedSelectAllText : _ctx.label,
                        onToggleAll: _cache[1] || (_cache[1] = ($event) => emits("toggle-all"))
                      }), null, 16, ["modelValue", "aria-live", "label"])) : createCommentVNode("", true),
                      createVNode(unref(_sfc_main$4), {
                        as: "span",
                        variant: "bodySm",
                        "font-weight": "medium"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(hasTextAndAction.value ? _ctx.paginatedSelectAllText : _ctx.label), 1)
                        ]),
                        _: 1
                      }),
                      _ctx.paginatedSelectAllAction ? (openBlock(), createBlock(unref(_sfc_main$5), {
                        key: 1,
                        class: normalizeClass(unref(styles).AllAction),
                        size: "slim",
                        disabled: _ctx.disabled,
                        onClick: handleClick
                      }, {
                        default: withCtx(() => [
                          createVNode(unref(_sfc_main$4), {
                            as: "span",
                            variant: "bodySm",
                            "font-weight": "medium"
                          }, {
                            default: withCtx(() => [
                              createTextVNode(toDisplayString(_ctx.paginatedSelectAllAction.content), 1)
                            ]),
                            _: 1
                          })
                        ]),
                        _: 1
                      }, 8, ["class", "disabled"])) : createCommentVNode("", true)
                    ];
                  }),
                  _: 1
                })
              ]),
              _: 1
            })
          ], 2)
        ]),
        _: 1
      })) : createCommentVNode("", true);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=SelectAllActions.vue_vue_type_script_setup_true_lang.js.map
