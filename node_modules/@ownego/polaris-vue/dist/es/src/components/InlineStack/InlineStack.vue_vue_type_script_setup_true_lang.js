import { defineComponent, computed, openBlock, createBlock, resolveDynamicComponent, normalizeClass, normalizeStyle, withCtx, renderSlot } from "vue";
import { g as getResponsiveProps, a as getResponsiveValue, c as classNames } from "../../utilities/css.js";
const InlineStack = "Polaris-InlineStack";
const styles = {
  InlineStack
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "InlineStack",
  props: {
    as: { default: "div" },
    align: {},
    direction: { default: "row" },
    blockAlign: {},
    gap: {},
    wrap: { type: Boolean, default: true }
  },
  setup(__props) {
    const props = __props;
    const style = computed(() => {
      return {
        "--pc-inline-stack-align": props.align,
        "--pc-inline-stack-block-align": props.blockAlign,
        "--pc-inline-stack-wrap": props.wrap ? "wrap" : "nowrap",
        ...getResponsiveProps("inline-stack", "gap", "space", props.gap),
        ...getResponsiveValue("inline-stack", "flex-direction", props.direction)
      };
    });
    const className = computed(() => {
      return classNames(
        styles.InlineStack
      );
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.as), {
        class: normalizeClass(className.value),
        style: normalizeStyle(style.value)
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "style"]);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=InlineStack.vue_vue_type_script_setup_true_lang.js.map
