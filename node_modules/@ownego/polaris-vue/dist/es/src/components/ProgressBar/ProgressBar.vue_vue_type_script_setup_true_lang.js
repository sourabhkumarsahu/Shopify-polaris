import { defineComponent, inject, computed, openBlock, createElementBlock, normalizeClass, createElementVNode, unref, createVNode, Transition, withCtx, normalizeStyle, toDisplayString } from "vue";
import { c as classNames, v as variationName } from "../../utilities/css.js";
import { u as useI18n } from "../../use/useI18n.js";
const ProgressBar = "Polaris-ProgressBar";
const sizeSmall = "Polaris-ProgressBar--sizeSmall";
const sizeMedium = "Polaris-ProgressBar--sizeMedium";
const sizeLarge = "Polaris-ProgressBar--sizeLarge";
const toneHighlight = "Polaris-ProgressBar--toneHighlight";
const tonePrimary = "Polaris-ProgressBar--tonePrimary";
const toneSuccess = "Polaris-ProgressBar--toneSuccess";
const toneCritical = "Polaris-ProgressBar--toneCritical";
const Indicator = "Polaris-ProgressBar__Indicator";
const IndicatorAppearActive = "Polaris-ProgressBar__IndicatorAppearActive";
const IndicatorAppearDone = "Polaris-ProgressBar__IndicatorAppearDone";
const Progress = "Polaris-ProgressBar__Progress";
const Label = "Polaris-ProgressBar__Label";
const styles = {
  ProgressBar,
  sizeSmall,
  sizeMedium,
  sizeLarge,
  toneHighlight,
  tonePrimary,
  toneSuccess,
  toneCritical,
  Indicator,
  IndicatorAppearActive,
  IndicatorAppearDone,
  Progress,
  Label
};
const _hoisted_1 = ["aria-labelledby", "value"];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "ProgressBar",
  props: {
    progress: { default: 0 },
    size: { default: "medium" },
    animated: { type: Boolean, default: true },
    ariaLabelledBy: {},
    color: { default: "highlight" }
  },
  setup(__props) {
    const props = __props;
    const theme = inject("theme", {});
    const i18n = useI18n();
    const className = computed(
      () => classNames(
        styles.ProgressBar,
        props.size && styles[variationName("size", props.size)],
        props.color && styles[variationName("tone", props.color)]
      )
    );
    const warningMessage = computed(
      () => i18n.translate(
        props.progress < 0 ? "Polaris.ProgressBar.negativeWarningMessage" : "Polaris.ProgressBar.exceedWarningMessage",
        { progress: props.progress }
      )
    );
    const parsedProgress = computed(() => {
      if (props.progress < 0) {
        if (process.env.NODE_ENV === "development") {
          console.warn(warningMessage.value);
        }
        return 0;
      } else if (props.progress > 100) {
        if (process.env.NODE_ENV === "development") {
          console.warn(warningMessage.value);
        }
        return 100;
      }
      return props.progress;
    });
    const progressBarDuration = computed(
      () => props.animated ? theme.motion["motion-duration-500"] : theme.motion["motion-duration-0"]
    );
    const indicatorStyles = computed(() => ({
      "--pc-progress-bar-duration": progressBarDuration.value,
      "--pc-progress-bar-percent": parsedProgress.value / 100
    }));
    const onTransitionEnter = (el, done) => {
      setTimeout(() => {
        el.classList.add(styles.IndicatorAppearDone);
        done();
      }, 50);
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        createElementVNode("progress", {
          max: "100",
          class: normalizeClass(unref(styles).Progress),
          "aria-labelledby": _ctx.ariaLabelledBy,
          value: parsedProgress.value
        }, null, 10, _hoisted_1),
        createVNode(Transition, {
          appear: "",
          duration: parseInt(progressBarDuration.value, 10),
          onEnter: onTransitionEnter
        }, {
          default: withCtx(() => [
            createElementVNode("div", {
              class: normalizeClass(unref(classNames)(unref(styles).Indicator)),
              style: normalizeStyle(indicatorStyles.value)
            }, [
              createElementVNode("span", {
                class: normalizeClass(unref(styles).Label)
              }, toDisplayString(parsedProgress.value) + "%", 3)
            ], 6)
          ]),
          _: 1
        }, 8, ["duration"])
      ], 2);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=ProgressBar.vue_vue_type_script_setup_true_lang.js.map
