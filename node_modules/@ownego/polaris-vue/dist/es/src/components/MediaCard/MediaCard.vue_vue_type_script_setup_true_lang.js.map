{"version":3,"file":"MediaCard.vue_vue_type_script_setup_true_lang.js","sources":["../../../../../src/components/MediaCard/MediaCard.vue"],"sourcesContent":["<template lang=\"pug\">\nLegacyCard\n  div(:class=\"mediaCardClassName\")\n    div(:class=\"mediaContainerClassName\")\n      slot\n    div(:class=\"infoContainerClassName\")\n      Box(padding=\"500\")\n        BlockStack(gap=\"200\")\n          InlineStack(\n            align=\"space-between\",\n            :wrap=\"false\",\n            gap=\"200\",\n          )\n            slot(v-if=\"hasSlot(slots.title)\", name=\"title\")\n            Text(\n              v-else,\n              variant=\"headingSm\",\n              as=\"h2\",\n            ) {{ title }}\n            Box(\n              v-if=\"popoverActions.length > 0 || hasDismiss\",\n              position=\"absolute\",\n              insetInlineEnd=\"500\",\n              :zIndex=\"'var(--p-z-index-2)'\",\n            )\n              InlineStack(gap=\"100\", :wrap=\"false\")\n                Popover(\n                  v-if=\"popoverActions.length > 0\",\n                  :active=\"popoverActive\",\n                  :onClose=\"togglePopoverActive\",\n                  preferredAlignment=\"left\",\n                  preferredPosition=\"below\",\n                )\n                  template(#activator)\n                    InlineStack(blockAlign=\"center\")\n                      Button(\n                        variant=\"tertiary\",\n                        size=\"slim\",\n                        :icon=\"MenuHorizontalIcon\",\n                        :accessibilityLabel=\"i18n.translate('Polaris.MediaCard.popoverButton')\",\n                        @click=\"togglePopoverActive\",\n                      )\n                  ActionList(\n                    :items=\"popoverActions\",\n                    @action-any-item=\"togglePopoverActive\",\n                  )\n                Button(\n                  v-if=\"hasDismiss\",\n                  size=\"slim\",\n                  variant=\"tertiary\",\n                  :icon=\"XIcon\"\n                  :accessibilityLabel=\"i18n.translate('Polaris.MediaCard.dismissButton')\",\n                  @click=\"emits('dismiss')\",\n                )\n          Text(\n            as=\"p\",\n            variant=\"bodySm\",\n          ) {{ description }}\n          div(:class=\"actionClassName\")\n            ButtonGroup\n              ButtonFrom(v-if=\"primaryAction\", :action=\"primaryAction\")\n              ButtonFrom(v-if=\"secondaryAction\", :action=\"secondaryAction\")\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, getCurrentInstance } from 'vue';\nimport styles from '@polaris/components/MediaCard/MediaCard.module.css';\nimport useI18n from '@/use/useI18n';\nimport {\n  Text,\n  BlockStack,\n  InlineStack,\n  Button,\n  Box,\n  Popover,\n  ButtonGroup,\n  ActionList,\n  LegacyCard,\n} from '@/components';\nimport type {\n  VueNode,\n  ComplexAction,\n  ActionListItemDescriptor,\n} from '@/utilities/types';\nimport { useToggle } from '@/use/useToggle';\nimport { classNames } from '@/utilities/css';\nimport { useHasSlot } from '@/use/useHasSlot';\nimport MenuHorizontalIcon from '@icons/MenuHorizontalIcon.svg';\nimport XIcon from'@icons/XIcon.svg';\nimport { ButtonFrom } from '../Button';\n\ntype Size = 'small' | 'medium';\n\ninterface MediaCardProps {\n  /** Body content */\n  description: string;\n  /** Main call to action, rendered as a basic button */\n  primaryAction?: ComplexAction;\n  /** Secondary call to action, rendered as a plain button */\n  secondaryAction?: ComplexAction;\n  /** Action list items to render in ellipsis popover */\n  popoverActions?: ActionListItemDescriptor[];\n  /** Whether or not card content should be laid out vertically\n   * @default false\n   */\n  portrait?: boolean;\n  /** Size of the visual media in the card\n   * @default 'medium'\n   */\n  size?: Size;\n  /** Heading content. */\n  title?: string;\n}\n\nconst slots = defineSlots<{\n  /** The visual media to display in the card */\n  default: (_: VueNode) => any;\n  /** Heading content */\n  title: (_: VueNode) => any;\n}>();\n\nconst props = withDefaults(defineProps<MediaCardProps>(), {\n  popoverActions: () => [],\n  portrait: false,\n  size: 'medium',\n});\n\ntype MediaCardEmits = {\n  /** Callback when MediaCard is dismissed */\n  'dismiss': [];\n}\n\nconst emits = defineEmits<MediaCardEmits>();\n\nconst i18n = useI18n();\nconst { hasSlot } = useHasSlot();\nconst { value: popoverActive, toggle: togglePopoverActive } = useToggle(false);\nconst currentInstance = getCurrentInstance();\n\nconst mediaCardClassName = computed(() => classNames(\n  styles.MediaCard,\n  props.portrait && styles.portrait,\n));\n\nconst mediaContainerClassName = computed(() => classNames(\n  styles.MediaContainer,\n  props.portrait && styles.portrait,\n  props.size === 'small' && styles.sizeSmall,\n));\n\nconst infoContainerClassName = computed(() => classNames(\n  styles.InfoContainer,\n  props.portrait && styles.portrait,\n  props.size === 'small' && styles.sizeSmall,\n));\n\nconst actionClassName = computed(() => classNames(\n  styles.ActionContainer,\n  props.portrait && styles.portrait,\n));\n\nconst hasDismiss = computed(() => Boolean(currentInstance?.vnode.props?.onDismiss));\n</script>\n"],"names":["_useSlots"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkHA,UAAM,QAAQA;AAOd,UAAM,QAAQ;AAWd,UAAM,QAAQ;AAEd,UAAM,OAAO;AACP,UAAA,EAAE,YAAY;AACpB,UAAM,EAAE,OAAO,eAAe,QAAQ,wBAAwB,UAAU,KAAK;AAC7E,UAAM,kBAAkB;AAElB,UAAA,qBAAqB,SAAS,MAAM;AAAA,MACxC,OAAO;AAAA,MACP,MAAM,YAAY,OAAO;AAAA,IAAA,CAC1B;AAEK,UAAA,0BAA0B,SAAS,MAAM;AAAA,MAC7C,OAAO;AAAA,MACP,MAAM,YAAY,OAAO;AAAA,MACzB,MAAM,SAAS,WAAW,OAAO;AAAA,IAAA,CAClC;AAEK,UAAA,yBAAyB,SAAS,MAAM;AAAA,MAC5C,OAAO;AAAA,MACP,MAAM,YAAY,OAAO;AAAA,MACzB,MAAM,SAAS,WAAW,OAAO;AAAA,IAAA,CAClC;AAEK,UAAA,kBAAkB,SAAS,MAAM;AAAA,MACrC,OAAO;AAAA,MACP,MAAM,YAAY,OAAO;AAAA,IAAA,CAC1B;AAEK,UAAA,aAAa,SAAS;;AAAM,sBAAQ,wDAAiB,MAAM,UAAvB,mBAA8B,SAAS;AAAA,KAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}